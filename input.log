{"language":"Solidity","sources":{"contracts/era-compiler-tests/solidity/simple/aave.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!                 \"0x3c\",\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2c\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function first(\n        uint256 data,\n        uint256 reserveIndex\n    ) public pure returns(uint256) {\n        uint256 bit = 1 << reserveIndex;\n        data &= ~bit;\n        return data;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/arrays/multidimensional.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"array_2d\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"array_2d\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"1\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"array_3d\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"array_3d\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"1\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"array_4d\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"array_4d\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"1\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ncontract Test {\r\n    uint8 constant ARRAY_SIZE_2D = 8;\r\n    uint8 constant ARRAY_SIZE_3D = 3;\r\n    uint8 constant ARRAY_SIZE_4D = 1;\r\n\r\n    function array_2d() public pure returns(uint64) {\r\n        uint8[ARRAY_SIZE_2D][ARRAY_SIZE_2D] memory array;\r\n\r\n        for(uint8 i = 0; i < ARRAY_SIZE_2D; i++) {\r\n            for(uint8 j = 0; j < ARRAY_SIZE_2D; j++) {\r\n                array[i][j] = i*ARRAY_SIZE_2D + j;\r\n            }\r\n        }\r\n\r\n        bool result = true;\r\n        // other order\r\n\r\n        for(uint8 j = 0; j < ARRAY_SIZE_2D; j++) {\r\n            for(uint8 i = 0; i < ARRAY_SIZE_2D; i++) {\r\n                result = result && array[i][j] == i*ARRAY_SIZE_2D + j;\r\n            }\r\n        }\r\n\r\n        if (result) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function array_3d() public pure returns(uint64) {\r\n        uint8[ARRAY_SIZE_3D][ARRAY_SIZE_3D][ARRAY_SIZE_3D] memory array;\r\n\r\n        for(uint8 i = 0; i < ARRAY_SIZE_3D; i++) {\r\n            for(uint8 j = 0; j < ARRAY_SIZE_3D; j++) {\r\n                for(uint8 p = 0; p < ARRAY_SIZE_3D; p++) {\r\n                    array[i][j][p] = i*ARRAY_SIZE_3D*ARRAY_SIZE_3D + j*ARRAY_SIZE_3D + p;\r\n                }\r\n            }\r\n        }\r\n\r\n        bool result = true;\r\n        // other order\r\n\r\n        for(uint8 p = 0; p < ARRAY_SIZE_3D; p++) {\r\n            for(uint8 j = 0; j < ARRAY_SIZE_3D; j++) {\r\n                for(uint8 i = 0; i < ARRAY_SIZE_3D; i++) {\r\n                    result = result && array[i][j][p] == i*ARRAY_SIZE_3D*ARRAY_SIZE_3D + j*ARRAY_SIZE_3D + p;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function array_4d() public pure returns(uint64) {\r\n        uint8[ARRAY_SIZE_4D][ARRAY_SIZE_4D][ARRAY_SIZE_4D][ARRAY_SIZE_4D] memory array;\r\n\r\n        for(uint8 i = 0; i < ARRAY_SIZE_4D; i++) {\r\n            for(uint8 j = 0; j < ARRAY_SIZE_4D; j++) {\r\n                for(uint8 p = 0; p < ARRAY_SIZE_4D; p++) {\r\n                    for(uint8 h = 0; h < ARRAY_SIZE_4D; h++) {\r\n                        array[i][j][p][h] = i*ARRAY_SIZE_4D*ARRAY_SIZE_4D*ARRAY_SIZE_4D\r\n                        + j*ARRAY_SIZE_4D*ARRAY_SIZE_4D + p*ARRAY_SIZE_4D + h;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        bool result = true;\r\n        // other order\r\n\r\n        for(uint8 h = 0; h < ARRAY_SIZE_4D; h++) {\r\n            for(uint8 p = 0; p < ARRAY_SIZE_4D; p++) {\r\n                for(uint8 j = 0; j < ARRAY_SIZE_4D; j++) {\r\n                    for(uint8 i = 0; i < ARRAY_SIZE_4D; i++) {\r\n                        result = result && array[i][j][p][h] == i*ARRAY_SIZE_4D*ARRAY_SIZE_4D*ARRAY_SIZE_4D\r\n                        + j*ARRAY_SIZE_4D*ARRAY_SIZE_4D + p*ARRAY_SIZE_4D + h;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/call_conditions.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function first() public pure returns(uint256) {\n        return main(84, 2, 43) + main(23, 23, 42) - main(22, 2, 3);\n    }\n\n    function second() public pure returns(uint256) {\n        return main(15, 10, 43) + main(30, 10, 42) - main(3, 1, 3);\n    }\n\n    function main(uint256 a, uint256 b, uint256 c) private pure returns(uint256) {\n        if (c > 42) {\n            return a + b;\n        }\n        if (c == 42) {\n            return a - b;\n        }\n        return a * b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/algorithm/cryptography/book_cypher.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"complex1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!                 \"1\", \"12\", \"55\", \"53\", \"22\", \"34\", \"45\", \"21\", \"12\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"12\", \"55\", \"53\", \"22\", \"34\", \"45\", \"21\", \"12\", \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!                 \"37\", \"11\", \"2\", \"59\", \"0\", \"63\", \"41\", \"27\", \"17\", \"9\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"37\", \"11\", \"2\", \"59\", \"0\", \"63\", \"41\", \"27\", \"17\", \"9\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    uint8 constant KEY_SZ = 4;\n    uint8[KEY_SZ][KEY_SZ][KEY_SZ] KEY =\n    [\n        [\n            [10, 33, 26, 15],\n            [32, 62, 43, 58],\n            [3, 8, 45, 23],\n            [13, 55, 30, 21]\n        ], [\n            [11, 22, 9, 2],\n            [28, 52, 38, 27],\n            [61, 53, 56, 37],\n            [5, 25, 39, 59]\n        ], [\n            [19, 36, 4, 48],\n            [51, 0, 44, 35],\n            [54, 46, 6, 60],\n            [14, 31, 63, 29]\n        ], [\n            [40, 7, 20, 50],\n            [41, 12, 49, 16],\n            [18, 17, 57, 34],\n            [42, 24, 1, 47]\n        ]\n    ];\n\n\n    uint8 constant SIZE = 10;\n    uint8 constant ALPHABET = 64;\n\n    function encrypt(uint8[SIZE] memory data) private view returns(uint8[SIZE] memory) {\n        for(uint8 i = 0; i < SIZE; i++) {\n            bool fl = false;\n            for(uint8 page = 0; page < KEY_SZ; page++) {\n                for(uint8 row = 0; row < KEY_SZ; row++) {\n                    for(uint8 col = 0; col < KEY_SZ; col++) {\n                        if (KEY[page][row][col] == data[i]) {\n                            data[i] = page*KEY_SZ*KEY_SZ + row*KEY_SZ + col;\n                            fl = true;\n                            break;\n                        }\n                    }\n                    if (fl) {\n                        break;\n                    }\n                }\n                if (fl) {\n                    break;\n                }\n            }\n        }\n        return data;\n    }\n\n    function decrypt(uint8[SIZE] memory data) private view returns(uint8[SIZE] memory) {\n        for(uint8 i = 0; i < SIZE; i++) {\n            uint8 page = data[i] / KEY_SZ / KEY_SZ;\n            uint8 ost = data[i] % (KEY_SZ * KEY_SZ);\n            uint8 row = ost / KEY_SZ;\n            uint8 col = ost % KEY_SZ;\n            data[i] = KEY[page][row][col];\n        }\n        return data;\n    }\n\n    function complex(uint8[SIZE] memory message) public view returns(uint8[SIZE] memory) {\n        return decrypt(encrypt(message));\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/cryptography/caesar_cypher.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"encrypt\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"encrypt\",\n//!             \"calldata\": [\n//!                 \"12\", \"143\", \"213\", \"43\", \"85\", \"42\", \"98\", \"111\", \"224\", \"76\", \"117\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"129\", \"4\", \"74\", \"160\", \"202\", \"159\", \"215\", \"228\", \"85\", \"193\"\n//!     ]\n//! }, {\n//!     \"name\": \"decrypt\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"decrypt\",\n//!             \"calldata\": [\n//!                 \"129\", \"4\", \"74\", \"160\", \"202\", \"159\", \"215\", \"228\", \"85\", \"193\", \"117\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"12\", \"143\", \"213\", \"43\", \"85\", \"42\", \"98\", \"111\", \"224\", \"76\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!                 \"1\", \"12\", \"55\", \"53\", \"213\", \"123\", \"45\", \"21\", \"12\", \"92\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    uint8 constant SIZE = 10;\n\n    function encrypt(uint8[SIZE] memory data, uint8 key) public pure returns(uint8[SIZE] memory) {\n        for(uint8 i = 0; i < SIZE; i++) {\n            data[i] = uint8((uint16(data[i]) + key) % 256);\n        }\n        return data;\n    }\n\n    function decrypt(uint8[SIZE] memory data, uint8 key) public pure returns(uint8[SIZE] memory) {\n        return encrypt(data, uint8((256 - uint16(key)) % 256));\n    }\n\n    function complex(uint8[SIZE] memory message) public pure returns(uint64) {\n        bool result = true;\n        for(uint8 key = 0; key < 20; key++) {\n            uint8[SIZE] memory output = decrypt(encrypt(message, key), key);\n            for(uint8 i = 0; i < SIZE; i++) {\n                result = result && message[i] == output[i];\n            }\n        }\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/cryptography/vigenere_cypher.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"complex1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!                 \"1\", \"231\", \"55\", \"221\", \"22\", \"34\", \"118\", \"21\", \"89\", \"7\",\n//!                 \"12\", \"255\", \"0\", \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"231\", \"55\", \"221\", \"22\", \"34\", \"118\", \"21\", \"89\", \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!                 \"12\", \"128\", \"255\", \"0\", \"123\", \"12\", \"68\", \"192\", \"2\", \"19\",\n//!                 \"17\", \"181\", \"64\", \"243\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"12\", \"128\", \"255\", \"0\", \"123\", \"12\", \"68\", \"192\", \"2\", \"19\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function encryptSym(uint8 sym, uint8 keySym) private pure returns(uint8) {\n        return uint8((uint16(sym) + keySym) % 256);\n    }\n\n    function decryptSym(uint8 sym, uint8 keySym) private pure returns(uint8) {\n        uint16 symbol = sym;\n        if (symbol < keySym) {\n            symbol += 256;\n        }\n        return uint8(symbol - keySym);\n    }\n\n    uint8 constant SIZE = 10;\n    uint8 constant KEY_SIZE = 4;\n    \n    function encrypt(uint8[SIZE] memory data, uint8[KEY_SIZE] memory key) private pure returns(uint8[SIZE] memory) {\n        for(uint8 i = 0; i < SIZE; i++) {\n            data[i] = encryptSym(data[i], key[i % KEY_SIZE]);\n        }\n        return data;\n    }\n\n    function decrypt(uint8[SIZE] memory data, uint8[KEY_SIZE] memory key) private pure returns(uint8[SIZE] memory) {\n        for(uint8 i = 0; i < SIZE; i++) {\n            data[i] = decryptSym(data[i], key[i % KEY_SIZE]);\n        }\n        return data;\n    }\n\n    function complex(uint8[SIZE] memory message, uint8[KEY_SIZE] memory key) public pure returns(uint8[SIZE] memory) {\n        return decrypt(encrypt(message, key), key);\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/factorial.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"120\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"720\"\n//!     ]\n//! }, {\n//!     \"name\": \"three\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5040\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 n) public pure returns(uint64) {\n        uint64 fact = 1;\n        for(uint8 i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/fibonacci.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"89\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"14\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"233\"\n//!     ]\n//! }, {\n//!     \"name\": \"three\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"610\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 n) public pure returns(uint64) {\n        uint64 value1 = 0;\n        uint64 value2 = 1;\n        uint64 fibo = value1;\n\n        for(uint8 i = 1; i <= n - 2; i++) {\n            fibo = value1 + value2;\n            value1 = value2;\n            value2 = fibo;\n        }\n\n        return fibo;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/floating_point_simulation/geometry/area.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"triangle1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"triangle\",\n//!             \"calldata\": [\n//!                 \"3\", \"4\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"600\"\n//!     ]\n//! }, {\n//!     \"name\": \"triangle2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"triangle\",\n//!             \"calldata\": [\n//!                 \"37\", \"111\", \"87\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"136937\"\n//!     ]\n//! }, {\n//!     \"name\": \"polygon1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"polygon\",\n//!             \"calldata\": [\n//!                 \"5\",\n//!                 \"2\", \"4\", \"5\", \"3\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                 \"4\", \"3\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1200\"\n//!     ]\n//! }, {\n//!     \"name\": \"polygon2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"polygon\",\n//!             \"calldata\": [\n//!                 \"7\",\n//!                 \"13\", \"17\", \"111\", \"113\", \"55\", \"31\", \"1\", \"0\", \"0\", \"0\",\n//!                 \"21\", \"29\", \"111\", \"92\", \"7\", \"7\", \"1\", \"0\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"385600\"\n//!     ]\n//! }, {\n//!     \"name\": \"sphere1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"sphere\",\n//!             \"calldata\": [\n//!                 \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"61575\"\n//!     ]\n//! }, {\n//!     \"name\": \"sphere2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"sphere\",\n//!             \"calldata\": [\n//!                 \"7142423\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64106342310051445\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    uint128 constant EPS = 1E6;\n    // PI * EPS^3\n    uint128 constant PI = 3141592653589793238;\n    uint128 constant PRECISION = 100;\n    uint8 constant DIM = 10;\n    uint128 constant MAX_U128_SQRT = 18446744073709551615;\n\n    struct Triangle {\n        uint128 a;\n        uint128 b;\n        uint128 c;\n    }\n\n    struct Polygon {\n        uint8 n;\n        uint128[DIM] x;\n        uint128[DIM] y;\n    }\n\n    struct Sphere {\n        uint128 r;\n    }\n\n    function triangle(Triangle memory triangle) public pure returns(uint64) {\n        triangle.a *= EPS;\n        triangle.b *= EPS;\n        triangle.c *= EPS;\n        // area * PRECISION\n        return uint64(triangleArea(triangle) * PRECISION / EPS / EPS);\n    }\n\n    function polygon(Polygon memory polygon) public pure returns(uint64) {\n        for(uint8 i = 0; i < polygon.n; i++) {\n            polygon.x[i] *= EPS;\n            polygon.y[i] *= EPS;\n        }\n        // area * PRECISION\n        return uint64(polygonArea(polygon) * PRECISION / EPS / EPS);\n    }\n\n    function sphere(Sphere memory sphere) public pure returns(uint64) {\n        // surface * PRECISION\n        return uint64(sphereSurface(sphere, PI) * PRECISION / EPS / EPS / EPS);\n    }\n\n    function sqrt(uint128 n) private pure returns(uint128) {\n        // binary search\n        uint128 l = 0;\n        uint128 r = MAX_U128_SQRT;\n        while (l < r) {\n            uint128 m = (l + r + 1) / 2;\n            if (m*m <= n) {\n                l = m;\n            } else {\n                r = m - 1;\n            }\n        }\n        if (n - l*l < (l+1)*(l+1) - n) {\n            return l;\n        } else {\n            return l + 1;\n        }\n    }\n\n    function triangleArea(Triangle memory triangle) private pure returns(uint128) {\n        uint128 p = (triangle.a + triangle.b + triangle.c) / 2;\n        return sqrt(p * (p - triangle.a) * (p - triangle.b) * (p - triangle.c));\n    }\n\n    function polygonArea(Polygon memory polygon) private pure returns(uint128) {\n        uint128 sp = 0;\n        uint128 sn = 0;\n        for(uint8 i = 1; i < polygon.n; i++) {\n            if (polygon.x[i] > polygon.x[i - 1]) {\n                sp += (polygon.x[i] - polygon.x[i - 1]) * (polygon.y[i] + polygon.y[i - 1]);\n            } else {\n                sn += (polygon.x[i - 1] - polygon.x[i]) * (polygon.y[i] + polygon.y[i - 1]);\n            }\n        }\n        if (polygon.x[0] > polygon.x[polygon.n - 1]) {\n            sp += (polygon.x[0] - polygon.x[polygon.n - 1]) * (polygon.y[0] + polygon.y[polygon.n - 1]);\n        } else {\n            sn += (polygon.x[polygon.n - 1] - polygon.x[0]) * (polygon.y[0] + polygon.y[polygon.n - 1]);\n        }\n        return (sp - sn) / 2;\n    }\n\n    function sphereSurface(Sphere memory sphere, uint128 pi) private pure returns(uint128) {\n        return 4 * pi * sphere.r * sphere.r;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/floating_point_simulation/geometry/lines.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"distancePoint1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"distancePointEntry\",\n//!             \"calldata\": [\n//!                 \"7\", \"4\", \"10\",\n//!                 \"5\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"607\"\n//!     ]\n//! }, {\n//!     \"name\": \"distancePoint2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"distancePointEntry\",\n//!             \"calldata\": [\n//!                 \"2117\", \"443\", \"1021\",\n//!                 \"5123\", \"145\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"504455\"\n//!     ]\n//! }, {\n//!     \"name\": \"intersectionPoint1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"intersectionPoint\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"0\",\n//!                 \"1\", \"1\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"100\", \"100\"\n//!     ]\n//! }, {\n//!     \"name\": \"intersectionPoint2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"intersectionPoint\",\n//!             \"calldata\": [\n//!                 \"121\", \"17\", \"123\",\n//!                 \"912\", \"123\", \"2133\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"69\", \"1218\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    uint128 constant EPS = 1E6;\n    uint128 constant PRECISION = 100;\n\n    struct Point {\n        uint128 x;\n        uint128 y;\n    }\n\n    struct Line {\n        uint128 a;\n        uint128 b;\n        uint128 c;\n    }\n\n    function distancePointEntry(Line memory line, Point memory point) public pure returns(uint64) {\n        // 6.077701994871213... * PRECISION\n        return uint64(distancePoint(line, point) * PRECISION / EPS);\n    }\n\n    function intersectionPoint(uint128 a1, uint128 mb1, uint128 c1, uint128 a2, uint128 b2, uint128 mc2) public pure returns(Point memory) {\n        Point memory point = linesIntersection(a1, mb1, c1, a2, b2, mc2);\n        point.x *= PRECISION;\n        point.x /= EPS;\n        point.y *= PRECISION;\n        point.y /= EPS;\n        return point;\n    }\n\n    function sqrt(uint128 n) private pure returns(uint128) {\n        // binary search\n        uint128 l = 0;\n        uint128 r = n;\n        while (l < r) {\n            uint128 m = (l + r + 1) / 2;\n            if (m*m <= n) {\n                l = m;\n            } else {\n                r = m - 1;\n            }\n        }\n        if (n - l*l < (l+1)*(l+1) - n) {\n            return l;\n        } else {\n            return l + 1;\n        }\n    }\n\n    // mb1 == -b1, mc2 == -c2\n    // returns x * EPS, y * EPS\n    function linesIntersection(uint128 a1, uint128 mb1, uint128 c1, uint128 a2, uint128 b2, uint128 mc2) private pure returns(Point memory) {\n        uint128 d = a1 * b2 + a2 * mb1;\n        return Point((mb1 * mc2 - b2 * c1) * EPS / d, (a2 * c1 + a1 * mc2) * EPS / d);\n    }\n\n    function distancePoint(Line memory line, Point memory point) private pure returns(uint128) {\n        return ((line.a * point.x + line.b * point.y + line.c) * EPS * EPS) / sqrt((line.a * line.a + line.b * line.b) * EPS * EPS);\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/floating_point_simulation/geometry/volume.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"cube1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"cube\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"27\"\n//!     ]\n//! }, {\n//!     \"name\": \"cube2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"cube\",\n//!             \"calldata\": [\n//!                 \"312174\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"30422169911604024\"\n//!     ]\n//! }, {\n//!     \"name\": \"sphere1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"sphere\",\n//!             \"calldata\": [\n//!                 \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"143675\"\n//!     ]\n//! }, {\n//!     \"name\": \"sphere2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"sphere\",\n//!             \"calldata\": [\n//!                 \"71249\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"151504289520102405\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    uint128 constant EPS = 1E6;\n    // PI * EPS^3\n    uint128 constant PI = 3141592653589793238;\n    uint128 constant PRECISION = 100;\n\n    struct Cube {\n        uint128 a;\n    }\n\n    struct Sphere {\n        uint128 r;\n    }\n\n    function cube(Cube memory cube) public pure returns(uint64) {\n        return uint64(cubeVolume(cube));\n    }\n\n    function sphere(Sphere memory sphere) public pure returns(uint64) {\n        // volume * PRECISION\n        return uint64(sphereVolume(sphere, PI) * PRECISION / EPS / EPS / EPS);\n    }\n\n    function cubeVolume(Cube memory cube) private pure returns(uint128) {\n        return cube.a * cube.a * cube.a;\n    }\n\n    function sphereVolume(Sphere memory sphere, uint128 pi) private pure returns(uint128) {\n        return 4 * pi * sphere.r * sphere.r * sphere.r / 3;\n    }\n\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/floating_point_simulation/square_equation.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"noSolution\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\", \"0\", \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!                 \"2\", \"7\", \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"278\", \"71\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!                 \"17\", \"29\", \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"100\", \"70\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    uint128 constant EPS = 1E10;\n    uint128 constant PRECISION = 100;\n    uint128 constant MAX_U128_SQRT = 18446744073709551615;\n\n    function entry(uint128 a, uint128 mb, uint128 c) public pure returns(bool, uint128, uint128) {\n        (bool p, uint128 x1, uint128 x2) = main(a, mb, c);\n        x1 *= PRECISION;\n        x1 /= EPS;\n        x2 *= PRECISION;\n        x2 /= EPS;\n        return (p, x1, x2);\n    }\n\n    function sqrt(uint128 n) private pure returns(uint128) {\n        // binary search\n        uint128 l = 0;\n        uint128 r = MAX_U128_SQRT;\n        while (l < r) {\n            uint128 m = (l + r + 1) / 2;\n            if (m*m <= n) {\n                l = m;\n            } else {\n                r = m - 1;\n            }\n        }\n        if (n - l*l < (l+1)*(l+1) - n) {\n            return l;\n        } else {\n            return l + 1;\n        }\n    }\n\n    // mb = -b\n    // returns roots * EPS\n    function main(uint128 a, uint128 mb, uint128 c) private pure returns(bool, uint128, uint128) {\n        if (mb*mb < 4*a*c) {\n            return (false, 0, 0);\n        }\n        uint128 d = (mb*mb - 4*a*c)*EPS*EPS;\n        uint128 sd = sqrt(d);\n        uint128 x1 = (mb*EPS + sd) / 2 / a;\n        uint128 x2 = (mb*EPS - sd) / 2 / a;\n        return (true, x1, x2);\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/hash.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant ARRAY_SIZE = 40;\n    uint128 constant P = 257;\n    uint128 constant MODULO = 1000000007;\n\n    function complex() public pure returns(uint64) {\n        uint8[ARRAY_SIZE] memory array;\n        // generate array where first half equals second\n        for(uint8 i = 0; i < ARRAY_SIZE; i++) {\n            array[i] = (i % (ARRAY_SIZE / 2)) * (255 / (ARRAY_SIZE / 2 - 1));\n        }\n\n        bool result = true;\n        for(uint8 i = 0; i < ARRAY_SIZE/2; i++) {\n            result = result && hash(array, 0, i + 1) == hash(array, ARRAY_SIZE/2, ARRAY_SIZE/2 + i + 1)\n            &&  hash(array, i, ARRAY_SIZE/2) == hash(array, i + ARRAY_SIZE/2, ARRAY_SIZE);\n        }\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function hash(uint8[ARRAY_SIZE] memory array, uint8 begin, uint8 end) private pure returns(uint128) {\n        uint128 h = 0;\n        for(uint8 i = begin; i < end; i++) {\n            h = (h * P + array[i]) % MODULO;\n        }\n        return h;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/matrix.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"235\", \"1008\", \"0\", \"0\", \"0\",\n//!         \"86\", \"4670\", \"0\", \"0\", \"0\",\n//!         \"0\", \"0\", \"0\", \"0\", \"0\",\n//!         \"0\", \"0\", \"0\", \"0\", \"0\",\n//!         \"0\", \"0\", \"0\", \"0\", \"0\",\n//!         \"2\", \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"fibo\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fibo\",\n//!             \"calldata\": [\n//!                 \"87\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"679891637638612258\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    uint16 constant MAX_SIZE = 5;\n\n    struct Matrix {\n        uint128[MAX_SIZE][MAX_SIZE] a;\n        uint16 n;\n        uint16 m;\n    }\n\n    function mul(Matrix memory self, Matrix memory other) private pure returns(Matrix memory) {\n        Matrix memory result;\n        result.n = self.n;\n        result.m = other.m;\n        for(uint16 i = 0; i < self.n; i++) {\n            for(uint16 j = 0; j < other.m; j++) {\n                for(uint16 k = 0; k < self.m; k++) {\n                    result.a[i][j] += self.a[i][k] * other.a[k][j];\n                }\n            }\n        }\n        return result;\n    }\n\n    function add(Matrix memory self, Matrix memory other) private pure returns(Matrix memory) {\n        for(uint16 i = 0; i < self.n; i++) {\n            for(uint16 j = 0; j < self.m; j++) {\n                self.a[i][j] += other.a[i][j];\n            }\n        }\n        return self;\n    }\n\n    function scalar(Matrix memory self, uint128 n) private pure returns(Matrix memory) {\n        for(uint16 i = 0; i < self.n; i++) {\n            for(uint16 j = 0; j < self.m; j++) {\n                self.a[i][j] *= n;\n            }\n        }\n        return self;\n    }\n\n    function pow(Matrix memory self, uint64 n) private pure returns(Matrix memory) {\n        Matrix memory result;\n        result.n = self.n;\n        result.m = self.m;\n        for(uint16 i = 0; i < self.n; i++) {\n            result.a[i][i] = 1;\n        }\n        while (n != 0) {\n            if (n & 1 != 0) {\n                result = mul(result, self);\n            }\n            self = mul(self, self);\n            n >>= 1;\n        }\n        return result;\n    }\n\n    function test() public pure returns(Matrix memory) {\n        Matrix memory a;\n        a.n = 2;\n        a.m = 3;\n        a.a[0][0] = 5;\n        a.a[0][1] = 2;\n        a.a[0][2] = 1;\n\n        a.a[1][0] = 4;\n        a.a[1][1] = 2;\n        a.a[1][2] = 9;\n\n        a = scalar(a, 2);\n\n        Matrix memory b;\n        b.n = 3;\n        b.m = 2;\n        b.a[0][0] = 1;\n        b.a[0][1] = 52;\n\n        b.a[1][0] = 1;\n        b.a[1][1] = 2;\n\n        b.a[2][0] = 4;\n        b.a[2][1] = 234;\n\n        a = mul(a, b);\n\n        Matrix memory c;\n        c.n = 2;\n        c.m = 2;\n        c.a[0][0] = 213;\n        c.a[0][1] = 12;\n\n        c.a[1][0] = 2;\n        c.a[1][1] = 34;\n\n        a = add(a, c);\n        return a;\n    }\n\n    function fibo(uint64 n) public pure returns(uint64) {\n        Matrix memory matrix;\n        matrix.n = 2;\n        matrix.m = 2;\n        matrix.a[0][1] = 1;\n        matrix.a[1][0] = 1;\n        matrix.a[1][1] = 1;\n        matrix = pow(matrix, n - 2);\n        return uint64(matrix.a[0][1] + matrix.a[1][1]);\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/person_balances.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"bitcoin\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"bitcoin\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ethereum\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"ethereum\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"litecoin\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"litecoin\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! }, {\n//!     \"name\": \"zcash\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"zcash\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"100\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    enum Month {\n        January,\n        February,\n        March,\n        April,\n        May,\n        June,\n        July,\n        August,\n        September,\n        October,\n        November,\n        December\n    }\n\n    struct Date {\n        uint16 year;\n        Month month;\n        uint8 day;\n    }\n\n    enum TokenId {\n        Bitcoin,\n        Ethereum,\n        Litecoin,\n        Zcash\n    }\n\n    uint8 constant TOKENS_COUNT = 4;\n\n    struct Balance {\n        TokenId tokenId;\n        uint256 balance;\n    }\n\n    struct Person {\n        uint256 id;\n        Date dateOfBirth;\n        Balance[TOKENS_COUNT] balances;\n    }\n\n    struct Result {\n        uint256 id;\n        uint256 sum;\n        Date dateOfBirth;\n    }\n\n    function bitcoin() public pure returns(uint64) {\n        return uint64(main(TokenId.Bitcoin).sum);\n    }\n\n    function ethereum() public pure returns(uint64) {\n        return uint64(main(TokenId.Ethereum).sum);\n    }\n\n    function litecoin() public pure returns(uint64) {\n        return uint64(main(TokenId.Litecoin).sum);\n    }\n\n    function zcash() public pure returns(uint64) {\n        return uint64(main(TokenId.Zcash).sum);\n    }\n\n    function main(TokenId tokenId) private pure returns(Result memory) {\n        Person memory person = Person({\n            id: 42,\n            dateOfBirth: Date({\n                year: 1994,\n                month: Month.March,\n                day: 16\n            }),\n            balances: [\n                Balance(TokenId.Bitcoin, 1),\n                Balance(TokenId.Ethereum, 10),\n                Balance(TokenId.Litecoin, 50),\n                Balance(TokenId.Zcash, 100)\n            ]\n        });\n\n        Result memory result = Result(person.id, 0, person.dateOfBirth);\n\n        for(uint8 id = 0; id < TOKENS_COUNT; id++) {\n            if (person.balances[id].tokenId == tokenId) {\n                result.sum += person.balances[id].balance;\n            }\n        }\n        return result;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/sort/bubble.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"none\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ascending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"descending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    uint8 constant ARRAY_SIZE = 10;\n\n    enum Direction {\n        None,\n        Ascending,\n        Descending\n    }\n\n    function main(uint8[ARRAY_SIZE] memory array, Direction direction) public pure returns(uint8[ARRAY_SIZE] memory) {\n        bool swapped = true;\n        for(uint8 i = 0; i < ARRAY_SIZE - 1; i++) {\n            swapped = false;\n            for(uint8 j = 0; j < ARRAY_SIZE - i - 1; j++) {\n                if ((direction == Direction.Ascending && array[j] > array[j + 1]) ||\n                    (direction == Direction.Descending && array[j] < array[j + 1])) {\n                    uint8 temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n            if (!swapped) {\n                break;\n            }\n        }\n        return array;\n    }\n\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/sort/merge_iterative.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"none\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"mergeSort\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ascending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"mergeSort\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"descending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"mergeSort\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    uint8 constant ARRAY_SIZE = 10;\n\n    enum Direction {\n        None,\n        Ascending,\n        Descending\n    }\n\n    // Iterative merge sort\n    // with memory usage (O(n)) and complexity O(n*log(n))\n    function mergeSort(uint8[ARRAY_SIZE] memory array, Direction direction) public pure returns(uint8[ARRAY_SIZE] memory) {\n        uint8 size = 1;\n        uint8[ARRAY_SIZE] memory tmp;\n\n        while (size < ARRAY_SIZE) {\n            uint8 ptr = 0;\n            while (ptr < ARRAY_SIZE) {\n                uint8 mid = ptr + size;\n                if (mid > ARRAY_SIZE) {\n                    mid = ARRAY_SIZE;\n                }\n\n                uint8 last = ptr + 2 * size;\n                if (last > ARRAY_SIZE) {\n                    last = ARRAY_SIZE;\n                }\n\n                uint8 ptr1 = ptr;\n                uint8 ptr2 = ptr + size;\n\n                while (ptr1 < mid && ptr2 < last) {\n                    if (\n                        (direction == Direction.None) ||\n                        (direction == Direction.Ascending && array[ptr1] < array[ptr2]) ||\n                        (direction == Direction.Descending && array[ptr1] > array[ptr2])\n                    ) {\n                        tmp[ptr] = array[ptr1++];\n                    } else {\n                        tmp[ptr] = array[ptr2++];\n                    }\n                    ptr++;\n                }\n\n                while (ptr1 < mid) {\n                    tmp[ptr++] = array[ptr1++];\n                }\n\n                while (ptr2 < last) {\n                    tmp[ptr++] = array[ptr2++];\n                }\n            }\n            for(uint8 i = 0; i < ARRAY_SIZE; i++)\n                array[i] = tmp[i];\n            size *= 2;\n        }\n        return array;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/sort/merge_recursive.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"none\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"mergeSort\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\", \"10\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ascending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"mergeSort\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\", \"10\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"descending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"mergeSort\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\", \"10\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    uint8 constant ARRAY_SIZE = 10;\n\n    enum Direction {\n        None,\n        Ascending,\n        Descending\n    }\n\n    function merge(\n        uint8[ARRAY_SIZE] memory array,\n        uint8 begin,\n        uint8 end,\n        uint8 mid,\n        Direction direction\n    )\n        private pure\n    {\n        uint8[ARRAY_SIZE] memory tmp;\n        for(uint8 i = begin; i < end; i++) {\n            tmp[i] = array[i];\n        }\n\n        uint8 ptr = begin;\n        uint8 ptr1 = begin;\n        uint8 ptr2 = mid;\n\n        while (ptr1 < mid && ptr2 < end) {\n            if(\n                (direction == Direction.None) ||\n                (direction == Direction.Ascending && tmp[ptr1] < tmp[ptr2]) ||\n                (direction == Direction.Descending && tmp[ptr1] > tmp[ptr2])\n            ) {\n                array[ptr] = tmp[ptr1++];\n            } else {\n                array[ptr] = tmp[ptr2++];\n            }\n            ptr++;\n        }\n\n        while (ptr1 < mid) {\n            array[ptr++] = tmp[ptr1++];\n        }\n\n        while (ptr2 < end) {\n            array[ptr++] = tmp[ptr2++];\n        }\n    }\n\n    function mergeSort(\n        uint8[ARRAY_SIZE] memory array,\n        uint8 begin,\n        uint8 end,\n        Direction direction\n    )\n        public\n        pure\n        returns(uint8[ARRAY_SIZE] memory)\n    {\n        if (begin + 1 == end) {\n            return array;\n        }\n\n        uint8 mid = (begin + end) / 2;\n        mergeSort(array, begin, mid, direction);\n        mergeSort(array, mid, end, direction);\n        merge(array, begin, end, mid, direction);\n        return array;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/sort/quick.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\r\n//!     \"name\": \"ascending\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"quickSort\",\r\n//!             \"calldata\": [\r\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\", \"10\", \"0\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"descending\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"quickSort\",\r\n//!             \"calldata\": [\r\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\", \"10\", \"1\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.19;\r\n\r\ncontract Test {\r\n    uint8 constant ARRAY_SIZE = 10;\r\n\r\n    enum Direction {\r\n        Ascending,\r\n        Descending\r\n    }\r\n\r\n    function quickSort(\r\n        uint8[ARRAY_SIZE] memory array,\r\n        uint8 begin,\r\n        uint8 end,\r\n        Direction direction\r\n    )\r\n        public\r\n        pure\r\n        returns(uint8[ARRAY_SIZE] memory)\r\n    {\r\n        if (end - begin < 2) {\r\n            return array;\r\n        }\r\n\r\n        uint8 pivot = array[end - 1];\r\n        uint8 i = begin;\r\n\r\n        for(uint8 j = begin; j < end - 1; j++) {\r\n            if (\r\n                (direction == Direction.Ascending && array[j] < pivot) ||\r\n                (direction == Direction.Descending && array[j] > pivot)\r\n            ) {\r\n                uint8 temp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = temp;\r\n                i++;\r\n            }\r\n        }\r\n        array[end - 1] = array[i];\r\n        array[i] = pivot;\r\n\r\n        quickSort(array, begin, i, direction);\r\n        quickSort(array, i + 1, end, direction);\r\n        return array;\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/split.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!       \"0\",\n//!       \"0\",\n//!       \"0\",\n//!       \"3\",\n//!       \"0\",\n//!       \"0\",\n//!       \"2\",\n//!       \"0\",\n//!       \"1\"\n//!     ]\n//! } ] }\n\n// Report https://linear.app/matterlabs/issue/CPR-586/treap-minimization-failure-for-m1-m3\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Node {\n        uint256 key;\n        uint256 l;\n        uint256 r;\n    }\n\n    function f() public pure returns(Node[3] memory) {\n        Node[3] memory nodes;\n        nodes[1] = Node(3, 0, 0);\n        nodes[2] = Node(2, 0, 1);\n\n        split(2, nodes);\n\n        return nodes;\n    }\n\n    function split(uint256 p, Node[3] memory nodes) private pure returns(uint256, uint256) {\n        if (p == 0) {\n            return (0, 0);\n        }\n        if (nodes[0].key < 1) {\n            (uint256 p1, uint256 p2) = split(nodes[p].r, nodes);\n            nodes[p].r = p1;\n            return (p, 0);\n        } else { // Should be unreachable(nodes[0].key == 0 always), but if remove this branch - test will work.\n            (uint256 p1, uint256 p2) = split(nodes[p].l, nodes);\n            nodes[p].l = p2;\n            return (0, 0);\n        }\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/algorithm/sum_oddness.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5050\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1275\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function first() public pure returns(uint256) {\n        return main(100, false) + main(100, true);\n    }\n\n    function second() public pure returns(uint256) {\n        return main(50, true) + main(50, false);\n    }\n\n    function main(uint256 a, bool is_odd) private pure returns(uint256) {\n        uint256 result = 0;\n        for (uint256 i = 1; i <= a; ++i) {\n            if (is_odd) {\n                if (i % 2 != 0)\n                    result += i;\n            } else {\n                if (i % 2 == 0)\n                    result += i;\n            }\n        }\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/algorithm/tree/treap_reduced.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"one\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"1\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.4;\r\n\r\ncontract Test {\r\n    // Limit for nodes in memory and array size\r\n    uint8 constant DIM = 12;\r\n    error Dbg2(uint8, uint8);\r\n    error Dbg3(uint8, uint8, uint8);\r\n\r\n    // Node of tree\r\n    struct Node {\r\n        uint8 key;\r\n        uint8 prior;\r\n        uint8 l;\r\n        uint8 r;\r\n    }\r\n\r\n    // Struct for imitation heap, pointers\r\n    struct Memory {\r\n        Node[DIM] nodes;\r\n        uint8 cnt;\r\n    }\r\n\r\n    function one() public pure returns(uint64) {\r\n        uint8[DIM] memory array;\r\n        uint8 sz = 5;\r\n        for(uint8 i = 0; i < sz; i++) {\r\n            array[i] = sz - i;\r\n        }\r\n        // 5 4 3 2 1\r\n        Memory memory _memory = newMemory();\r\n\r\n        uint8 root = fromArray(array, sz, _memory);\r\n        // 1 2 3 4 5\r\n        root = add(root, 7, _memory);\r\n        return 1;\r\n    }\r\n\r\n    function newMemory() private pure returns(Memory memory) {\r\n        Memory memory _memory;\r\n        // starting from 1, as 0 like null ptr\r\n        _memory.cnt = 1;\r\n        return _memory;\r\n    }\r\n\r\n    function newNode(Memory memory _memory, Node memory node) private pure returns(uint8) {\r\n        _memory.nodes[_memory.cnt++] = node;\r\n        return _memory.cnt - 1;\r\n    }\r\n\r\n    function split(uint8 p, uint8 val, uint8 x) private pure returns(uint8, uint8) {\r\n        return (0, 0);\r\n\r\n        (uint8 p1, uint8 p2) = split(p, val, x);\r\n        return (p1, p2);\r\n    }\r\n\r\n    // add new node to treap if value not in treap already\r\n    function add(uint8 root, uint8 key, Memory memory _memory) private pure returns(uint8) {\r\n        (uint8 p1, uint8 p2) = split(root, key, root);\r\n        return _memory.nodes[p1].prior;\r\n    }\r\n\r\n    function fromArray(uint8[DIM] memory array, uint8 size, Memory memory _memory) private pure returns(uint8) {\r\n        uint8 root = 0;\r\n        for(uint8 i = 0; i < size; i++) {\r\n            root = add(root, array[i], _memory);\r\n        }\r\n        return root;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/algorithm/tree/treap.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"two\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// solc < 0.5.0 complains \"Error: Identifier already declared. uint8 p = ...\"\npragma solidity >=0.5.0;\n\ncontract Test {\n    // Limit for nodes in memory and array size\n    uint8 constant DIM = 12;\n\n    // Node of tree\n    struct Node {\n        uint8 key;\n        uint8 prior;\n        uint8 l;\n        uint8 r;\n    }\n\n    // Struct for imitation heap, pointers\n    struct Memory {\n        Node[DIM] nodes;\n        uint8 cnt;\n    }\n\n    function one() public pure returns(uint64) {\n        uint8[DIM] memory array;\n        uint8 sz = 5;\n        for(uint8 i = 0; i < sz; i++) {\n            array[i] = sz - i;\n        }\n        // 5 4 3 2 1\n        Memory memory _memory = newMemory();\n\n        uint8 root = fromArray(array, sz, _memory);\n        // 1 2 3 4 5\n        root = add(root, 7, _memory);\n        // 1 2 3 4 5 7\n        root = erase(root, 3, _memory);\n        // 1 2 4 5 7\n        root = add(root, 0, _memory);\n        //0 1 2 4 5 7\n        uint8 resSz = toArray(root, _memory, array);\n        bool result = resSz == 6 &&\n            array[0] == 0 &&\n            array[1] == 1 &&\n            array[2] == 2 &&\n            array[3] == 4 &&\n            array[4] == 5 &&\n            array[5] == 7;\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function two() public pure returns(uint64) {\n        Memory memory _memory = newMemory();\n        uint8 root = 0;\n\n        uint8 i = 10;\n        while(i > 0) {\n            root = add(root, i, _memory);\n            i -= 2;\n        }\n        // 2 4 6 8 10\n\n        i = 1;\n        while (i <= 9) {\n            root = add(root, i, _memory);\n            i += 2;\n        }\n        // 1 - 10\n\n        i = 3;\n        while (i <= 9) {\n            root = erase(root, i, _memory);\n            i += 3;\n        }\n        // 1 2 4 5 7 8 10\n\n        i = 4;\n        while (i <= 8) {\n            root = erase(root, i, _memory);\n            i += 4;\n        }\n        // 1 2 5 7 10\n\n        root = add(root, 6, _memory);\n        // 1 2 5 6 7 10\n\n        uint8[DIM] memory array;\n        uint8 sz = toArray(root, _memory, array);\n\n        bool result = sz == 6 &&\n            array[0] == 1 &&\n            array[1] == 2 &&\n            array[2] == 5 &&\n            array[3] == 6 &&\n            array[4] == 7 &&\n            array[5] == 10;\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function newMemory() private pure returns(Memory memory) {\n        Memory memory _memory;\n        // starting from 1, as 0 like null ptr\n        _memory.cnt = 1;\n        return _memory;\n    }\n\n    function newNode(Memory memory _memory, Node memory node) private pure returns(uint8) {\n        _memory.nodes[_memory.cnt++] = node;\n        return _memory.cnt - 1;\n    }\n\n    // merge and split for treap\n    function merge(uint8 p1, uint8 p2, Memory memory _memory) private pure returns(uint8) {\n        if (p1 == 0) {\n            return p2;\n        }\n        if( p2 == 0) {\n            return p1;\n        }\n        if(_memory.nodes[p1].prior > _memory.nodes[p2].prior) {\n            uint8 p = merge(_memory.nodes[p1].r, p2, _memory);\n            _memory.nodes[p1].r = p;\n            return p1;\n        } else {\n            uint8 p = merge(p1, _memory.nodes[p2].l, _memory);\n            _memory.nodes[p2].l = p;\n            return p2;\n        }\n    }\n\n    function split(uint8 p, uint8 val, Memory memory _memory) private pure returns(uint8, uint8) {\n        if (p == 0) {\n            return (0, 0);\n        }\n        if (_memory.nodes[p].key < val) {\n            (uint8 p1, uint8 p2) = split(_memory.nodes[p].r, val, _memory);\n            _memory.nodes[p].r = p1;\n            return (p, p2);\n        } else {\n            (uint8 p1, uint8 p2) = split(_memory.nodes[p].l, val, _memory);\n            _memory.nodes[p].l = p2;\n            return (p1, p);\n        }\n    }\n\n    // add new node to treap if value not in treap already\n    function add(uint8 root, uint8 key, Memory memory _memory) private pure returns(uint8) {\n        (uint8 p1, uint8 p2) = split(root, key, _memory);\n        // if key already in tree - ignore\n        (uint8 tmp1, uint8 tmp2) = split(p2, key + 1, _memory);\n        p2 = merge(tmp1, tmp2, _memory);\n        if (tmp1 != 0) {\n            return merge(p1, p2, _memory);\n        }\n\n        uint8 _new = newNode(_memory, Node(\n            key,\n            // instead random\n            _memory.cnt * key,\n            0,\n            0\n        ));\n\n        return merge(merge(p1, _new, _memory), p2, _memory);\n    }\n\n    // remove key from treap, if it containing\n    function erase(uint8 root, uint8 key, Memory memory _memory) private pure returns(uint8) {\n        (uint8 p1, uint8 p2) = split(root, key, _memory);\n        (uint8 p21, uint8 p22) = split(p2, key + 1, _memory);\n        return merge(p1, p22, _memory);\n    }\n\n    function fromArray(uint8[DIM] memory array, uint8 size, Memory memory _memory) private pure returns(uint8) {\n        uint8 root = 0;\n        for(uint8 i = 0; i < size; i++) {\n            root = add(root, array[i], _memory);\n        }\n        return root;\n    }\n\n    // works so long, as with every call creates temporary array DIM size\n    function toArray(uint8 root, Memory memory _memory, uint8[DIM] memory array) private pure returns(uint8) {\n        if (root == 0) {\n            return 0;\n        }\n        uint8 lSize = toArray(_memory.nodes[root].l, _memory, array);\n        uint8[DIM] memory tmp;\n        uint8 rSize = toArray(_memory.nodes[root].r, _memory, tmp);\n        uint8 sz = lSize;\n        array[sz++] = _memory.nodes[root].key;\n        for(uint8 i = 0; i < rSize; i++) {\n            array[sz++] = tmp[i];\n        }\n        return sz;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/delete_element.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"third\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"four\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"four\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"five\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"five\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"six\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"six\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"seven\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"seven\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"eight\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"eight\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"nine\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nine\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ten\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"ten\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"eleven\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"eleven\",\n//!             \"calldata\": [\n//!                 \"0x20\", \"0x03\", \"1\", \"2\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"twelve\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"twelve\",\n//!             \"calldata\": [\n//!                 \"0x20\", \"0x03\", \"1\", \"2\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256[2][] arr;\n\n    function first() public returns (uint256) {\n        uint256[] memory x = new uint256[](42);\n        delete x;\n        assert(x.length == 0);\n        return 0;\n    }\n\n    function second() public returns (uint256) {\n        uint256[][] memory x = new uint256[][](42);\n        delete x;\n        assert(x.length == 0);\n        return 0;\n    }\n\n    function third() public returns (uint256) {\n        uint256[][] memory x = new uint256[][](42);\n        delete x;\n        delete x;\n        assert(x.length == 0);\n        return 0;\n    }\n\n    function four() public returns (uint256) {\n        uint256[][] memory x = new uint256[][](42);\n        x[1] = new uint256[](7);\n        delete x[0];\n        assert(x[1].length == 7);\n        return 0;\n    }\n\n    function five() public returns (uint256) {\n        uint256[5] memory x;\n        delete x;\n        assert(x.length == 5);\n        return 0;\n    }\n\n    function six() public returns (uint256) {\n        uint256[5] memory x;\n        x[0] = 99;\n        delete x;\n        assert(x[0] == 0);\n        return 0;\n    }\n\n    function seven() public returns (uint256) {\n        arr.push([11, 22]);\n        delete arr[0];\n        assert(arr[0].length == 2);\n        return 0;\n    }\n\n    function eight() public returns (uint256) {\n        uint256[2][] memory x = new uint256[2][](3);\n        x[0] = [uint(99), 11];\n        delete x;\n        assert(x.length == 0);\n        return 0;\n    }\n\n    function nine() public returns (uint256) {\n        uint256[2][] memory x = new uint256[2][](3);\n        x[0] = [uint(99), 11];\n        delete x[0];\n        assert(x[2].length == 2);\n        return 0;\n    }\n\n    function ten() public returns (uint256) {\n        uint256[5][] memory x = new uint256[5][](0);\n        delete x;\n        assert(x.length == 0);\n        return 0;\n    }\n\n    function eleven(uint256[] memory array) public returns (uint256) {\n        delete array;\n        assert(array.length == 0);\n        return 0;\n    }\n\n    function twelve(uint256[3] memory array) public returns (uint256) {\n        delete array;\n        assert(array.length == 3);\n        return 0;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/double_dynamic.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-215/solidity-dynamic-array-length-bug\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function f() public returns (uint256) {\n        uint256[][] memory x = new uint256[][](42);\n        assert(x[0].length == 0);\n        return 0;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/mutating_assignment.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"10\", \"20\", \"30\", \"40\", \"50\", \"6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"218\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIZE = 5;\n\n    function main(uint8[SIZE] memory array, uint8 witness) public pure returns(uint8) {\n        array[0] += witness;\n        array[1] -= witness;\n        array[2] *= witness;\n        array[3] /= witness;\n        array[4] %= witness;\n\n        return array[0] + array[1] + array[2] + array[3] + array[4];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/mutating_nested_one_element.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-204/2-dimensional-array-bug\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function test() public pure returns(uint64) {\n        uint64[1][1] memory a;\n        a[0][0];\n        return 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/array/mutating_storage_in_constructor.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// Report https://linear.app/matterlabs/issue/CPR-285/bug-with-dynamic-arrays\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0;\n\ncontract Test {\n    uint[] public a; // with static array works\n\n    constructor() { // if replace this with function(not constructor) - it works\n        a.push(1);\n    }\n\n    function get() public view returns(uint) {\n        return a[0];\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/array/priority1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\",\n//!         \"2\",\n//!         \"3\"\n//!     ]\n//! } ] }\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256[3] public arr;\n    uint256 public a;\n\n    function f() public returns (uint256[3] memory) {\n        arr = [a, f1(), 3];\n        return arr;\n    }\n\n    function f1() public returns (uint256) {\n        a = 5;\n        return 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/priority2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\",\n//!         \"2\",\n//!         \"3\"\n//!     ]\n//! } ] }\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256[3] public arr;\n\n    function f() public returns (uint256[3] memory) {\n        arr = [1, f1(), 3];\n        return arr;\n    }\n\n    function f1() public returns (uint256) {\n        arr = [4, 5, 6];\n        return 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/priority3.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x20\",\n//!         \"0x03\",\n//!         \"1\",\n//!         \"2\",\n//!         \"3\"\n//!     ]\n//! } ] }\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256[] public arr;\n\n    function f() public returns (uint256[] memory) {\n        arr = [1, f1(), 3];\n        return arr;\n    }\n\n    function f1() public returns (uint256) {\n        arr = [4, 5, 6, 7, 8];\n        return 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/priority4.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\",\n//!         \"2\",\n//!         \"3\"\n//!     ]\n//! } ] }\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint8 public a;\n\n    function f() public returns (uint8[3] memory) {\n        uint8[3] memory arr = [a, f1(), 3];\n        return arr;\n    }\n\n    function f1() public returns (uint8) {\n        a = 5;\n        return 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/priority5.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\",\n//!         \"2\",\n//!         \"5\"\n//!     ]\n//! } ] }\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256[3] public arr;\n\n    function f() public returns (uint256[3] memory) {\n        arr = [1, f1(), arr[1]];\n        return arr;\n    }\n\n    function f1() public returns (uint256) {\n        arr = [4, 5];\n        return 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/size_constant_expression.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIZE_HALVED = 2;\n\n    function main(uint8 value) public pure returns(uint8) {\n        uint8[SIZE_HALVED * 2] memory array;\n        for(uint8 i = 0; i < SIZE_HALVED * 2; i++) {\n            array[i] = 2;\n        }\n        for(uint8 i = 0; i < SIZE_HALVED * 2; i++) {\n            value += array[i];\n        }\n        return value;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/store_load_constant_array_witness_index.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"element1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"element2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"element3\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"element4\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIZE = 4;\n\n    function main(uint8 index) public pure returns(uint8) {\n        uint8[SIZE] memory array = [1, 2, 3, 4];\n        return array[index];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/store_load_nested_constant_array_witness_index.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"element1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"element2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"element3\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"element4\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! }, {\n//!     \"name\": \"element5\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"element6\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"element7\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"element8\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! }, {\n//!     \"name\": \"element9\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"9\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIDE_SIZE = 3;\n\n    function main(uint8 i, uint8 j) public pure returns(uint8) {\n        uint8[SIDE_SIZE][SIDE_SIZE] memory array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n        return array[i][j];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/store_load_nested_witness_array_constant_index.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"5\", \"6\", \"7\", \"8\",\n//!                 \"9\", \"10\", \"11\", \"12\",\n//!                 \"13\", \"14\", \"15\", \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIDE_SIZE = 4;\n\n    function main(uint8[SIDE_SIZE][SIDE_SIZE] memory array) public pure returns(uint8) {\n        array[3][1] = 106;\n        array[1][3] = 42;\n\n        return array[3][1] - array[1][3];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/store_load_nested_witness_array_witness_index.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"element1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"element2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"element3\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"0\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"element4\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! }, {\n//!     \"name\": \"element5\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"element6\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"1\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"element7\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"2\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"element8\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"2\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! }, {\n//!     \"name\": \"element9\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\",\n//!                 \"4\", \"5\", \"6\",\n//!                 \"7\", \"8\", \"9\",\n//!                 \"2\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"9\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIDE_SIZE = 3;\n\n    function main(uint8[SIDE_SIZE][SIDE_SIZE] memory array, uint8 i, uint8 j) public pure returns(uint8) {\n        return array[i][j];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/store_load_witness_array_constant_index.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIZE = 4;\n\n    function main(uint8[SIZE] memory array) public pure returns(uint8) {\n        array[3] = 106;\n        array[1] = 42;\n\n        return array[3] - array[1];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/array/store_load_witness_array_witness_index.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"element1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"element2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"element3\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"element4\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint8 constant SIZE = 4;\n\n    function main(uint8[SIZE] memory array, uint8 index) public pure returns(uint8) {\n        return array[index];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/block/expression.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"12\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        return 1 + (2 + 2 * witness) + 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/block/mutating.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"50\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"75\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 inner = 25;\n        {\n            inner += witness;\n        }\n        return inner;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/block/pyramid.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"16\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        return\n        1 + (\n            2 + (\n                3 + (\n                    witness\n                ) + 3\n            ) + 2\n        ) + 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/call_with_dirty_address.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract Test {\n    function test() external {\n        bool s;\n        bytes32 addr = bytes32(uint256(uint160(address(this))) + 2**255);\n        bytes32 data;\n        assembly {\n            s := call(gas(), addr, 0, 0, 0, 0 ,32)\n            data := mload(0)\n        }\n        require(s);\n        require(data == 0xc569da386df5ba251005c3721bdc1193e6297b5f8fa3a6d32597a6fe93df5397);\n    }\n\n    fallback() external {\n        assembly {\n            mstore(0, 0xc569da386df5ba251005c3721bdc1193e6297b5f8fa3a6d32597a6fe93df5397)\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/conditional/mutating_complex.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"conditionTrue\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1000256\"\n//!     ]\n//! }, {\n//!     \"name\": \"conditionFalse\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Data {\n        bool a;\n        uint8 b;\n        uint256 c;\n    }\n\n    function main(Data memory witness, bool condition) public pure returns(uint64) {\n        if (condition) {\n            witness = Data(\n                true,\n                255,\n                1000000\n            );\n        }\n\n        if (witness.a) {\n            return 1 + uint64(witness.b) + uint64(witness.c);\n        } else {\n            return 0 + uint64(witness.b) + uint64(witness.c);\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/conditional/mutating_simple.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"conditionTrue\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"conditionFalse\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool condition) public pure returns(uint8) {\n        uint8 result = 5;\n\n        if (condition) {\n            result += 5;\n        }\n\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/conditional/nested_condition.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"25\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 tmp;\n        if (witness == 1) {\n            tmp = 2;\n        } else {\n            tmp = 3;\n        }\n        if (tmp == 2) {\n            return 25;\n        } else {\n            return 42;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/conditional/nested_gates_mutating.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"25\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! }, {\n//!     \"name\": \"three\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"75\"\n//!     ]\n//! }, {\n//!     \"name\": \"four\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"100\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool[3] memory gates, uint8 mutated) public pure returns(uint8) {\n        if (gates[0]) {\n            mutated *= 5;\n        } else if (gates[1]) {\n            if (gates[2]) {\n                mutated *= 10;\n            } else {\n                mutated *= 15;\n            }\n        } else {\n            mutated *= 20;\n        }\n        return mutated;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/conditional/nested_gates.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"three\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"four\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool[3] memory gates) public pure returns(uint8) {\n       if (gates[0]) {\n           return 1;\n       } else if (gates[1]) {\n           if (gates[2]) {\n               return 2;\n           } else {\n               return 3;\n           }\n       } else {\n           return 4;\n       }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/conditional/require.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"condition_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"without_message\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"condition_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"without_message\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"condition_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_empty_message\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<=0.7.5\",\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.7.6\",\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"condition_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_empty_message\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"condition_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_message\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x000000054572726F720000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"condition_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_message\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    function without_message(bool condition) public pure returns(uint8) {\n        uint8 result = 5;\n\n        if (condition) {\n            require(result != 5);\n        }\n\n        return result;\n    }\n\n    function with_empty_message(bool condition) public pure returns(uint8) {\n        uint8 result = 5;\n\n        if (condition) {\n            require(result != 5, \"\");\n        }\n\n        return result;\n    }\n\n    function with_message(bool condition) public pure returns(uint8) {\n        uint8 result = 5;\n\n        if (condition) {\n            require(result != 5, \"Error\");\n        }\n\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/arithmetic.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"3\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\",\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"exp\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"exp\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function test(uint8 a, uint8 b, uint8 c) public pure returns (uint8, uint8) {\n        return (\n            ((-0 + 1 / 10)*25 - 3/10) * 3 + 2/5,\n            ((-0 + a / 10)*25 - b/10) * 3 + c/5\n        );\n    }\n\n    function exp() public pure returns (uint256) {\n        return (7/13)**300*26**300/2**299/7**300;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/big_numbers.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFBBA12323423423BCA23FF5E32823232333223B2323D323232323DD232332AC\"\n//!     ]\n//! }, {\n//!     \"name\": \"xor\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"xor\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5f8996a11b7aac003e9a1dcdc0a011d11ab0a0a3110c1900aa0b1beffdabb623\"\n//!     ]\n//! }, {\n//!     \"name\": \"shift\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"shift\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F\"\n//!     ]\n//! }, {\n//!     \"name\": \"huge_exp\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"huge_exp\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"huge_test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"huge_test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function test() public pure returns (uint) {\n        // 0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F*0xFFBBA12323423423BCA23FF5E32823232333223B2323D323232323DD232332AC/0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F\n        return 8381400618709188148757640462176193985958839746154490275942237360227792208918225008338619227206618541545308335701752440398450930379835246607203063881661972\n            / 0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F;\n    }\n\n    function xor() public pure returns (uint256) {\n        return 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA03237823838982382382238238832F239838298322FCA2389283832DE88848F ^ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBA12323423423BCA23FF5E32823232333223B2323D323232323DD232332AC;\n    }\n\n    function shift() public pure returns (uint256) {\n        return 0xA03237823838982382382238238832F239838298322FCA2389283832DE88848FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> 144;\n    }\n\n    function huge_exp() public pure returns (uint256) {\n        return 2**1000/2**999;\n    }\n\n    function huge_test() public pure returns(uint) {\n        // 0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F^10000 / 0xA03237823838982382382238238832F239838298322FCA2389283832DE88848F^9999\n        returnn        /\nn    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/bitwise.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x10000000000000000000000001\"\n//!     ]\n//! }, {\n//!     \"name\": \"shifts\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"shifts\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x722000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function test() public pure returns (uint128) {\n        return ~0&1<<100|257^256;\n    }\n\n    function shifts() public pure returns (uint256) {\n        return 0x722DDB>>12<<1000>>988;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/bool.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"test2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test2\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function test() public pure returns (bool) {\n        return !false || true && false;\n    }\n\n    function test2() public pure returns (bool) {\n        return !false == true != true;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/comparison.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"equals\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"less_or_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"less_or_equals\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"greater_or_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"greater_or_equals\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"not_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"not_equals\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\",\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function equals() public pure returns (bool) {\n        return -0 == 0;\n    }\n\n    function less_or_equals() public pure returns (bool) {\n        return 2*100 <= 2/3*3;\n    }\n\n    function greater_or_equals() public pure returns (bool) {\n        return 2**256-1 >= 2**256-1;\n    }\n\n    function greater_or_less() public pure returns (bool) {\n        return 100 > 100 || 100 < 100;\n    }\n\n    function not_equals(uint256 a) public pure returns (bool, bool) {\n        return (\n            3/2*2 != 3/6*6,\n            a/2*2 != a/6*6\n        );\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/division.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"testCompileVsRuntime\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testCompileVsRuntime\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\",\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function testCompileVsRuntime(uint a) public pure returns (uint, uint) {\n        return (\n            1/2*2,\n            a/2*2\n        );\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/lulz.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"testCompileVsRuntime\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testCompileVsRuntime\",\n//!             \"calldata\": [\n//!                 \"7\",\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"783\",\n//!         \"39\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function testCompileVsRuntime (uint a, uint b) public view returns (uint, uint) {\n          return (\n            ((7 / 11 + 3 / 13) * 22 + 1) * 39,\n            ((a / 11 + b / 13) * 22 + 1) * 39\n          );\n        }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constant_expressions/modulo.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"46\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\",\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"test2\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test2\",\n//!             \"calldata\": [\n//!                 \"17\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\",\n//!         \"9\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function test(uint256 a) public pure returns (uint, uint) {\n        return (\n            46/13%3*13,\n            a/13%3*13\n        );\n    }\n\n    function test2(uint256 a) public pure returns (uint, uint) {\n        return (\n            13%(17/3)*3,\n            13%(a/3)*3\n        );\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/constants/ConstantBytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"long data\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"getLongData\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000000000000000000000000000000000000000000000020\",\n//!         \"0x000000000000000000000000000000000000000000000000000000000000002d\",\n//!         \"0x1122334455667788991122334455667788991122334455667788991122334455\",\n//!         \"0x6677889911223344556677889900000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// solc <=0.4.16 fails with the message \"TypeError: Constants of non-value type\n// not yet implemented.\"\npragma solidity >=0.4.17;\n\ncontract Test {\n    bytes constant longData = hex\"112233445566778899112233445566778899112233445566778899112233445566778899112233445566778899\";\n\n    function getLongData() external pure returns (bytes memory) {\n        return longData;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/context/block_hash.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"$BLOCK_HASH:1\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.22;\r\n\r\ncontract Test {\r\n    function main() public returns(bytes32) {\r\n        bytes32 _blockhash = blockhash(block.number - 1);\r\n        return _blockhash;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/block_number.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"$BLOCK_NUMBER\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.12;\r\n\r\ncontract Test {\r\n    function main() public returns(uint) {\r\n        uint block_number = block.number;\r\n        return block_number;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/block_timestamp.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"$BLOCK_TIMESTAMP\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.12;\r\n\r\ncontract Test {\r\n    function main() public returns(uint) {\r\n        uint block_timestamp = block.timestamp;\r\n        return block_timestamp;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/chain_id_assembly.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"$CHAIN_ID\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.14;\r\n\r\ncontract Test {\r\n    function main() public returns(uint) {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/chain_id.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"$CHAIN_ID\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\ncontract Test {\r\n    function main() public returns(uint) {\r\n        uint chainId = block.chainid;\r\n        return chainId;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/difficulty.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"$DIFFICULTY\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.12;\r\n\r\ncontract Test {\r\n    function main() public returns(uint) {\r\n        uint _difficulty = block.difficulty;\r\n        return _difficulty;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/gas_price.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"3000000000\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.12;\r\n\r\ncontract Test {\r\n    function main() public returns(uint) {\r\n        uint gas_price = tx.gasprice;\r\n        return gas_price;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/context/origin.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0x9292929292929292929292929292929292929292\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.12;\r\n\r\ncontract Test {\r\n    function main() public returns(address) {\r\n        address tx_origin = tx.origin;\r\n        return tx_origin;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/default.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"99\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function first() public pure returns(uint64) {\n        uint64 result = 42;\n        return result;\n    }\n\n    function second() public pure returns(uint256) {\n        uint256 result = 99;\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/destructuring/array_tupple.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f1\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f2\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\",\n//!         \"1\", \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f3\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\", \"4\",\n//!         \"1\", \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"fourth\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f4\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\", \"4\",\n//!         \"1\", \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    uint256[2] public a;\n    uint256[2] public b;\n\n    function f1() public returns (uint256[2] memory) {\n        a = [uint256(1), 2];\n        (a, a[1]) = (a, a[0]);\n\n        return a;\n    }\n\n    function f2() public returns (uint256[2] memory, uint256[2] memory) {\n        a = [uint256(1), 2];\n        b = [uint256(3), 4];\n        (a, b) = (b, a);\n\n        return (a, b);\n    }\n\n    function f3() public returns (uint256[2] memory, uint256[2] memory) {\n        uint256[2] memory a1 = [uint256(1), 2];\n        uint256[2] memory b1 = [uint256(3), 4];\n        (a1, b1) = (b1, a1);\n\n        return (a1, b1);\n    }\n\n    function f4() public returns (uint256[2] memory, uint256[2] memory) {\n        a = [uint256(1), 2];\n        uint256[2] memory b1 = [uint256(3), 4];\n        (a, b1) = (b1, a);\n\n        return (a, b1);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/destructuring/tuple_priority1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f1\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    uint256 public a1;\n    uint256 public a2;\n    uint256 public a3;\n\n    constructor() public {\n        (a1, a1, a1) = (1, 2, 3);\n    }\n\n    function f1() public returns (uint256) {\n        assert(a1 == 1 && a2 == 0  && a3 == 0);\n        return 0;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/destructuring/tuple_priority2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f1\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\",\n//!         \"0\",\n//!         \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.26;\n\ncontract Test {\n    uint256 public a1;\n    uint256 public a2;\n    uint256 public a3;\n\n    constructor() public {\n        (a1, a2, a3) = (f2(), a1, a2);\n    }\n\n    function f1() public returns (uint256,uint256,uint256) {\n        return (a1, a2, a3);\n    }\n\n    function f2() public returns(uint256){\n        a2 = 2;\n        return 3;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/destructuring/tuple_with_gaps.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"164\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    function main(uint8[11] memory v) public pure returns(uint8) {\n        (uint8 a, , uint8 c, uint8 d) = (v[0], v[1], v[2], v[3]);\n        (uint8 e, uint8 f, uint8 g, ) = (v[4], v[5], v[6], v[7]);\n        (uint8 j, , uint8 k) = (v[8], v[9], v[10]);\n\n        a += 42;\n        a += c;\n        a += d;\n        a += e;\n        a += f;\n        a += g;\n        a += 42;\n        a += j;\n        a += 42;\n        a += k;\n\n        return a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/destructuring/tuple.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"55\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.24;\r\n\r\ncontract Test {\r\n    function main(uint8[11] memory v) public pure returns(uint8) {\r\n        (uint8 a, uint8 b, uint8 c, uint8 d) = (v[0], v[1], v[2], v[3]);\r\n        (uint8 e, uint8 f, uint8 g, uint8 h) = (v[4], v[5], v[6], v[7]);\r\n        (uint8 j, uint8 i, uint8 k) = (v[8], v[9], v[10]);\r\n\r\n        a += b;\r\n        a += c;\r\n        a += d;\r\n        a += e;\r\n        a += f;\r\n        a += g;\r\n        a += h;\r\n        a += j;\r\n        a += i;\r\n        a += k;\r\n\r\n        return a;\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/error/default.sol":{"content":"//! {\n//!   \"cases\": [ {\n//!     \"name\": \"require_short\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"require_short\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000573686F72740000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"require_long\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"require_long\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x000000DD6C6C6F6E676C6F6E676C6F6E6774657874626C6F6E676C6F6E676C6F\",\n//!             \"0x6E6774657874626C6F6E676C6F6E676C6F6E6774657874626C6F6E676C6F6E67\",\n//!             \"0x6C6F6E6774657874626C6F6E676C6F6E676C6F6E6774657874626C6F6E676C6F\",\n//!             \"0x6E676C6F6E6774657874626C6F6E676C6F6E676C6F6E6774657874626C6F6E67\",\n//!             \"0x6C6F6E676C6F6E6774657874626C6F6E676C6F6E676C6F6E6774657874626C6F\",\n//!             \"0x6E676C6F6E676C6F6E6774657874626C6F6E676C6F6E676C6F6E677465787462\",\n//!             \"0x6C6F6E676C6F6E676C6F6E6774657874626F6E676C6F6E676C6F6E6774657874\",\n//!             \"0x6200000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"new_error\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"new_error\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x157BEA6000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000200000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000008000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000C64617461646174616461746100000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ncontract Test {\n    error TestError(uint256 one, uint256 two, uint256 three, string data);\n\n    function require_short() public pure {\n        require(false, \"short\");\n    }\n\n    function require_long() public pure {\n        require(false, \"llonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextblonglonglongtextbonglonglongtextb\");\n    }\n\n    function new_error() public pure {\n        revert TestError({one: 1, two: 2, three: 1, data: \"datadatadata\"});\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/error/revert1.sol":{"content":"//! {\n//!   \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000c66697273742072657665727400000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    function f() public {\n        require(f1() && f2(), \"main revert\");\n    }\n\n    function f1() public returns (bool) {\n        revert(\"first revert\");\n        return true;\n    }\n\n    function f2() public returns (bool) {\n        revert(\"second revert\");\n        return true;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/error/revert2.sol":{"content":"//! {\n//!   \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000b6d61696e207265766572740000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    string st = \"main revert\";\n\n    function f() public {\n        require(false, st);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/error/revert3.sol":{"content":"//! {\n//!   \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000c66697273742072657665727400000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n\n    function f() public {\n        require(false, f1());\n    }\n\n    function f1() public returns (string memory) {\n        revert(\"first revert\");\n        return \"main revert\";\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/error/revert4.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000374776f00000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    string public errorString = \"one\";\n\n    function f() public {\n        require(false, f1());\n    }\n\n    function f1() public returns (string memory) {\n        errorString = \"two\";\n        this.f2();\n        return \"three\";\n    }\n\n    function f2() public {\n        revert(errorString);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/error/revert5.sol":{"content":"//! {\n//!   \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08C379A000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000b72657665727420686572650000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    bool public a = false;\n\n    function f() public {\n        require(a, f1());\n    }\n\n    function f1() public returns (string memory) {\n        a = true;\n        return \"revert here\";\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/0_topics_0_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event() anonymous;\n\n    function test() public {\n        emit Event();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/0_topics_32_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"1234567890\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256) anonymous;\n\n    function test() public {\n        emit Event(1234567890);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/0_topics_64_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(1234567890, 1234567891);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/0_topics_96_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\",\n//!                     \"1234567892\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(1234567890, 1234567891, 1234567892);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/0_topics.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xdeadbeef2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": []\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\"0xdeadbeef\"]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\"-128\", \"-1\"]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"127\",\n//!                     \"0xdeadbeef2\",\n//!                     \"2\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"3\",\n//!                     \"0x6162630000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"-1\",\n//!                     \"0xdeadbeef3\",\n//!                     \"0xa0\",\n//!                     \"0\",\n//!                     \"0xe0\",\n//!                     \"5\",\n//!                     \"0xdeadbeef4000000000000000000000000000000000000000000000000000000\",\n//!                     \"3\",\n//!                     \"0\",\n//!                     \"2\",\n//!                     \"1\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ncontract Test {\n    uint256 constant CONST = 0xdeadbeef;\n    uint256 immutable IMMUTABLE;\n    bytes storage_var;\n\n    constructor() {\n        IMMUTABLE = 0xdeadbeef3;\n        storage_var = hex\"0deadbeef4\";\n    }\n\n    struct Str {\n        int8 a;\n        uint256 b;\n    }\n    enum Enum {\n        A,\n        B,\n        C\n    }\n    event Empty() anonymous;\n    event OneWord(uint256 x) anonymous;\n    event TwoWords(Str) anonymous;\n    event ThreeWords(Str, Enum e) anonymous;\n    event Dynamic(string) anonymous;\n    event Complex(Str s, bytes, uint256[1], Enum[] e) anonymous;\n\n    function test(uint256 number) public {\n        emit Empty();\n        emit OneWord(CONST);\n        emit TwoWords(Str(-128, 2**256-1));\n        emit ThreeWords(Str(127, number), Enum.C);\n        emit Dynamic(\"abc\");\n        Enum[] memory enums = new Enum[](3);\n        enums[0] = Enum.A;\n        enums[1] = Enum.C;\n        enums[2] = Enum.B;\n        emit Complex(Str(-1, IMMUTABLE), storage_var, [uint256(0)], enums);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/1_topic_0_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\"\n//!                 ],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed) anonymous;\n\n    function test() public {\n        emit Event(9876543210);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/1_topic_32_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 1234567890);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/1_topic_64_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 1234567890, 1234567891);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/1_topic_96_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\",\n//!                     \"1234567892\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 1234567890, 1234567891, 1234567892);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/1_topic.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xdeadbeef2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0x3db2a12a1fcfb6e2e0de8666c64b3244166edb7b25b200204a8d0cca9b65cf37\"\n//!                 ],\n//!                 \"values\": []\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!                 ],\n//!                 \"values\": [\"0xdeadbeef\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xca3f9448a573966265a425c911e248f5d76acd7ab4f9b31f3ec2440038c63561\"\n//!                 ],\n//!                 \"values\": [\"-128\", \"-1\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x83c737ad570e9f3e71e0d2800958e44770d812e92db2c1758626613d1e6ba514\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"127\",\n//!                     \"0xdeadbeef2\",\n//!                     \"2\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x6a10ac5d5f69030d7fc69d2e2d9fa31c998637f1be5ca8a27b95e9f87372b7e4\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"3\",\n//!                     \"0x6162630000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xff00000000000000000000000000000000000000000000000000000000000000\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"-1\",\n//!                     \"0xdeadbeef3\",\n//!                     \"0xa0\",\n//!                     \"0\",\n//!                     \"0xe0\",\n//!                     \"5\",\n//!                     \"0xdeadbeef4000000000000000000000000000000000000000000000000000000\",\n//!                     \"3\",\n//!                     \"0\",\n//!                     \"2\",\n//!                     \"1\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ncontract Test {\n    uint256 constant CONST = 0xdeadbeef;\n    uint256 immutable IMMUTABLE;\n    bytes storage_var;\n\n    constructor() {\n        IMMUTABLE = 0xdeadbeef3;\n        storage_var = hex\"0deadbeef4\";\n    }\n\n    struct Str {\n        int8 a;\n        uint256 b;\n    }\n    enum Enum {\n        A,\n        B,\n        C\n    }\n    event Empty();\n    event OneWord(uint200 indexed i, uint256 x) anonymous;\n    event TwoWords(Str);\n    event ThreeWords(string indexed, Str, Enum e) anonymous;\n    event Dynamic(string);\n    event Complex(bytes1 indexed b, Str s, bytes, uint256[1], Enum[] e) anonymous;\n\n    function test(uint256 number) public {\n        emit Empty();\n        emit OneWord(2**200-1, CONST);\n        emit TwoWords(Str(-128, 2**256-1));\n        emit ThreeWords(\"some string\", Str(127, number), Enum.C);\n        emit Dynamic(\"abc\");\n        Enum[] memory enums = new Enum[](3);\n        enums[0] = Enum.A;\n        enums[1] = Enum.C;\n        enums[2] = Enum.B;\n        emit Complex(bytes1(0xff), Str(-1, IMMUTABLE), storage_var, [uint256(0)], enums);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/2_topics_0_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\"\n//!                 ],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/2_topics_32_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 1234567890);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/2_topics_64_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 1234567890, 1234567891);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/2_topics_96_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\",\n//!                     \"1234567892\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 1234567890, 1234567891, 1234567892);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/2_topics.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xdeadbeef2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xf2c6b74a4e42434bf406d1452c6d967321daaad79270822b1e44a42b0aa6aa1f\",\n//!                     \"8923892323892398\"\n//!                 ],\n//!                 \"values\": []\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\"\n//!                 ],\n//!                 \"values\": [\"0xdeadbeef\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x416f2e35c7259c015d56b337484f39360b06f1d0b53f129353beead6cc8c5d71\",\n//!                     \"0xcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f\"\n//!                 ],\n//!                 \"values\": [\"-128\", \"-1\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x83c737ad570e9f3e71e0d2800958e44770d812e92db2c1758626613d1e6ba514\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"127\",\n//!                     \"0xdeadbeef2\",\n//!                     \"2\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xb003e25404531c83a6d0bdc419158b8c07c1a5f3e81ab387366c8b7e572c1ae5\",\n//!                     \"0xabcd000000000000000000000000000000000000000000000000000000000000\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"3\",\n//!                     \"0x6162630000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xff00000000000000000000000000000000000000000000000000000000000000\",\n//!                     \"0x3a56b02b60d4990074262f496ac34733f870e1b7815719b46ce155beac5e1a41\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"-1\",\n//!                     \"0xdeadbeef3\",\n//!                     \"0xa0\",\n//!                     \"0\",\n//!                     \"0xe0\",\n//!                     \"5\",\n//!                     \"0xdeadbeef4000000000000000000000000000000000000000000000000000000\",\n//!                     \"3\",\n//!                     \"0\",\n//!                     \"2\",\n//!                     \"1\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ncontract Test {\n    uint256 constant CONST = 0xdeadbeef;\n    uint256 immutable IMMUTABLE;\n    bytes storage_var;\n\n    constructor() {\n        IMMUTABLE = 0xdeadbeef3;\n        storage_var = hex\"0deadbeef4\";\n    }\n\n    struct Str {\n        int8 a;\n        uint256 b;\n    }\n    enum Enum {\n        A,\n        B,\n        C\n    }\n    event Empty(uint256 indexed a);\n    event OneWord(uint200 indexed i, int8 indexed, uint256 x) anonymous;\n    event TwoWords(Str indexed, Str);\n    event ThreeWords(string indexed, Enum indexed ei, Str, Enum e) anonymous;\n    event Dynamic(bytes2 indexed, string);\n    event Complex(bytes1 indexed b, bytes indexed bd, Str s, bytes, uint256[1], Enum[] e) anonymous;\n\n    function test(uint256 number) public {\n        emit Empty(8923892323892398);\n        emit OneWord(2**200-1, -128, CONST);\n        emit TwoWords(Str(1, 1), Str(-128, 2**256-1));\n        emit ThreeWords(\"some string\", Enum.B, Str(127, number), Enum.C);\n        emit Dynamic(bytes2(0xabcd), \"abc\");\n        Enum[] memory enums = new Enum[](3);\n        enums[0] = Enum.A;\n        enums[1] = Enum.C;\n        enums[2] = Enum.B;\n        emit Complex(bytes1(0xff), hex\"1234567890\", Str(-1, IMMUTABLE), storage_var, [uint256(0)], enums);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/3_topics_0_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\"\n//!                 ],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/3_topics_32_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 1234567890);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/3_topics_64_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 1234567890, 1234567891);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/3_topics_96_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\",\n//!                     \"1234567892\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 1234567890, 1234567891, 1234567892);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/3_topics.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xdeadbeef2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0x2013d4ad9a9a6379fb85265fd28e4d4e2f3d4b6a9087d5a1fa3aed3548ecada3\",\n//!                     \"8923892323892398\",\n//!                     \"0x58ae9129f801e721b1bbf220c77ba8c48badd9b887f33def390a8120ed73c9cc\"\n//!                 ],\n//!                 \"values\": []\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\",\n//!                     \"0x000000000000000000000000000000000000000000000000000000ffffffffff\"\n//!                 ],\n//!                 \"values\": [\"0xdeadbeef\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x9ce9673b07118eb7e55c7fc521b8bf9d6a25c247b2c90cf0208699e1ee393ad6\",\n//!                     \"0xcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f\",\n//!                     \"-1\"\n//!                 ],\n//!                 \"values\": [\"-128\", \"-1\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x83c737ad570e9f3e71e0d2800958e44770d812e92db2c1758626613d1e6ba514\",\n//!                     \"1\",\n//!                     \"0xdf0e45714bf256afe7c550b1150d0958439b34ae307888e184b747e3dd414a4a\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"127\",\n//!                     \"0xdeadbeef2\",\n//!                     \"2\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xf20f5ffcb271503e510c980b74d44f6628d621d291d150a564d6e1e261862374\",\n//!                     \"0xabcd000000000000000000000000000000000000000000000000000000000000\",\n//!                     \"0xdeadbeef00000000000000000000000000000000000000000000000000000000\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"3\",\n//!                     \"0x6162630000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xff00000000000000000000000000000000000000000000000000000000000000\",\n//!                     \"0x3a56b02b60d4990074262f496ac34733f870e1b7815719b46ce155beac5e1a41\",\n//!                     \"0x5bb661834c674f8f35aa5071b921a42aeae177c4b8bec3e41e2beb11cc404805\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"-1\",\n//!                     \"0xdeadbeef3\",\n//!                     \"0xa0\",\n//!                     \"0\",\n//!                     \"0xe0\",\n//!                     \"5\",\n//!                     \"0xdeadbeef4000000000000000000000000000000000000000000000000000000\",\n//!                     \"3\",\n//!                     \"0\",\n//!                     \"2\",\n//!                     \"1\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ncontract Test {\n    uint256 constant CONST = 0xdeadbeef;\n    uint256 immutable IMMUTABLE;\n    bytes storage_var;\n\n    constructor() {\n        IMMUTABLE = 0xdeadbeef3;\n        storage_var = hex\"0deadbeef4\";\n    }\n\n    struct Str {\n        int8 a;\n        uint256 b;\n    }\n    enum Enum {\n        A,\n        B,\n        C\n    }\n    event Empty(uint256 indexed a, uint8[2] indexed);\n    event OneWord(uint200 indexed i, int8 indexed, uint256 x, uint40 indexed u40ind) anonymous;\n    event TwoWords(Str indexed, int256 indexed, Str);\n    event ThreeWords(string indexed, Enum indexed ei, int200[] indexed dyn_arr_ind, Str, Enum e) anonymous;\n    event Dynamic(bytes2 indexed, bytes32 indexed, string);\n    event Complex(bytes1 indexed b, bytes indexed bd, bytes[] indexed, Str s, bytes, uint256[1], Enum[] e) anonymous;\n\n    function test(uint256 number) public {\n        emit Empty(8923892323892398, [255, 0]);\n        emit OneWord(2**200-1, -128, CONST, 2**40-1);\n        emit TwoWords(Str(1, 1), -1, Str(-128, 2**256-1));\n        int200[] memory ints = new int200[](3);\n        ints[0] = -1;\n        ints[1] = 131231231232134;\n        ints[2] = 1;\n        emit ThreeWords(\"some string\", Enum.B, ints, Str(127, number), Enum.C);\n        emit Dynamic(bytes2(0xabcd), hex\"deadbeef\", \"abc\");\n        Enum[] memory enums = new Enum[](3);\n        enums[0] = Enum.A;\n        enums[1] = Enum.C;\n        enums[2] = Enum.B;\n        bytes[] memory bytes_array = new bytes[](2);\n        bytes_array[0] = hex\"1234567890123456789012345678901234567890123456789012345678901234567890\";\n        bytes_array[1] = hex\"0987654321\";\n        emit Complex(bytes1(0xff), hex\"1234567890\", bytes_array, Str(-1, IMMUTABLE), storage_var, [uint256(0)], enums);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/4_topics_0_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\",\n//!                     \"9876543213\"\n//!                 ],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256 indexed) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 9876543213);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/4_topics_32_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\",\n//!                     \"9876543213\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256 indexed, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 9876543213, 1234567890);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/4_topics_64_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\",\n//!                     \"9876543213\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256 indexed, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 9876543213, 1234567890, 1234567891);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/4_topics_96_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"9876543210\",\n//!                     \"9876543211\",\n//!                     \"9876543212\",\n//!                     \"9876543213\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"1234567890\",\n//!                     \"1234567891\",\n//!                     \"1234567892\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Event(uint256 indexed, uint256 indexed, uint256 indexed, uint256 indexed, uint256, uint256, uint256) anonymous;\n\n    function test() public {\n        emit Event(9876543210, 9876543211, 9876543212, 9876543213, 1234567890, 1234567891, 1234567892);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/4_topics.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xdeadbeef2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0x448a4dbfbb0cb14af554ed9a5cbdaf4ecc08c9a9db0565418ce03921991585e9\",\n//!                     \"8923892323892398\",\n//!                     \"0x58ae9129f801e721b1bbf220c77ba8c48badd9b887f33def390a8120ed73c9cc\",\n//!                     \"0x0f551aaa5c86ee8370a062ef34113b9589b1b5d8c4fd999217b22b5f6e4dc726\"\n//!                 ],\n//!                 \"values\": []\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                     \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\",\n//!                     \"0x000000000000000000000000000000000000000000000000000000ffffffffff\",\n//!                     \"0xa9c584056064687e149968cbab758a3376d22aedc6a55823d1b3ecbee81b8fb9\"\n//!                 ],\n//!                 \"values\": [\"0xdeadbeef\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x251115a7025a1da3bd9ba76e9286175a072dd3af7ff77ed356b054cf2a6f445a\",\n//!                     \"0xcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f\",\n//!                     \"-1\",\n//!                     \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!                 ],\n//!                 \"values\": [\"-128\", \"-1\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x83c737ad570e9f3e71e0d2800958e44770d812e92db2c1758626613d1e6ba514\",\n//!                     \"1\",\n//!                     \"0xdf0e45714bf256afe7c550b1150d0958439b34ae307888e184b747e3dd414a4a\",\n//!                     \"0x46fff8a91b2a509b0003c20c325d2116ddb2f88f4c48fdebba3bfce2ed90bb2c\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"127\",\n//!                     \"0xdeadbeef2\",\n//!                     \"2\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xdca3c296240fe7b6419be9ee836b72c9aa783fa278021c0959f7c8d1c176ae60\",\n//!                     \"0xabcd000000000000000000000000000000000000000000000000000000000000\",\n//!                     \"0xdeadbeef00000000000000000000000000000000000000000000000000000000\",\n//!                     \"0x45030b51678974217968eeacdbef5b0ac42a4c6351c961a8a80591f1b70c14cc\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"3\",\n//!                     \"0x6162630000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0xff00000000000000000000000000000000000000000000000000000000000000\",\n//!                     \"0x3a56b02b60d4990074262f496ac34733f870e1b7815719b46ce155beac5e1a41\",\n//!                     \"0x5bb661834c674f8f35aa5071b921a42aeae177c4b8bec3e41e2beb11cc404805\",\n//!                     \"Test.address\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"-1\",\n//!                     \"0xdeadbeef3\",\n//!                     \"0xa0\",\n//!                     \"0\",\n//!                     \"0xe0\",\n//!                     \"5\",\n//!                     \"0xdeadbeef4000000000000000000000000000000000000000000000000000000\",\n//!                     \"3\",\n//!                     \"0\",\n//!                     \"2\",\n//!                     \"1\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ncontract Test {\n    uint256 constant CONST = 0xdeadbeef;\n    uint256 immutable IMMUTABLE;\n    bytes storage_var;\n\n    constructor() {\n        IMMUTABLE = 0xdeadbeef3;\n        storage_var = hex\"0deadbeef4\";\n    }\n\n    struct Str {\n        int8 a;\n        uint256 b;\n    }\n    enum Enum {\n        A,\n        B,\n        C\n    }\n    event Empty(uint256 indexed a, uint8[2] indexed, Str[] indexed dyn_str_ind);\n    event OneWord(uint200 indexed i, int8 indexed, uint256 x, uint40 indexed u40ind, uint256[1] indexed uint_arr1_ind) anonymous;\n    event TwoWords(Str indexed, int256 indexed, Enum[1] indexed, Str);\n    event ThreeWords(string indexed, Enum indexed ei, int200[] indexed dyn_arr_ind, Str, Enum e, Str[2] indexed) anonymous;\n    event Dynamic(bytes2 indexed, bytes32 indexed, uint8[2][2] indexed, string);\n    event Complex(bytes1 indexed b, bytes indexed bd, bytes[] indexed, address indexed addr, Str s, bytes, uint256[1], Enum[] e) anonymous;\n\n    function test(uint256 number) public {\n        Str[] memory strs = new Str[](2);\n        strs[0] = Str(-1, 1);\n        strs[1] = Str(127, 123456789012345678901234567890);\n        emit Empty(8923892323892398, [255, 0], strs);\n        emit OneWord(2**200-1, -128, CONST, 2**40-1, [2**256-1]);\n        emit TwoWords(Str(1, 1), -1, [Enum.A], Str(-128, 2**256-1));\n        int200[] memory ints = new int200[](3);\n        ints[0] = -1;\n        ints[1] = 131231231232134;\n        ints[2] = 1;\n        emit ThreeWords(\"some string\", Enum.B, ints, Str(127, number), Enum.C, [Str(0, 0), Str(12, 6789983984983434348989348934934)]);\n        emit Dynamic(bytes2(0xabcd), hex\"deadbeef\", [[4, 3], [2, 1]], \"abc\");\n        Enum[] memory enums = new Enum[](3);\n        enums[0] = Enum.A;\n        enums[1] = Enum.C;\n        enums[2] = Enum.B;\n        bytes[] memory bytes_array = new bytes[](2);\n        bytes_array[0] = hex\"1234567890123456789012345678901234567890123456789012345678901234567890\";\n        bytes_array[1] = hex\"0987654321\";\n        emit Complex(bytes1(0xff), hex\"1234567890\", bytes_array, address(this), Str(-1, IMMUTABLE), storage_var, [uint256(0)], enums);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/anonymous.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x111111111\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-693/event-test-with-unused-parameter-long-execution\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Empty() anonymous;\n\n    function test(uint256 number) public {\n        emit Empty();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/default.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\"0x742ddab21c2fcfa13cae111a0cd043fb6c4375a90b69212466f265cea02c6dbc\"],\n//!                 \"values\": []\n//!             },\n//!             {\n//!                 \"topics\": [\"0x0a24cd290a359e539b7a80b016b98ec9c4f4cae46d04d989ed6ae93e8c52c209\"],\n//!                 \"values\": [\"42\", \"3735928559\"]\n//!             },\n//!             {\n//!                 \"topics\": [\n//!                     \"0x37f8d1a8dd2ace10b09f68d60e4c035f242c1273a124f3e2a67bdb87df62b878\",\n//!                     \"0x000000000000000000000000000000000000000000000000000000000000002a\"\n//!                 ],\n//!                 \"values\": [\"12648430\"]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    event Trivial();\n    event Simple(uint256 Number, address Account);\n    event Indexed(uint256 indexed Number, address Account);\n\n    function test(uint256 number) public {\n        emit Trivial();\n        emit Simple(number, address(0xdeadbeef));\n        emit Indexed(number, address(0xc0ffee));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/events/evaluation_order.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"42\",\n//!             \"25\",\n//!             \"5\"\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"5\",\n//!                     \"25\",\n//!                     \"42\"\n//!                 ],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\ncontract Test {\n    function main() external {\n        assembly {\n            function func(input) -> output {\n                let currentPtr := mload(0x40)\n                mstore(currentPtr, input)\n                mstore(0x40, add(currentPtr, 0x20))\n                output := input\n            }\n\n            log3(0x0, 0x0, func(5), func(25), func(42))\n\n            let beginPtr := sub(mload(0x40), 0x60)\n            return(beginPtr, 0x60)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/complex_access.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"33\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.24;\n\ncontract Test {\n    struct Data {\n        uint8 value;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8[2][2] memory array = [[1, 2], [3, 4]];\n        (uint8 a, uint8 b, uint8 c, uint8 d) = (1, 2, 3, 4);\n        Data memory structure = Data(witness);\n\n        return array[1][1] + d + structure.value;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/complex_function_result_slice.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    struct Entry1 {\n        bool a;\n        uint8[2] b;\n    }\n\n    struct Entry2 {\n        uint8 a;\n        uint8[4] b;\n    }\n\n    struct Data {\n        Entry1 a;\n        Entry2 b;\n    }\n\n    function foo() private pure returns(Data memory) {\n        return Data({\n            a: Entry1(false, [8, 9]),\n            b: Entry2(1, [2, 3, 4, 5])\n        });\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        return witness * foo().b.b[2];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/complex_operator_minimal.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        return 14 - (witness / 2 + 5) * 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/complex_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 local1 = 3;\n        uint8 local2 = 5;\n        uint8 local3 = 2;\n\n        return 19 * 3 - 8 / local1 + (witness / (local2 - 3) + 5) * (8 / local3 / 2);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/constant_complex.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"128\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    struct Data {\n        uint8[3] a;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        Data[3] memory data = [\n            Data([1, 2, 3]),\n            Data([3, 4, 5]),\n            Data([7, 8, 9])\n        ];\n\n        return data[2].a[1] * witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/constant_conditional.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"158\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 constant SCRUTINEE = 42;\n\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 conditional;\n        if (SCRUTINEE == 64) {\n            conditional = 100;\n        } else {\n            conditional = 200;\n        }\n        return conditional - witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/constant_match.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"58\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 constant SCRUTINEE = 42;\n\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 _match;\n        if (SCRUTINEE == 0) {\n            _match = 10;\n        } else if (SCRUTINEE == 1) {\n            _match = 20;\n        } else if (SCRUTINEE == 42) {\n            _match = 100;\n        } else {\n            _match = 255 - SCRUTINEE;\n        }\n        return _match - witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/inference_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64516\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 constant SCRUTINEE = 42;\n\n    function main(uint8 witness) public pure returns(uint24) {\n        return 65536 - 255 * uint24(witness);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/mixed_item_constantness.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"131\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint248 constant CONST = 42;\n\n    function main(uint248 witness) public pure returns(uint248) {\n        uint248 local = 64;\n\n        return CONST + local + witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/mixed_literal_base.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"210\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        return uint8(witness + 42e0 + 0x2a + 42 + 0x2A);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/expression/recursive.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x0100000000\"\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-737/fix-a-test-failed-after-changing-the-inliner-configuration\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function f(uint x) public returns (uint256 r) {\n        return x == 0 ? 2 : f(x - 1)**2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/fallback/simple.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#fallback\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.6;\n\ncontract Test {\n    fallback(bytes calldata) external returns(bytes memory) {\n        return abi.encodePacked(uint256(42));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/fat_ptr/pointers_forwarding.sol":{"content":"//! { \"targets\": [ \"eravm\" ], \"enable_eravm_extensions\": true,\n//!     \"modes\": [ \"Y >=0.8.4\" ],\n//!     \"cases\": [ {\n//!     \"name\": \"case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testPointers\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }  ] }\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity >=0.8.0;\n\n/// @notice An example of a contract that uses pointer arithmetic to optimize memory\n/// copying.\n/// @dev It is not used anywhere except for testing\ncontract Test {\n    bytes expectedCalldata;\n\n    function loadCalldataPtrIntoActivePtr() internal view {\n        // Compiler hach to load the current calldata pointer into the\n        // active pointer for future use.\n        assembly {\n            pop(staticcall(0, 0xFFEB, 0, 0xFFFF, 0, 0))\n        }\n    }\n\n    function loadReturndataPtrIntoActivePtr() internal view {\n        // Compiler hach to load the latest returndata pointer into the\n        // active pointer for future use.\n        assembly {\n            pop(staticcall(0, 0xFFEA, 0, 0xFFFF, 0, 0))\n        }\n    }\n\n    function getCalldataPtr() external view returns (uint256 res) {\n        assembly {\n            res := staticcall(0, 0xFFF0, 0, 0xFFFF, 0, 0)\n        }\n    }\n\n    // Simple raw `call` (without any special flags) that uses the active pointer as\n    // the calldata.\n    function rawFarCallByRef(\n        address callee\n    ) internal returns (bool success, bytes memory returndata) {\n        uint256 returndataLength = 0;\n        assembly {\n            pop(staticcall(or(shl(192, gas()), shl(224, 1)), 0xFFE7, 0, 0xFFFF, 0, 0))\n            success := call(callee, 0xFFF6, 0, 0, 0xFFFF, 0, 0)\n            returndataLength := returndatasize()\n        }\n        returndata = new bytes(returndataLength);\n\n        assembly {\n            returndatacopy(add(returndata, 0x20), 0, returndataLength)\n        }\n    }\n\n    function testPointers() external {\n        bytes memory expectedReturndata = hex\"1212\";\n\n        {\n            // Loading the pointer to the current calldata into the active pointer\n            loadCalldataPtrIntoActivePtr();\n            AssertCalldata ptrCalldataTest = new AssertCalldata(bytes.concat(Test.testPointers.selector));\n            (bool success, bytes memory returndata) = rawFarCallByRef(address(ptrCalldataTest));\n            require(success, \"Test for calldata pointer failed\");\n            require(keccak256(returndata) == keccak256(expectedReturndata), \"The returndata is incorrect\");\n        }\n\n        {\n            loadReturndataPtrIntoActivePtr();\n            AssertCalldata ptrReturndataTest = new AssertCalldata(expectedReturndata);\n            (bool success, ) = rawFarCallByRef(address(ptrReturndataTest));\n            require(success, \"Test for returndata pointer failed\");\n        }\n    }\n}\n\ncontract AssertCalldata {\n    bytes32 expectedCalldataHash;\n    constructor(bytes memory _expectedCalldata) {\n        expectedCalldataHash = keccak256(_expectedCalldata);\n    }\n\n    fallback(bytes calldata data) external payable returns (bytes memory returndata) {\n        require(keccak256(data) == expectedCalldataHash, \"Calldata is incorrect\");\n        returndata = hex\"1212\";\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/fat_ptr/ptr_load_overwrite.sol":{"content":"//! { \"targets\": [ \"eravm\" ], \"enable_eravm_extensions\": true,\n//!     \"modes\": [ \"Y\" ],\n//!     \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }  ] }\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    address constant ADDRESS_CONTRACT_DEPLOYER = 0x0000000000000000000000000000000000008006;\n\n    function main() external returns(bool) {\n        return this.create(0, address(this).codehash, \"\");\n    }\n\n    // Deployer call using calldata ptr.\n    function create(\n        bytes32, // salt\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external returns(bool success) {\n        assembly {\n            // load calldata ptr into active\n            pop(staticcall(0, 0xFFEB, 0, 0xFFFF, 0, 0))\n            // set system call flag, gas and forwarding mode\n            pop(staticcall(or(or(shl(192, gas()), shl(224, 1)), shl(248, 1)), 0xFFE7, 0, 0xFFFF, 0, 0))\n            // load calldata ptr into active (should overwrite abi data)\n            pop(staticcall(0, 0xFFEB, 0, 0xFFFF, 0, 0))\n            // should be an exception as the abi data should be overwritten.\n            success := call(ADDRESS_CONTRACT_DEPLOYER, 0xFFF6, 0, 0, 0xFFFF, 0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/fat_ptr/ptr_pack_overwrite.sol":{"content":"//! { \"targets\": [ \"eravm\" ], \"enable_eravm_extensions\": true,\n//!     \"modes\": [ \"Y\" ],\n//!     \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }  ] }\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    address constant ADDRESS_CONTRACT_DEPLOYER = 0x0000000000000000000000000000000000008006;\n\n    function main() external returns(bool) {\n        return this.create(0, address(this).codehash, \"\");\n    }\n\n    // Deployer call using calldata ptr.\n    function create(\n        bytes32, // salt\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external returns(bool success) {\n        assembly {\n            // load calldata ptr into active\n            pop(staticcall(0, 0xFFEB, 0, 0xFFFF, 0, 0))\n            // set system call flag\n            pop(staticcall(shl(248, 1), 0xFFE7, 0, 0xFFFF, 0, 0))\n            // set gas and forwarding mode (should overwrite system call flag)\n            pop(staticcall(or(shl(192, gas()), shl(224, 1)), 0xFFE7, 0, 0xFFFF, 0, 0))\n            // should be an exception as the system call flag should be overwritten.\n            success := call(ADDRESS_CONTRACT_DEPLOYER, 0xFFF6, 0, 0, 0xFFFF, 0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/aligned/complex_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x03\",\n//!                 \"0x05\",\n//!                 \"0x02\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint256 immutable field_1;\n    uint256 immutable field_2;\n    uint256 immutable field_3;\n\n    constructor(uint256 a, uint256 b, uint256 c) public {\n        field_1 = a;\n        field_2 = b;\n        field_3 = c;\n    }\n\n    function main(uint8 witness) external returns(uint8) {\n        return 19 * 3 - 8 / uint8(field_1) + (witness / (uint8(field_2) - 3) + 5) * (8 / uint8(field_3) / 2);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/aligned/method_chain.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x05\",\n//!                 \"0x0b\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1024\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint256 immutable a;\n    uint256 immutable b;\n\n    constructor(uint256 x, uint256 y) public {\n        a = x;\n        b = y;\n    }\n\n    function double(uint256 _value) internal returns(uint256) {\n        return _value * 2;\n    }\n\n    function triple(uint256 _value) internal returns(uint256) {\n        return 3 * _value;\n    }\n\n    function quadruple(uint256 _value) internal returns(uint256) {\n        return _value * 4;\n    }\n\n    function main(uint256 _value) external returns(uint256) {\n        return a + quadruple(triple(double(_value))) + b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/aligned/mixed_data_origin.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x05\",\n//!                 \"0x07\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"148\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint256 constant SOMETHING = 42;\n    uint256 constant SOMETHING_ELSE = 88;\n\n    struct Data {\n        uint256 c;\n        uint256 d;\n    }\n\n    uint256 immutable a;\n    uint256 immutable b;\n\n    constructor(uint256 x, uint256 y) public {\n        a = x;\n        b = y;\n    }\n\n    function inner(Data memory data, uint256 _value, uint8 literal) internal returns(uint256) {\n        return ((a + data.c + b + data.d + _value) * literal * SOMETHING - SOMETHING_ELSE) / 1000;\n    }\n\n    function main(uint256 _value) external returns(uint256) {\n        Data memory data = Data({c: 10, d: 20});\n\n        return inner(data, _value, 42);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/aligned/simple_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x03\",\n//!                 \"0x05\",\n//!                 \"0x02\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint256 immutable field_1;\n    uint256 immutable field_2;\n    uint256 immutable field_3;\n\n    constructor(uint256 a, uint256 b, uint256 c) public {\n        field_1 = a;\n        field_2 = b;\n        field_3 = c;\n    }\n\n    function main(uint8 witness) external returns(uint8) {\n        return witness + uint8(field_1) * uint8(field_2) * uint8(field_3);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\", \"6\", \"7\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n\n    constructor() {\n        z = 7;\n    }\n\n    function fC() public returns (uint256) {\n        return z;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor() {\n        y = 6;\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() {\n        x = 5;\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\", \"6\", \"7\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n\n    constructor() {\n        z = 7;\n    }\n\n    function fC() public returns (uint256) {\n        return z;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor() {\n        y = 6;\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() {\n        x = fC();\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables3.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\", \"0\", \"7\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n\n    constructor() {\n        z = 7;\n    }\n\n    function fC() public returns (uint256) {\n        return z;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor(uint _val) {\n        y = _val;\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() TestB(fC()) {\n        x = 5;\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables4.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\", \"0\", \"7\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n\n    constructor() {\n        z = 7;\n    }\n\n    function fC() public returns (uint256) {\n        return z;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor(uint _val) {\n        y = _val;\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() TestB(fB()) {\n        x = fB();\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables5.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\", \"0\", \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n\n    constructor(uint _val) {\n        z = _val;\n    }\n\n    function fC() public returns (uint256) {\n        return z;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor(uint _val) TestC(2) {\n        y = _val;\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() TestB(fC()) {\n        x = z;\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables6_legacy.sol":{"content":"//! { \"modes\": [ \"E\" ], \"cases\": [{\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\",\n//!         \"8\",\n//!         \"8\"\n//!     ]\n//!     }\n//! ]}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n    uint s = 8;\n\n    constructor(uint _val) {\n        z = _val;\n    }\n\n    function fC() public returns (uint256) {\n        return s;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor(uint _val) TestC(_val) {\n        y = fC();\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() TestB(fC()) {\n        x = z;\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/inheritance/immutables6_yul.sol":{"content":"//! { \"modes\": [ \"Y\", \"I\" ], \"cases\": [{\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\",\n//!         \"8\",\n//!         \"0\"\n//!     ]\n//!     }\n//! ]}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ncontract TestC {\n    uint256 immutable z;\n    uint s = 8;\n\n    constructor(uint _val) {\n        z = _val;\n    }\n\n    function fC() public returns (uint256) {\n        return s;\n    }\n}\n\ncontract TestB is TestC {\n    uint256 immutable y;\n\n    constructor(uint _val) TestC(_val) {\n        y = fC();\n    }\n\n    function fB() public returns (uint256) {\n        return y;\n    }\n}\n\ncontract Test is TestC, TestB {\n    uint256 immutable x;\n\n    constructor() TestB(fC()) {\n        x = z;\n    }\n\n    function f() public returns (uint256, uint256, uint256) {\n        return (x, y, z);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/memory_manipulation.sol":{"content":"//! { \"modes\": [\n//!     \"Y\", \"E+ <=0.8.12\", \"E+ >=0.8.15\", \"E-\", \"I\"\n//! ], \"cases\": [\n//!         {\n//!             \"name\": \"main\",\n//!             \"inputs\": [\n//!                 {\n//!                     \"method\": \"main\",\n//!                     \"calldata\": []\n//!                 }\n//!             ],\n//!             \"expected\": {\n//!                 \"return_data\": [\"2\"]\n//!             }\n//!         }\n//!     ]\n//! }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint256 public immutable X;\n\n    constructor() public {\n        X = 1;\n        assembly {\n            mstore(0x80, 2)\n        }\n    }\n\n    function main() public view returns (uint256) {\n        return X;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/unaligned/complex_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x03\",\n//!                 \"0x05\",\n//!                 \"0x02\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint8 immutable field_1;\n    uint8 immutable field_2;\n    uint8 immutable field_3;\n\n    constructor(uint8 a, uint8 b, uint8 c) public {\n        field_1 = a;\n        field_2 = b;\n        field_3 = c;\n    }\n\n    function main(uint8 witness) external returns(uint8) {\n        return 19 * 3 - 8 / field_1 + (witness / (field_2 - 3) + 5) * (8 / field_3 / 2);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/unaligned/method_chain.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x05\",\n//!                 \"0x0b\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1024\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint8 immutable a;\n    uint8 immutable b;\n\n    constructor(uint8 x, uint8 y) public {\n        a = x;\n        b = y;\n    }\n\n    function double(uint256 _value) internal returns(uint256) {\n        return _value * 2;\n    }\n\n    function triple(uint256 _value) internal returns(uint256) {\n        return 3 * _value;\n    }\n\n    function quadruple(uint256 _value) internal returns(uint256) {\n        return _value * 4;\n    }\n\n    function main(uint256 _value) external returns(uint256) {\n        return a + quadruple(triple(double(_value))) + b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/unaligned/mixed_data_origin.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x05\",\n//!                 \"0x07\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"148\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint256 constant SOMETHING = 42;\n    uint256 constant SOMETHING_ELSE = 88;\n\n    struct Data {\n        uint256 c;\n        uint256 d;\n    }\n\n    uint8 immutable a;\n    uint8 immutable b;\n\n    constructor(uint8 x, uint8 y) public {\n        a = x;\n        b = y;\n    }\n\n    function inner(Data memory data, uint256 _value, uint8 literal) internal returns(uint256) {\n        return ((a + data.c + b + data.d + _value) * literal * SOMETHING - SOMETHING_ELSE) / 1000;\n    }\n\n    function main(uint256 _value) external returns(uint256) {\n        Data memory data = Data({c: 10, d: 20});\n\n        return inner(data, _value, 42);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/immutable/unaligned/simple_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0x03\",\n//!                 \"0x05\",\n//!                 \"0x02\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5;\n\ncontract Test {\n    uint8 immutable field_1;\n    uint8 immutable field_2;\n    uint8 immutable field_3;\n\n    constructor(uint8 a, uint8 b, uint8 c) public {\n        field_1 = a;\n        field_2 = b;\n        field_3 = c;\n    }\n\n    function main(uint8 witness) external returns(uint8) {\n        return witness + field_1 * field_2 * field_3;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_common_namespace.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"51\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum Data {\n        VALUE\n    }\n\n    uint8 constant ANOTHER =  25;\n\n    function test(uint8 witness) private pure returns(uint8) {\n        return (uint8(Data.VALUE) + 42 - ANOTHER) * witness;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        return test(witness);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_constructors.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"30\"\n//!     ]\n//! }, {\n//!     \"name\": \"two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"600\"\n//!     ]\n//! }, {\n//!     \"name\": \"three\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"999999\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5999994\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum List {\n        FIRST,\n        SECOND,\n        THIRD\n    }\n\n    function first() private pure returns(List) {\n        return List.FIRST;\n    }\n\n    function second() private pure returns(List) {\n        return List.SECOND;\n    }\n\n    function third() private pure returns(List) {\n        return List.THIRD;\n    }\n\n    function main(uint256 witness) public pure returns(uint256) {\n        return (uint256(first()) + 1 + uint256(second()) + 1 + uint256(third()) + 1) * witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_immutable_method.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"48\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum List {\n        FIRST,\n        SECOND,\n        THIRD\n    }\n\n    function multiplyByAll(List list) private pure returns(uint256) {\n        return (uint256(list) + 1) * (uint256(List.FIRST) + 1) * (uint256(List.SECOND) + 1) * (uint256(List.THIRD) + 1);\n    }\n\n    function main(uint8 witness) public pure returns(uint256) {\n        return multiplyByAll(List.FIRST) * witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_method_chain.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"24\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum List {\n        DEFAULT,\n        FIRST,\n        SECOND,\n        THIRD\n    }\n\n    function _new() private pure returns(List) {\n        return List.DEFAULT;\n    }\n\n    function intoFirst(List list) private pure returns(List) {\n        return List.FIRST;\n    }\n\n    function intoSecond(List list) private pure returns(List) {\n        return List.SECOND;\n    }\n\n    function intoThird(List list) private pure returns(List) {\n        return List.THIRD;\n    }\n\n    function main(uint8 witness) public pure returns(uint64) {\n        return uint64(intoThird(intoSecond(intoFirst(_new())))) * witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_method_next.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum List {\n        DEFAULT,\n        FIRST,\n        SECOND,\n        THIRD\n    }\n\n    function next(List list) private pure returns(List) {\n        if (list == List.DEFAULT) {\n            return List.FIRST;\n        } else if (list == List.FIRST) {\n            return List.SECOND;\n        } else if (list == List.SECOND) {\n            return List.THIRD;\n        } else {\n            return List.DEFAULT;\n        }\n    }\n\n    function main(List witness) public pure returns(List) {\n        return next(witness);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_method_opposite.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum List {\n        FIRST,\n        SECOND\n    }\n\n    function opposite(List list) private pure returns(List) {\n        if (list == List.FIRST) {\n            return List.SECOND;\n        } else {\n            return List.FIRST;\n        }\n    }\n\n    function main(List witness) public pure returns(List) {\n        return opposite(witness);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/enumeration_mutable_method.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"48\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum List {\n        FIRST,\n        SECOND,\n        THIRD\n    }\n\n    function multiply(List list, List other) private pure returns(uint8) {\n        return (uint8(list) + 1) * (uint8(other) + 1);\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        return multiply(List.SECOND, List.THIRD) * witness;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/simple_call.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-581/require-in-external-call-failure-for-b1-b3\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function f() public pure {\n        require(true);\n    }\n\n    function entry() public view {\n        this.f();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/structure_common_namespace.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"210\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Data {\n        uint8 factor;\n    }\n\n    function test(Data memory data, uint8 witness) private pure returns(uint8) {\n        return witness * data.factor;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        Data memory data = Data(5);\n        return test(data, witness);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/structure_constructor.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"65535\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"65535\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Data {\n        uint256 a;\n    }\n\n    function _new(uint256 a) private pure returns(Data memory) {\n        return Data(a);\n    }\n\n    function main(uint256 witness) public pure returns(uint256) {\n        return _new(witness).a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/structure_immutable_method.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Data {\n        uint8 a;\n        uint8 b;\n        uint8 c;\n    }\n\n    function sum(Data memory data) private pure returns(uint8) {\n        return data.a + data.b + data.c;\n    }\n\n    function main(Data memory witness) public pure returns(uint8) {\n        return sum(witness);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/structure_method_chain.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1008\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1536\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"24000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Data {\n        uint256 a;\n    }\n\n    function _new(uint256 a) private pure returns(Data memory) {\n        return Data(a);\n    }\n\n    function double(Data memory data) private pure returns(Data memory) {\n        return Data(data.a * 2);\n    }\n\n    function triple(Data memory data) private pure returns(Data memory) {\n        return Data(data.a * 3);\n    }\n\n    function quadruple(Data memory data) private pure returns(Data memory) {\n        return Data(data.a * 4);\n    }\n\n    function intoInner(Data memory data) private pure returns(uint256) {\n        return data.a;\n    }\n\n    function main(uint256 witness) public pure returns(uint256) {\n        return intoInner(\n            quadruple(\n                triple(\n                    double(\n                        _new(witness)\n                    )\n                )\n            )\n        );\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/interface/structure_mutable_method.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"131\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Data {\n        uint8 a;\n        uint8 b;\n        uint8 c;\n    }\n\n    function fill(Data memory data, uint8[3] memory values) private pure returns(Data memory) {\n        data.a = values[0];\n        data.b = values[1];\n        data.c = values[2];\n        return data;\n    }\n\n    function main(Data memory witness) public pure returns(uint8) {\n        Data memory filled = fill(witness, [25, 42, 64]);\n        return filled.a + filled.b + filled.c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/base_access_to_function_type_variables.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"fail\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"g\",\n//!             \"calldata\": [],\n//!             \"expected\": [ \"2\" ]\n//!         },\n//!         {\n//!             \"method\": \"h\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! }, {\n//!     \"name\": \"pass\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": []\n//!         },\n//!         {\n//!             \"method\": \"h\",\n//!             \"calldata\": [],\n//!             \"expected\": [ \"2\" ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": false\n//!     }\n//! }\n//! ] }\n\n// SPDX-License-Identifier: MIT\n\n// solc < 0.5.1 runs into a \"Function not found in member access\" internal\n// compiler error\npragma solidity >=0.5.1;\n\ncontract Test {\n    function() returns (uint256) internal x;\n\n    function set() public {\n        Test.x = g;\n    }\n\n    function g() public pure returns (uint256) {\n        return 2;\n    }\n\n    function h() public returns (uint256) {\n        return Test.x();\n    }\n}\n\n// ====\n// compileToEwasm: also\n// ----\n// g() -> 2\n// h() -> FAILURE, hex\"4e487b71\", 0x51\n// set() ->\n// h() -> 2\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/basic.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"success\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"m\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"386\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    uint x;\n\n    function() internal pure returns (uint) fp;\n    function c0() internal pure returns (uint) { return 0xc0; }\n    function c1() internal pure returns (uint) { return 0xc1; }\n\n    constructor(int i) public {\n        if (i == 0) { fp = c0; }\n        if (i == 1) { fp = c1; }\n        x = fp();\n    }\n\n    function m() public view returns (uint) {\n        return x + fp();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/call_conditions.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    // Function pointer for mathematical operations\n    function(uint256, uint256) internal view returns (uint256) operation;\n\n    // Mathematical operations\n    function addition(uint256 a, uint256 b) internal pure returns(uint256) {\n        return a + b;\n    }\n\n    function subtraction(uint256 a, uint256 b) internal pure returns(uint256) {\n        return a - b;\n    }\n\n    function multiplication(uint256 a, uint256 b) internal pure returns(uint256) {\n        return a * b;\n    }\n\n    function main(uint256 a, uint256 b, uint256 c) private returns(uint256) {\n        // Assigning function pointer based on 'c' value\n        if (c > 42) {\n            operation = addition;\n        } else if (c == 42) {\n            operation = subtraction;\n        } else {\n            operation = multiplication;\n        }\n        return operation(a, b);\n    }\n\n    function first() public returns(uint256) {\n        return main(84, 2, 43) + main(23, 23, 42) - main(22, 2, 3);\n    }\n\n    function second() public returns(uint256) {\n        return main(15, 10, 43) + main(30, 10, 42) - main(3, 1, 3);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/call_to_zero_initialized_function_type_legacy_evm.sol":{"content":"//! { \"targets\": [ \"evm\" ], \"modes\": [ \"I\", \"Y\" ], \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"t\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n// This tests is an addendum to `tests/solidity/ethereum/functionTypes/call_to_zero_initialized_function_type_legacy.sol`\n// and covers the return data for Solidity >=0.8 where the error is not empty.\n\ncontract Other {\n    function addTwo(uint256 x) public returns (uint256) {\n        return x + 2;\n    }\n}\n\ncontract Test {\n    function (function (uint) external returns (uint)) internal returns (uint) ev;\n    function (uint) external returns (uint) x;\n\n    function store(function(uint) external returns (uint) y) public {\n         x = y;\n    }\n\n    function eval(function(uint) external returns (uint) y) public returns (uint) {\n        return y(7);\n    }\n\n    function t() public returns (uint256) {\n        this.store((new Other()).addTwo);\n        // This call panics\n        return ev(x);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/call_to_zero_initialized_function_type_legacy.sol":{"content":"//! { \"targets\": [ \"eravm\" ], \"modes\": [ \"E\", \"I\" ], \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"t\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n// This tests is an addendum to `tests/solidity/ethereum/functionTypes/call_to_zero_initialized_function_type_legacy.sol`\n// and covers the return data for Solidity >=0.8 where the error is not empty.\n\ncontract Other {\n    function addTwo(uint256 x) public returns (uint256) {\n        return x + 2;\n    }\n}\n\ncontract Test {\n    function (function (uint) external returns (uint)) internal returns (uint) ev;\n    function (uint) external returns (uint) x;\n\n    function store(function(uint) external returns (uint) y) public {\n         x = y;\n    }\n\n    function eval(function(uint) external returns (uint) y) public returns (uint) {\n        return y(7);\n    }\n\n    function t() public returns (uint256) {\n        this.store((new Other()).addTwo);\n        // This call panics\n        return ev(x);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/calling_uninitialized_function_in_detail.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"t\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function() returns (uint256) internal x;\n    int256 mutex;\n\n    function t() public returns (uint256) {\n        if (mutex > 0) {\n            assembly {\n                mstore(0, 7)\n                return(0, 0x20)\n            }\n        }\n        mutex = 1;\n        // Avoid re-executing this function if we jump somewhere.\n        x();\n        return 2;\n    }\n}\n\n// ====\n// compileToEwasm: also\n// ----\n// t() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/calling_uninitialized_function_through_array.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"t\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    int256 mutex;\n\n    function t() public returns (uint256) {\n        if (mutex > 0) {\n            assembly {\n                mstore(0, 7)\n                return(0, 0x20)\n            }\n        }\n        mutex = 1;\n        // Avoid re-executing this function if we jump somewhere.\n        function() internal returns (uint)[200] memory x;\n        x[0]();\n        return 2;\n    }\n}\n// ====\n// compileToEwasm: also\n// ----\n// t() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/copy_internal_function_array_to_storage.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one\",\n//!             \"calldata\": [],\n//!             \"expected\": [ \"3\" ]\n//!         },\n//!         {\n//!             \"method\": \"two\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function() internal returns (uint)[20] x;\n    int256 mutex;\n\n    function one() public returns (uint256) {\n        function() internal returns (uint)[20] memory xmem;\n        x = xmem;\n        return 3;\n    }\n\n    function two() public returns (uint256) {\n        if (mutex > 0) return 7;\n        mutex = 1;\n        // If this test fails, it might re-execute this function.\n        x[0]();\n        return 2;\n    }\n}\n\n// ====\n// compileToEwasm: also\n// ----\n// one() -> 3\n// gas legacy: 140253\n// gas legacyOptimized: 140093\n// two() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/data_structures.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"double\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"calculate\",\n//!             \"calldata\": [\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000000040\",\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000000006\",\n//!                 \"0x646F75626C650000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x000000000000000000000000000000000000000000000000000000000000000a\"\n//!     ]\n//! }, {\n//!     \"name\": \"triple\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"calculate\",\n//!             \"calldata\": [\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000000040\",\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000000006\",\n//!                 \"0x747269706C650000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x000000000000000000000000000000000000000000000000000000000000000f\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    mapping (string => function (uint) internal pure returns (uint)) functions;\n\n    constructor() public {\n        functions[\"double\"] = double;\n        functions[\"triple\"] = triple;\n    }\n\n    function calculate(string memory funcName, uint num) public view returns (uint) {\n        return functions[funcName](num);\n    }\n\n    function double(uint num) internal pure returns (uint) {\n        return num * 2;\n    }\n\n    function triple(uint num) internal pure returns (uint) {\n        return num * 3;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/hash.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    uint8 constant ARRAY_SIZE = 40;\n    uint128 constant P = 257;\n    uint128 constant MODULO = 1000000007;\n\n    function hashRecursive(uint8[ARRAY_SIZE] memory array, uint8 i, uint8 end, uint128 h) private pure returns(uint128) {\n        if (i >= end) {\n            return h;\n        }\n        h = (h * P + array[i]) % MODULO;\n        return hashRecursive(array, i + 1, end, h);\n    }\n\n    function hash(uint8[ARRAY_SIZE] memory array, uint8 begin, uint8 end) private pure returns(uint128) {\n        return hashRecursive(array, begin, end, 0);\n    }\n\n    function compareRecursive(uint8[ARRAY_SIZE] memory array, uint8 i, bool result) private pure returns(bool) {\n        if (i >= ARRAY_SIZE/2 || !result) {\n            return result;\n        }\n        result = result && hash(array, 0, i + 1) == hash(array, ARRAY_SIZE/2, ARRAY_SIZE/2 + i + 1)\n                        && hash(array, i, ARRAY_SIZE/2) == hash(array, i + ARRAY_SIZE/2, ARRAY_SIZE);\n        return compareRecursive(array, i + 1, result);\n    }\n\n    function complex() public pure returns(uint64) {\n        uint8[ARRAY_SIZE] memory array;\n        // generate array where first half equals second\n        for(uint8 i = 0; i < ARRAY_SIZE; i++) {\n            array[i] = (i % (ARRAY_SIZE / 2)) * (255 / (ARRAY_SIZE / 2 - 1));\n        }\n\n        bool result = compareRecursive(array, 0, true);\n\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/indirect.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"calculate\",\n//!             \"calldata\": [\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function (uint) internal pure returns (uint) funcPtr;\n    function (uint) internal view returns (uint) indirectFuncPtr;\n\n    constructor() public {\n        funcPtr = increment;\n        indirectFuncPtr = indirect;\n    }\n\n    function indirect(uint num) internal view returns (uint) {\n        return funcPtr(num);\n    }\n\n    function increment(uint num) internal pure returns (uint) {\n        return num + 1;\n    }\n\n    function calculate(uint num) public view returns (uint) {\n        return indirectFuncPtr(num);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/inherited_1.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"success\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"m\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"416\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract D {\n    function d0() internal pure returns (uint) { return 0xd0; }\n}\n\ncontract Test is D {\n    uint x;\n\n    function() internal pure returns (uint) fp;\n    function c0() internal pure returns (uint) { return 0xc0; }\n\n    constructor(int i) public {\n      if (i == 0) { fp = c0; }\n      if (i == 1) { fp = d0; }\n      x = fp();\n    }\n\n    function m() public view returns (uint) {\n      return x + fp();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/inherited_2.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"success\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"m\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"418\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract D {\n    function d0() internal pure returns (uint) { return 0xd0; }\n\n    function d1() internal pure returns (uint) { return 0xd1; }\n    function getD1() internal pure returns (function() internal pure returns (uint)) {\n        return d1;\n    }\n}\n\ncontract Test is D {\n    uint x;\n\n    function() internal pure returns (uint) fp;\n    function c0() internal pure returns (uint) { return 0xc0; }\n\n    constructor(int i) public {\n        if (i == 0) { fp = c0; }\n        if (i == 1) { fp = getD1(); }\n        x = fp();\n    }\n\n    function m() public view returns (uint) {\n        return x + fp();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/invalidInConstructor.sol":{"content":"\n//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract C {\n\n  function() internal storedFn;\n\n  bool flag;\n\n  constructor() public {\n    if (!flag) {\n      flag = true;\n      function() internal invalid;\n      storedFn = invalid;\n      invalid();\n    }\n  }\n  function f() public pure {}\n}\ncontract Test {\n  function f() public {\n    new C();\n  }\n}\n// ====\n// compileToEwasm: also\n// ----\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/invalidStoredInConstructor.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract C {\n\n  function() internal storedFn;\n\n  bool flag;\n\n  constructor() public {\n    if (!flag) {\n      flag = true;\n      function() internal invalid;\n      storedFn = invalid;\n      storedFn();\n    }\n  }\n  function f() public pure {}\n}\ncontract Test {\n  function f() public {\n    new C();\n  }\n}\n// ====\n// compileToEwasm: also\n// ----\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/many_arguments.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"entry\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function entry() public pure returns(uint64) {\n        uint8 p1 = 1;\n        uint16 p2 = 4;\n        uint32 p3 = 9;\n        uint64 p4 = 16;\n        uint72 p5 = 25;\n        uint80 p6 = 36;\n        uint8 i = 1;\n\n        if (test(i, p1, p2, p3, p4, p5, p6)) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function test(\n        uint8 param,\n        uint8 p1,\n        uint16 p2,\n        uint32 p3,\n        uint64 p4,\n        uint72 p5,\n        uint80 p6\n    )\n        private\n        pure\n        returns(bool)\n    {\n        bool result = true;\n        function (uint8, uint8, uint16, uint32, uint64, uint72, uint80) pure returns(uint256) funcPtr = main;\n        result = result && funcPtr(param, p1, p2, p3, p4, p5, p6) == param * param;\n        \n        if(param < 6){\n            result = result && test(param + 1, p1, p2, p3, p4, p5, p6);\n        }\n\n        if(param == 6) {\n            result = result && funcPtr(0, p1, p2, p3, p4, p5, p6) == 91;\n            result = result && funcPtr(16, p1, p2, p3, p4, p5, p6) == 91;\n        }\n\n        return result;\n    }\n\n    function main(\n        uint8 param,\n        uint8 p1,\n        uint16 p2,\n        uint32 p3,\n        uint64 p4,\n        uint72 p5,\n        uint80 p6\n    )\n        private\n        pure\n        returns(uint256 result)\n    {\n        if (param == 1) {\n            result = p1;\n        } else if (param == 2) {\n            result = p2;\n        } else if (param == 3) {\n            result = p3;\n        } else if (param == 4) {\n            result = p4;\n        } else if (param == 5) {\n            result = p5;\n        } else if (param == 6) {\n            result = p6;\n        } else {\n            result = p1 + p2 + p3 + p4 + p5 + p6;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/mixed_features_1.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"entry\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [ \"2\" ]\n//!         }\n//!     ],\n//!     \"expected\": [ \"16\" ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    struct Data {\n        uint256 a;\n        string b;\n        uint256 c;\n    }\n\n    function entry(uint256 x) public pure returns (uint256) {\n        Data memory data = Data(x, \"Test\", x * 2);\n        return function1(data, x, x);\n    }\n\n    function function1(Data memory data, uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return data.c;\n        } else {\n            data.a = data.a * 2;\n            return function2(data, a - 1, b);\n        }\n    }\n\n    function function2(Data memory data, uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            return data.a;\n        } else {\n            data.c = data.c * 2;\n            return function1(data, a, b - 1);\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/mixed_features_3.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"recursiveAction\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"initializeOracle\",\n//!             \"calldata\": []\n//!         },\n//!         {\n//!             \"method\": \"recursiveAction\",\n//!             \"calldata\": [\n//!                 \"10\",\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ \"320\" ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\npragma experimental ABIEncoderV2;\n\ncontract Oracle {\n    function getValue(uint256 val) public pure returns(uint256) {\n        return val * 2;\n    }\n}\n\ncontract Test {\n    Oracle oracle;\n\n    struct Data {\n        uint256 val;\n    }\n\n    function initializeOracle() public {\n        oracle = new Oracle();\n    }\n\n    function recursiveAction(Data memory data, uint8 depth) public returns (uint256) {\n        if (depth == 0) {\n            return data.val;\n        }\n        data.val = oracle.getValue(data.val);\n        return recursiveAction(data, depth - 1);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/person_balances.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"bitcoin\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"bitcoin\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ethereum\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"ethereum\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"litecoin\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"litecoin\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! }, {\n//!     \"name\": \"zcash\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"zcash\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"100\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    enum Month {\n        January,\n        February,\n        March,\n        April,\n        May,\n        June,\n        July,\n        August,\n        September,\n        October,\n        November,\n        December\n    }\n\n    struct Date {\n        uint16 year;\n        Month month;\n        uint8 day;\n    }\n\n    enum TokenId {\n        Bitcoin,\n        Ethereum,\n        Litecoin,\n        Zcash\n    }\n\n    uint8 constant TOKENS_COUNT = 4;\n\n    struct Balance {\n        TokenId tokenId;\n        uint256 balance;\n    }\n\n    struct Person {\n        uint256 id;\n        Date dateOfBirth;\n        Balance[TOKENS_COUNT] balances;\n    }\n\n    struct Result {\n        uint256 id;\n        uint256 sum;\n        Date dateOfBirth;\n    }\n\n    function bitcoin() public pure returns(uint64) {\n        return uint64(main(TokenId.Bitcoin).sum);\n    }\n\n    function ethereum() public pure returns(uint64) {\n        return uint64(main(TokenId.Ethereum).sum);\n    }\n\n    function litecoin() public pure returns(uint64) {\n        return uint64(main(TokenId.Litecoin).sum);\n    }\n\n    function zcash() public pure returns(uint64) {\n        return uint64(main(TokenId.Zcash).sum);\n    }\n\n    function mainRecursive(uint8 id, Person memory person, Result memory result, TokenId tokenId) private pure returns(Result memory) {\n        if (id >= TOKENS_COUNT) {\n            return result;\n        }\n        if (person.balances[id].tokenId == tokenId) {\n            result.sum += person.balances[id].balance;\n        }\n        return mainRecursive(id + 1, person, result, tokenId);\n    }\n\n    function main(TokenId tokenId) private pure returns(Result memory) {\n        Person memory person = Person({\n            id: 42,\n            dateOfBirth: Date({\n                year: 1994,\n                month: Month.March,\n                day: 16\n            }),\n            balances: [\n                Balance(TokenId.Bitcoin, 1),\n                Balance(TokenId.Ethereum, 10),\n                Balance(TokenId.Litecoin, 50),\n                Balance(TokenId.Zcash, 100)\n            ]\n        });\n\n        Result memory result = Result(person.id, 0, person.dateOfBirth);\n\n        return mainRecursive(0, person, result, tokenId);\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/sort/bubble.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"none\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ascending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"descending\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\", \"2\", \"1\", \"8\", \"10\", \"3\", \"5\", \"4\", \"9\", \"6\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    uint8 constant ARRAY_SIZE = 10;\n\n    enum Direction {\n        None,\n        Ascending,\n        Descending\n    }\n\n    // Comparison functions for ascending and descending order\n    function ascending(uint8 a, uint8 b) internal pure returns (bool) {\n        return a > b;\n    }\n\n    function descending(uint8 a, uint8 b) internal pure returns (bool) {\n        return a < b;\n    }\n\n    // Recursive bubble sort function\n    function bubbleSort(uint8[ARRAY_SIZE] memory array, uint8 start, function(uint8, uint8) internal pure returns (bool) compare) internal pure returns (uint8[ARRAY_SIZE] memory) {\n        if(start >= ARRAY_SIZE - 1) {\n            return array;\n        }\n        bool swapped = false;\n        for(uint8 i = 0; i < ARRAY_SIZE - start - 1; i++) {\n            if (compare(array[i], array[i + 1])) {\n                uint8 temp = array[i];\n                array[i] = array[i + 1];\n                array[i + 1] = temp;\n                swapped = true;\n            }\n        }\n        if(!swapped) {\n            return array;\n        }\n        return bubbleSort(array, start + 1, compare);\n    }\n\n    function main(uint8[ARRAY_SIZE] memory array, Direction direction) public pure returns(uint8[ARRAY_SIZE] memory) {\n        // Assign function pointer based on direction\n        function(uint8, uint8) internal pure returns (bool) compare;\n        if (direction == Direction.Ascending) {\n            compare = ascending;\n        } else if (direction == Direction.Descending) {\n            compare = descending;\n        } else {\n            return array;\n        }\n        return bubbleSort(array, 0, compare);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/store2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"run\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Test {\n\n  function() internal storedFn;\n  uint public x;\n\n  constructor() public {\n    uint _y1;\n    uint _y2;\n    uint _y3;\n    uint _y4;\n    uint _y5;\n    uint _y6;\n    uint _y7;\n    uint _y8;\n    uint _y9;\n    uint _y10;\n    uint _y11;\n    uint _y12;\n    uint _y13;\n    uint _y14;\n\n\n    function() internal invalid;\n    storedFn = invalid;\n  }\n\n  function run() public {\n    // this did not always cause revert in the past\n    storedFn();\n  }\n\n  function z() public {\n      x++;\n  }\n}\n// ====\n// compileToEwasm: also\n// ----\n// run() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/storeInConstructor.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000005100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     },\n//!     {\n//!         \"compiler_version\": \"<=0.7\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n\n  function() internal storedFn;\n\n  bool flag;\n\n  constructor() public {\n    function() internal invalid;\n    storedFn = invalid;\n  }\n  function f() public returns (uint) {\n    if (flag) return 2;\n    flag = true;\n    storedFn();\n  }\n}\n// ====\n// compileToEwasm: also\n// ----\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n// f() -> FAILURE, hex\"4e487b71\", 0x51\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/sum_oddness_conditional.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"200\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1275\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    // Function pointer for odd or even addition\n    function(uint256, uint256) internal pure returns (uint256) operation;\n\n    // Functions for odd and even number addition\n    function addIfOdd(uint256 i, uint256 result) internal pure returns(uint256) {\n        if (i % 2 != 0) {\n            return result + i;\n        }\n        return result;\n    }\n\n    function addIfEven(uint256 i, uint256 result) internal pure returns(uint256) {\n        if (i % 2 == 0) {\n            return result + i;\n        }\n        return result;\n    }\n\n    // Recursive function to perform addition\n    function mainRecursive(uint256 i, uint256 a, uint256 result) private returns(uint256) {\n        if (i > a) {\n            return result;\n        }\n        result = operation(i, result);\n        if (i > 50) {\n            return a;\n        } else {\n            return mainRecursive(i + 1, a, result);\n        }\n    }\n\n    function main(uint256 a, bool is_odd) private returns(uint256) {\n        // Assign function pointer based on 'is_odd' flag\n        if (is_odd) {\n            operation = addIfOdd;\n        } else {\n            operation = addIfEven;\n        }\n        if (a < 50) {\n            return a;\n        } else {\n            return mainRecursive(1, a, 0);\n        }\n    }\n\n    function first() public returns(uint256) {\n        return main(100, false) + main(100, true);\n    }\n\n    function second() public returns(uint256) {\n        return main(50, true) + main(50, false);\n    }\n}\n\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/sum_oddness_minimized.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"84\"\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function(uint256) internal pure returns (uint256) operation;\n\n    function stupidNoop(uint256 result) internal pure returns(uint256) {\n        return result;\n    }\n\n    function mainRecursive(uint256 i, uint256 a) private returns(uint256) {\n        if (i > a) {\n            return 42;\n        }\n        return mainRecursive(i + 1, a);\n    }\n\n    function main(uint256 a) private returns(uint256) {\n        // remove this\n        operation = stupidNoop;\n        return mainRecursive(1, a);\n    }\n\n    function first() public returns(uint256) {\n        // or one of these\n        return main(100) + main(100);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/internal_function_pointers/sum_oddness.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5050\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1275\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    // Function pointer for odd or even addition\n    function(uint256, uint256) internal pure returns (uint256) operation;\n\n    // Functions for odd and even number addition\n    function addIfOdd(uint256 i, uint256 result) internal pure returns(uint256) {\n        if (i % 2 != 0) {\n            return result + i;\n        }\n        return result;\n    }\n\n    function addIfEven(uint256 i, uint256 result) internal pure returns(uint256) {\n        if (i % 2 == 0) {\n            return result + i;\n        }\n        return result;\n    }\n\n    // Recursive function to perform addition\n    function mainRecursive(uint256 i, uint256 a, uint256 result) private returns(uint256) {\n        if (i > a) {\n            return result;\n        }\n        result = operation(i, result);\n        return mainRecursive(i + 1, a, result);\n    }\n\n    function main(uint256 a, bool is_odd) private returns(uint256) {\n        // Assign function pointer based on 'is_odd' flag\n        if (is_odd) {\n            operation = addIfOdd;\n        } else {\n            operation = addIfEven;\n        }\n        return mainRecursive(1, a, 0);\n    }\n\n    function first() public returns(uint256) {\n        return main(100, false) + main(100, true);\n    }\n\n    function second() public returns(uint256) {\n        return main(50, true) + main(50, false);\n    }\n}\n\n"},"contracts/era-compiler-tests/solidity/simple/linearity/linearity1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    address public a1 = a2;\n    address public a2 = address(0xff);\n\n    function f() public returns (uint256) {\n        assert(a1 == address(0));\n        return 0;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/linearity/linearity2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    address public a1 = a2;\n    address public a2 = address(0xff);\n\n    constructor() public {\n        a2 = address(this);\n    }\n\n    function f1() public returns (uint256) {\n        assert(a1 == address(0));\n        return 0;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/linearity/linearity3.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00000000000000000000000000000000000000ff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.8;\n\ncontract Test {\n    address public immutable a2;\n    address public a1 = address(0xaa);\n\n    constructor() {\n        a2 = address(0xff);\n        a1 = a2;\n    }\n\n    function f() public returns (address) {\n        return a1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/linearity/linearity4.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00000000000000000000000000000000000000ff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.8;\n\ncontract Test {\n    address public immutable a2 = address(0xff);\n    address public immutable a1;\n\n    constructor() {\n        a1 = a2;\n    }\n\n    function f() public returns (address) {\n        return a1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/match/enum.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    enum Language {\n        JABBERWOCKY,\n        ZINC,\n        RUST\n    }\n\n    function main(Language language) public pure returns(uint8) {\n        uint8 result;\n        assembly {\n            switch language\n            case 0 { result := 5 }\n            case 1 { result := 10 }\n            case 2 { result := 15 }\n        }\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/match/nested_scrutinee.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"100\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"200\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 result;\n        assembly {\n            let tmp := 0\n            switch witness\n            case 1 { tmp := 10 }\n            case 2 { tmp := 20 }\n            default { tmp := 30 }\n            switch tmp\n            case 10 { result := 100 }\n            case 20 { result := 200 }\n            default { result := 255 }\n        }\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/match/nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"20\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64\"\n//!     ]\n//! }, {\n//!     \"name\": \"another\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 result;\n        assembly {\n            switch witness\n            case 1 { result := 10 }\n            case 2 { result := 20 }\n            default {\n                switch witness\n                case 255 { result := 64 }\n                default { result := 42}\n            }\n        }\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/match/scrutinee_complex.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        uint8 result;\n        assembly {\n            switch add(witness, mul(witness, witness))\n            case 1 { result := 10 }\n            case 2 { result := 20 }\n            default {\n                switch add(witness, mul(witness, witness))\n                case 6 { result := 42 }\n                default { result := 64 }\n            }\n        }\n        return result;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/modular/addmod.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\",\n//!                 \"25\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<=0.4.20\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.4.21,<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\",\n//!                 \"25\",\n//!                 \"24\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"19\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\",\n//!                 \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint x, uint y, uint m) public pure returns(uint) {\n        return addmod(x, y, m);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/modular/mulmod.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"by_zero\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                \"1\",\r\n//!                \"2\",\r\n//!                \"0\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [ {\r\n//!         \"compiler_version\": \"<=0.4.20\",\r\n//!         \"return_data\": [\r\n//!             \"0\"\r\n//!         ],\r\n//!         \"exception\": false\r\n//!     }, {\r\n//!         \"compiler_version\": \">=0.4.21,<0.8\",\r\n//!         \"return_data\": [],\r\n//!         \"exception\": true\r\n//!     }, {\r\n//!         \"compiler_version\": \">=0.8\",\r\n//!         \"return_data\": [\r\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\r\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\r\n//!         ],\r\n//!         \"exception\": true\r\n//!     } ]\r\n//! }, {\r\n//!     \"name\": \"ordinar_zero\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                \"42\",\r\n//!                \"42\",\r\n//!                \"1764\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"ordinar_non_zero\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                \"41\",\r\n//!                \"2\",\r\n//!                \"40\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"2\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"overflow_minimal_zero\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\r\n//!                \"2\",\r\n//!                \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"overflow_minimal_non_zero\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\",\r\n//!                \"2\",\r\n//!                \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"overflow\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                \"0x1F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100\",\r\n//!                \"0x3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120\",\r\n//!                \"0x000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0x000000000000000000584D2AF1A1416B1F5F2B856DE5EE852CE4AB806250494C\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function main(uint x, uint y, uint m) public pure returns(uint) {\r\n        return mulmod(x, y, m);\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/addition_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-17\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"24536345643564564356456464543346521121\", \"145604837816904667375230839172537584606\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"24536345643564564356456464543346529121\", \"165604837816904667375230839172537584606\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-150141183460469231731687303715884097729\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"24536345643564564356456464543311212121\", \"145604837816904667375230839172572893607\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-170141183460469231731687303715884105728\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        return a + b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/addition_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-17\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"85\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"50\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-106\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"28\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-128\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        return a + b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/addition_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"67\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"155\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"200\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"44\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"156\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a + b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/division_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one_positives\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105727\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-56713727820156410577229101238628035242\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-56713727820156410577229101238628035242\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        return a / b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/division_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-127\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-128\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one_positives\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-127\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        return a / b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/division_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a / b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/exponentiation_i128_const.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"80\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"147808829414345923316083210206383297601\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"137198176105529391099388226870764377041\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"81\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-103144121322099306484875023187381681347\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_pow_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"340282366920938463463374607431768211455\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"113427455640312821154458202477256070485\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main(uint128 a) public pure returns(int128) {\n        return int128(-3) ** a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/exponentiation_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-3\", \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-64\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"11\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"16\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"12\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"115792089237316195423570985008687907853269984665640564039457584007913129639824\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_pow_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-2\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"0_max_pow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"1_max_pow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"1n_max_pow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main(int8 a, uint8 b) public pure returns(int8) {\n        return a ** b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/exponentiation_u8_const.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"128\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_pow_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main(uint8 a) public pure returns(uint8) {\n        return uint8(2) ** a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/exponentiation_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\", \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"225\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"16\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_pow_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"255\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"0_max_pow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"1_max_pow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a ** b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/multiplication_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303605884105727\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"220000000002\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"110141183460469231731687303715884105727\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-120000000000000000000000000000000000002\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\", \"10633823966279326983230456482242756608\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-170141183460469231731687303715884105728\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        return a * b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/multiplication_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-100\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"56\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-56\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-128\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        return a * b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/multiplication_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"210\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"51\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"244\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a * b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/negation_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"almost_min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a) public pure returns(int128) {\n        return -a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/negation_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-127\"\n//!     ]\n//! }, {\n//!     \"name\": \"almost_min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a) public pure returns(int8) {\n        return -a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/negation_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"200\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"56\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"129\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(int8) {\n        return -int8(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/remainder_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"zero_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"85070591730234615865843651857942052864\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"85070591730234615865843651857942052863\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105727\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        return a % b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/remainder_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"zero_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"63\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-127\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        return a % b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/remainder_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a % b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/subtraction_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-22\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-3435455454\", \"170141183460469231731687303714884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"170141183460469231731687303713448650275\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"170141183460469231731687303715884105727\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        return a - b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/subtraction_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-22\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-128\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-50\", \"100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"106\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"127\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        return a - b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/subtraction_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"17\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"150\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"206\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"255\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a - b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/unchecked/addition.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"234234234234235345\",\n//!                 \"54678987654356789765467\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"54679221888591024000812\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"23423423345345345123123123123123123345545344353453453478387258235834234235345\",\n//!                 \"94234122112121212124231231231231231233244155453453453478387258235834234235345\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1865456220150361823783369345666446725519515141266342917316932463755338830754\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        unchecked {\n            return a + b;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/unchecked/exponentiation.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ],\n//! \"comment\": \"solc 0.8.0 yul difference\",\n//! \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\",\n//!                 \"34\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1496577676626844588240573268701473812127674924007424\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2223223\",\n//!                 \"344313\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"100285653084869015597090712088097646536078582653240989835715781990963135627703\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        unchecked {\n            return a**b;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/unchecked/multiplication.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"234234234234235312121245\",\n//!                 \"54678987654356789765467\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"12807690801921469153105167065463058545818046415\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"23423423345345345123123123123123123345545344353453453478387258235834234235345\",\n//!                 \"94234122112121212124231231231231231233244155453453453478387258235834234235345\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"38667537138249720893092876154366217589949411349704857517271810159143137975457\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        unchecked {\n            return a * b;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/unchecked/subtraction.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"234234234234235312121245\",\n//!                 \"54678987654356789765467\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"179555246579878522355778\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"23423423345345345123123123123123123345545344353453453478387258235834234235345\",\n//!                 \"94234122112121212124231231231231231233244155453453453478387258235834234235345\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"44981390470540328422462876900579799965571173565640564039457584007913129639936\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        unchecked {\n            return a - b;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/unchecked/unchecked_try_catch1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f1\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    function f1() public returns (uint256) {\n        unchecked {\n            try this.f2() {\n                return f2() + 1;\n            } catch {}\n        }\n    }\n\n    function f2() public returns (uint256) {\n        uint256 b = 2 ** 256 - 1;\n        return b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/arithmetic/unchecked/unchecked_try_catch2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f1\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    function f1() public returns (uint256) {\n        unchecked {\n            try this.f2() returns (uint256 num) {\n                return num;\n            } catch {\n                return 5;\n            }\n        }\n    }\n\n    function f2() public returns (uint256) {\n        uint256 b = 2 ** 256 - 1;\n        return b + 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/addition_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-17\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"50000000000000000299999999999999999999\", \"120141183460469231431687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"120141183460469231431687303715884105728\", \"60000000000000000499999999999999999999\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-160141183460469231531687303715884105729\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"120141183460469231431687303715884105728\", \"50000000000000000300000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-170141183460469231731687303715884105728\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        int128 c = a;\n        c += b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/addition_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-17\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"85\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"50\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-106\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"28\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-128\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        int8 c = a;\n        c += b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/addition_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"67\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"155\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"200\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"44\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"156\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        uint8 c = a;\n        c += b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/division_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one_positives\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one_negatives\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105727\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-56713727820156410577229101238628035242\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-56713727820156410577229101238628035242\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        int128 c = a;\n        c /= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/division_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-127\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min_from_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-128\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one_positives\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one_negatives\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-127\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        int8 c = a;\n        c /= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/division_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        uint8 c = a;\n        c /= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/multiplication_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-110141183460469231731687303715884105727\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"120000000000000000000000000000000000002\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"110141183460469231731687303715884105727\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-120000000000000000000000000000000000002\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"21267647932558653966460912964485513216\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-170141183460469231731687303715884105728\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        int128 c = a;\n        c *= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/multiplication_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-126\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-100\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"56\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-56\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-128\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        int8 c = a;\n        c *= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/multiplication_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"210\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"51\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"244\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        uint8 c = a;\n        c *= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/remainder_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"zero_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"85070591730234615865843651857942052864\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"85070591730234615865843651857942052863\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105727\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        int128 c = a;\n        c %= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/remainder_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"min_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"zero_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divided\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_divider\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_remainder_negative_both\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-45\", \"-7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-3\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"63\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-127\", \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_negative_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"-3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        int8 c = a;\n        c %= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/remainder_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"max_by_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001200000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_remainder\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"48\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_next\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"49\", \"7\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        uint8 c = a;\n        c %= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/subtraction_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-22\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-69200000000000000000000000000000000000\", \"110141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"160941183460469231731687303715884105729\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"170141183460469231731687303715884105727\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(int128) {\n        int128 c = a;\n        c -= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/subtraction_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"64\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-22\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-128\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-50\", \"100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"106\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"127\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(int8) {\n        int8 c = a;\n        c -= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/assignment/subtraction_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"17\"\n//!     ]\n//! }, {\n//!     \"name\": \"to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"100\", \"150\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"206\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"255\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        uint8 c = a;\n        c -= b;\n        return c;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/and_u256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"24\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        return a & b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/and_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"24\", \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a & b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/not_u256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457584007913129639893\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(uint256) {\n        return ~a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/not_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"213\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_to_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(uint8) {\n        return ~a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/or_u256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"21\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"63\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        return a | b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/or_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"21\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"63\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a | b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_left/u256_min_to_max.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"57896044618658097711785492504343953926634992332820282019728792003956564819968\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(uint256) {\n        return a << 255;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_left/u256_ordinar.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"168\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(uint256) {\n        return a << 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_left/u8_min_to_max.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"128\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(uint8) {\n        return a << 7;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_left/u8_ordinar.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"168\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(uint8) {\n        return a << 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_right/u256_max_to_min.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"57896044618658097711785492504343953926634992332820282019728792003956564819968\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(uint256) {\n        return a >> 255;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_right/u256_ordinar.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"168\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(uint256) {\n        return a >> 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_right/u8_max_to_min.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(uint8) {\n        return a >> 7;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/shift_right/u8_ordinar.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"168\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(uint8) {\n        return a >> 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/xor_u256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"21\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"63\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) public pure returns(uint256) {\n        return a ^ b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/bitwise/xor_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"21\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"63\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(uint8) {\n        return a ^ b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/i128_to_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"214\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a) public pure returns(uint8) {\n        return uint8(uint128(a));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/i16_to_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-129\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"24\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-128\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-24\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int16 a) public pure returns(int8) {\n        return int8(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/i16_to_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"214\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"232\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int16 a) public pure returns(uint8) {\n        return uint8(uint16(a));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/i256_to_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105729\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-180141183460469231731687303715887105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"160141183460469231731687303715881105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"190141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-150141183460469231731687303715884105728\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 a) public pure returns(int128) {\n        return int128(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/i256_to_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"214\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"232\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 a) public pure returns(uint8) {\n        return uint8(uint256(a));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/i8_to_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"214\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a) public pure returns(uint8) {\n        return uint8(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/simple_casting.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"first\",\n//!             \"calldata\": [\n//!                 \"11\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"8\"\n//!         ],\n//!         \"exception\": false\n//!     } ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"second\",\n//!             \"calldata\": [\n//!                 \"11\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"return_data\": [\n//!             \"264\"\n//!         ]\n//!     } ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"third\",\n//!             \"calldata\": [\n//!                 \"195\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4e487b7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"70784\"\n//!         ],\n//!         \"exception\": false\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function first(uint8 _num) public returns (uint256) {\n        return _num * 24;\n    }\n\n    function second(uint8 _num) public returns (uint256) {\n        return _num * uint256(24);\n    }\n\n    function third(uint8 _num) public returns (uint256) {\n        return _num * 1 days;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/u16_to_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-128\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-24\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint16 a) public pure returns(int8) {\n        return int8(int16(a));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/u16_to_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"232\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint16 a) public pure returns(uint8) {\n        return uint8(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/u256_to_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"170141183460469231731687303715884105727\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-170141183460469231731687303715884105728\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"21270141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-167647932558653966460912964485513216000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(int128) {\n        return int128(int256(a));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/u256_to_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"232\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) public pure returns(uint8) {\n        return uint8(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/u8_to_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(int128) {\n        return int128(int16(uint16(a)));\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/casting/u8_to_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow_minimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"129\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-127\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"200\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-56\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a) public pure returns(int8) {\n        return int8(a);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/equals.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address a, address b) public pure returns(bool) {\n        return a == b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/greater_equals.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address a, address b) public pure returns(bool) {\n        return a >= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/greater.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address a, address b) public pure returns(bool) {\n        return a > b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/lesser_equals.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address a, address b) public pure returns(bool) {\n        return a <= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/lesser.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address a, address b) public pure returns(bool) {\n        return a < b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/not_equals.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address a, address b) public pure returns(bool) {\n        return a != b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/address/ternary.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\", \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"25\", \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"25\", \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\", \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(address tokenA, address tokenB) public pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/equals_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(bool) {\n        return a == b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/equals_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(bool) {\n        return a == b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/equals_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(bool) {\n        return a == b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/greater_equals_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(bool) {\n        return a >= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/greater_equals_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(bool) {\n        return a >= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/greater_equals_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(bool) {\n        return a >= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/greater_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(bool) {\n        return a > b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/greater_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(bool) {\n        return a > b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/greater_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(bool) {\n        return a > b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/lesser_equals_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(bool) {\n        return a <= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/lesser_equals_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(bool) {\n        return a <= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/lesser_equals_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(bool) {\n        return a <= b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/lesser_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(bool) {\n        return a < b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/lesser_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(bool) {\n        return a < b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/lesser_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(bool) {\n        return a < b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/not_equals_i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\", \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\", \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 a, int128 b) public pure returns(bool) {\n        return a != b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/not_equals_i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"-25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-42\", \"-42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\", \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\", \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 a, int8 b) public pure returns(bool) {\n        return a != b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/comparison/not_equals_u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_lesser\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_true_bigger\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"25\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\", \"42\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 a, uint8 b) public pure returns(bool) {\n        return a != b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/logical/and.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool a, bool b) public pure returns(bool) {\n        return a && b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/logical/not.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool a) public pure returns(bool) {\n        return !a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/logical/or.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool a, bool b) public pure returns(bool) {\n        return a || b;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/operator/logical/xor.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool a, bool b) public pure returns(bool) {\n        return (a && !b) || (!a && b);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/order/casted_declared_const.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"remainder_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"26\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 constant CONST = 3;\n\n    function main(uint32 witness) public pure returns(uint32) {\n        return witness / uint32(CONST);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/order/casted_inline_const.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"remainder_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"26\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint32 witness) public pure returns(uint32) {\n        return witness / uint32(3);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/order/casted_variable.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"remainder_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"26\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint32 witness) public pure returns(uint32) {\n        uint8 variable = 3;\n        return witness / uint32(variable);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/order/declared_const.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"remainder_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"26\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint32 constant CONST = 3;\n\n    function main(uint32 witness) public pure returns(uint32) {\n        return witness / CONST;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/order/inline_const.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"remainder_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"26\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint32 witness) public pure returns(uint32) {\n        return witness / 3;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/order/variable.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"remainder_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7\"\n//!     ]\n//! }, {\n//!     \"name\": \"remainder_two\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"26\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint32 witness) public pure returns(uint32) {\n        uint32 variable = 3;\n        return witness / variable;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-170141183460469231731687303715884105728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"170141183460469231731687303715884105727\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 witness) public pure returns(int128) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i16.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-32768\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"32767\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int16 witness) public pure returns(int16) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i248.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-226156424291633194186662080095093570025917938800079226639565593765455331328\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"226156424291633194186662080095093570025917938800079226639565593765455331327\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int248 witness) public pure returns(int248) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-57896044618658097711785492504343953926634992332820282019728792003956564819968\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"57896044618658097711785492504343953926634992332820282019728792003956564819967\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 witness) public pure returns(int256) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i32.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-2147483648\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"2147483647\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int32 witness) public pure returns(int32) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i64.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-9223372036854775808\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"9223372036854775807\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int64 witness) public pure returns(int64) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-128\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"127\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 witness) public pure returns(int8) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/u16.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"65535\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint16 witness) public pure returns(uint16) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/u248.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"452312848583266388373324160190187140051835877600158453279131187530910662655\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint248 witness) public pure returns(uint248) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/u256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 witness) public pure returns(uint256) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/u32.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"4294967295\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint32 witness) public pure returns(uint32) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/u64.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"18446744073709551615\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint64 witness) public pure returns(uint64) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/negative/u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"255\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        return witness - 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/overflow_decrement_increment.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256 public a = 2 ** 256 - 1;\n\n    function f() public returns (uint256) {\n        uint256 i = 2;\n        a += --(i);\n        return a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i128.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"170141183460469231731687303715884105727\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-170141183460469231731687303715884105728\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int128 witness) public pure returns(int128) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i16.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32767\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-32768\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int16 witness) public pure returns(int16) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i248.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"226156424291633194186662080095093570025917938800079226639565593765455331327\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-226156424291633194186662080095093570025917938800079226639565593765455331328\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int248 witness) public pure returns(int248) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"57896044618658097711785492504343953926634992332820282019728792003956564819967\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-57896044618658097711785492504343953926634992332820282019728792003956564819968\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 witness) public pure returns(int256) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i32.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2147483647\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-2147483648\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int32 witness) public pure returns(int32) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i64.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"9223372036854775807\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-9223372036854775808\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int64 witness) public pure returns(int64) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/i8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"127\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"-128\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int8 witness) public pure returns(int8) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/u16.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"65535\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint16 witness) public pure returns(uint16) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/u248.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"452312848583266388373324160190187140051835877600158453279131187530910662655\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint248 witness) public pure returns(uint248) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/u256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 witness) public pure returns(uint256) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/u32.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4294967295\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint32 witness) public pure returns(uint32) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/u64.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"18446744073709551615\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint64 witness) public pure returns(uint64) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/positive/u8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint8 witness) public pure returns(uint8) {\n        return witness + 1;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/overflow/underflow_increment_decrement.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!         ],\n//!         \"exception\": false\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    uint256 public a;\n\n    function f() public returns (uint256) {\n        uint256 i = 0;\n        a -= ++(i);\n        return a;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/pointer/adjacent_memory_cells.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"_default\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"_default\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function _default() public pure returns(uint8 result) {\r\n        uint16 ptr = 42 * 32;\r\n        assembly {\r\n            mstore(add(ptr, 0x20), 0)\r\n            mstore(add(ptr, 0x40), 42)\r\n            mstore(add(ptr, 0x60), 0)\r\n\r\n            result := add(mload(add(ptr, 0x20)), add(mload(add(ptr, 0x40)), mload(add(ptr, 0x60))))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/hash_map.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"simple\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"simple\",\n//!             \"calldata\": [\n//!                 \"10\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.11;\n\n// Hash map implementation with vector\ncontract Test {\n    function malloc(uint24 size) private pure returns(uint24 returnPointer) {\n        assembly {\n            returnPointer := mload(64)\n            mstore(64, add(returnPointer, mul(size, 32)))\n        }\n    }\n\n    // Map entry\n    struct Entry {\n        uint64 key;\n        uint64 value;\n    }\n\n    uint24 constant TYPE_SIZE = 2;\n\n    // Vector implementation\n    struct Vec {\n        uint24 ptr;\n        uint24 cap;\n        uint24 len;\n    }\n\n    function grow(Vec memory self) private pure returns(Vec memory) {\n        uint24 newCap = 0;\n        if (self.cap == 0) {\n            newCap = 1;\n        } else {\n            newCap = self.cap * 2;\n        }\n        uint24 newPtr = malloc(newCap * TYPE_SIZE);\n        for (uint24 i = 0; i < self.len; i++) {\n            assembly {\n                mstore(add(newPtr, mul(mul(i, TYPE_SIZE), 32)), mload(add(mload(self), mul(mul(i, TYPE_SIZE), 32))))\n                mstore(add(add(newPtr, mul(mul(i, TYPE_SIZE), 32)), 32), mload(add(add(mload(self), mul(mul(i, TYPE_SIZE), 32)), 32)))\n            }\n        }\n        self.ptr = newPtr;\n        self.cap = newCap;\n        return self;\n    }\n\n    function _new() private pure returns(Vec memory) {\n        return Vec(0, 0, 0);\n    }\n\n    function insert(Vec memory self, uint24 index, Entry memory val) private pure returns(Vec memory) {\n        if (self.cap == self.len) {\n            grow(self);\n        }\n\n        uint24 curr = self.len;\n        while (curr > index) {\n            assembly {\n                mstore(add(mload(self), mul(mul(curr, TYPE_SIZE), 32)), mload(sub(add(mload(self), mul(mul(curr, TYPE_SIZE), 32)), mul(32, TYPE_SIZE))))\n                mstore(add(add(mload(self), mul(mul(curr, TYPE_SIZE), 32)), 32), mload(add(sub(add(mload(self), mul(mul(curr, TYPE_SIZE), 32)), mul(32, TYPE_SIZE)), 32)))\n            }\n            curr -= 1;\n        }\n        assembly {\n            mstore(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), mload(val))\n            mstore(add(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), 32), mload(add(val, 32)))\n        }\n\n        self.len += 1;\n\n        return self;\n    }\n\n    function remove(Vec memory self, uint24 index) private pure returns(Vec memory) {\n        self.len--;\n        while (index < self.len) {\n            assembly {\n                mstore(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), mload(add(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), mul(32, TYPE_SIZE))))\n                mstore(add(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), 32), mload(add(add(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), mul(32, TYPE_SIZE)), 32)))\n            }\n            index += 1;\n        }\n        assembly {\n            mstore(add(mload(self), mul(mul(mload(add(self, 0x40)), TYPE_SIZE), 32)), 0)\n            mstore(add(add(mload(self), mul(mul(mload(add(self, 0x40)), TYPE_SIZE), 32)), 32), 0)\n        }\n        \n        return self;\n    }\n\n    function push(Vec memory self, Entry memory val) private pure returns(Vec memory) {\n        return insert(self, self.len, val);\n    }\n\n    function pop(Vec memory self) private pure returns(Vec memory) {\n        return remove(self, self.len - 1);\n    }\n\n    function get(Vec memory self, uint24 index) private pure returns(Entry memory result) {\n        assembly {\n            mstore(result, mload(add(mload(self), mul(mul(index, TYPE_SIZE), 32))))\n            mstore(add(result, 32), mload(add(add(mload(self), mul(mul(index, TYPE_SIZE), 32)), 32)))\n        }\n    }\n\n    uint24 constant CAP = 32;\n\n    // Hash map implementation\n    struct HashMap {\n        Vec[CAP] table;\n        uint24 len;\n    }\n\n    function newMap() private pure returns(HashMap memory) {\n        HashMap memory result;\n        for(uint24 i = 0; i < CAP; i++) {\n            result.table[i] = _new();\n        }\n        return result;\n    }\n\n    function contains_key(HashMap memory self, uint64 key) private pure returns(bool) {\n        uint64 hash = key % CAP;\n        for(uint24 i = 0; i < self.table[hash].len; i++) {\n            if (get(self.table[hash], i).key == key) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function insert(HashMap memory self, uint64 key, uint64 value) private pure returns(HashMap memory) {\n        if (contains_key(self, key)) {\n            return self;\n        }\n        self.len += 1;\n        uint64 hash = key % CAP;\n        push(self.table[hash], Entry(key, value));\n        return self;\n    }\n\n    function remove(HashMap memory self, uint64 key) private pure returns(HashMap memory) {\n        uint64 hash = key % CAP;\n        uint24 i = 0;\n        while (i < self.table[hash].len) {\n            if (get(self.table[hash], i).key == key) {\n                remove(self.table[hash], i);\n                self.len -= 1;\n                break;\n            }\n            i += 1;\n        }\n        return self;\n    }\n\n    function get(HashMap memory self, uint64 key) private pure returns(uint64) {\n        uint64 hash = key % CAP;\n        for (uint24 i = 0; i < self.table[hash].len; i++) {\n            if (get(self.table[hash], i).key == key) {\n                return get(self.table[hash], i).value;\n            }\n        }\n        return 0;\n    }\n\n    function simple(uint64 key, uint64 value) public pure returns(uint64) {\n        HashMap memory map = newMap();\n        insert(map, key, value);\n        return get(map, key);\n    }\n\n    function complex() public pure returns(uint64) {\n        HashMap memory map = newMap();\n        for(uint8 _i = 0; _i < 5; _i++) {\n            insert(map, _i, 5 - _i);\n        }\n        // 0 - 4\n        if (map.len != 5) {\n            return 0;\n        }\n        uint64 i = 0;\n        while (i < 5) {\n            remove(map, i);\n            i += 2;\n        }\n        // 1, 3\n        if (map.len != 2) {\n            return 0;\n        }\n        i = 0;\n        while (i < 5) {\n            insert(map, i, 5 - i);\n            i += 3;\n        }\n        // 0, 1, 3\n        if (map.len != 3) {\n            return 0;\n        }\n        bool result = true;\n        for (uint8 key = 0; key < 5; key++) {\n            if (key % 2 == 1 || key % 3 == 0) {\n                result = result && contains_key(map, key);\n                result = result && get(map, key) == 5 - key;\n            } else {\n                result = result && !contains_key(map, key);\n            }\n        }\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/inlined_malloc.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"9\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function main() public pure returns(uint8) {\r\n        uint24 memory_pointer = 2 * 32;\r\n        assembly {\r\n            mstore(memory_pointer, 128)\r\n        }\r\n\r\n        uint24 pointer_1;\r\n        assembly {\r\n            let return_pointer := mload(memory_pointer)\r\n            mstore(memory_pointer, add(return_pointer, 32))\r\n            pointer_1 := return_pointer\r\n        }\r\n\r\n        uint24 pointer_2;\r\n        assembly {\r\n            let return_pointer := mload(memory_pointer)\r\n            mstore(memory_pointer, add(return_pointer, 32))\r\n            pointer_2 := return_pointer\r\n        }\r\n\r\n        return uint8(pointer_1 / 32) + uint8(pointer_2 / 32);\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/pointer/large_offset.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"complex\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"complex\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"10\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// Report https://linear.app/matterlabs/issue/CPR-175/bug-with-pointers\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function complex() public pure returns(uint64 result) {\r\n        uint24 ptr = 9216 * 32; // for 9215 and less it works\r\n        assembly {\r\n            mstore(ptr, 10)\r\n            result := mload(ptr)\r\n        }\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/pointer/malloc.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"9\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function malloc(uint16 size) private pure returns(uint24) {\r\n        uint24 memory_pointer = 2 * 32;\r\n        uint24 return_pointer;\r\n        assembly {\r\n            return_pointer := mload(memory_pointer)\r\n            mstore(memory_pointer, add(return_pointer, mul(size, 32)))\r\n        }\r\n        return return_pointer;\r\n    }\r\n\r\n    function main() public pure returns(uint8) {\r\n        uint24 memory_pointer = 2 * 32;\r\n        assembly {\r\n            mstore(memory_pointer, 0x80)\r\n        }\r\n\r\n        return uint8(malloc(1) / 32) + uint8(malloc(1) / 32);\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_malloc_consequent.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"20\", \"22\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function malloc(uint16 size) private pure returns(uint24) {\r\n        uint24 memory_pointer = 2 * 32;\r\n        uint24 return_pointer;\r\n        assembly {\r\n            return_pointer := mload(memory_pointer)\r\n            mstore(memory_pointer, add(return_pointer, mul(size, 32)))\r\n        }\r\n        return return_pointer;\r\n    }\r\n\r\n    function main(uint8 a, uint8 b) public pure returns(uint8 result) {\r\n        uint24 memory_pointer = 2 * 32;\r\n        assembly {\r\n            mstore(memory_pointer, 0x80)\r\n        }\r\n\r\n        uint24 pointer_a = malloc(1);\r\n        uint24 pointer_b = malloc(1);\r\n\r\n        assembly {\r\n            mstore(pointer_a, a)\r\n            mstore(pointer_b, b)\r\n            result := add(mload(pointer_a), mload(pointer_b))\r\n        }\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_malloc.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"default\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"10\", \"15\", \"17\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function malloc(uint16 size) private pure returns(uint16 returnPointer) {\r\n        uint16 memoryPointer = 2 * 32;\r\n        size *= 32;\r\n        assembly {\r\n            returnPointer := mload(memoryPointer)\r\n            mstore(memoryPointer, add(returnPointer, size))\r\n        }\r\n    }\r\n\r\n    function main(uint8 a, uint8 b, uint8 c) public pure returns(uint8 result) {\r\n        uint16 memoryPointer = 2 * 32;\r\n        assembly {\r\n            mstore(memoryPointer, 128)\r\n        }\r\n        uint16 pointerA = malloc(1);\r\n        assembly {\r\n            mstore(pointerA, a)\r\n        }\r\n        uint16 pointerB = malloc(1);\r\n        assembly {\r\n            mstore(pointerB, b)\r\n        }\r\n        uint16 pointerC = malloc(1);\r\n        assembly {\r\n            mstore(pointerC, c)\r\n        }\r\n        assembly {\r\n            result := add(mload(pointerA), add(mload(pointerB), mload(pointerC)))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_multiple.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"5\", \"42\",\r\n//!                 \"10\", \"21\",\r\n//!                 \"15\", \"63\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"126\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"101\", \"2\",\r\n//!                 \"102\", \"4\",\r\n//!                 \"103\", \"6\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"12\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"43\", \"1\",\r\n//!                 \"42\", \"1\",\r\n//!                 \"41\", \"1\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"3\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function main(\r\n        uint16 address1,\r\n        uint8 value1,\r\n        uint16 address2,\r\n        uint8 value2,\r\n        uint16 address3,\r\n        uint8 value3\r\n    )\r\n        public\r\n        pure\r\n        returns(uint8 result)\r\n    {\r\n        uint16 pointer1 = address1 * 32;\r\n        assembly {\r\n            mstore(pointer1, value1)\r\n        }\r\n        \r\n        uint16 pointer2 = address2 * 32;\r\n        assembly {\r\n            mstore(pointer2, value2)\r\n        }\r\n        \r\n        uint16 pointer3 = address3 * 32;\r\n        assembly {\r\n            mstore(pointer3, value3)\r\n        }\r\n\r\n        assembly {\r\n            result := add(mload(pointer1), add(mload(pointer2), mload(pointer3)))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_offset_negative.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"84\", \"21\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"21\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"42\", \"42\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"21\", \"84\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"84\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function main(uint16 _address, uint8 value) public pure returns(uint8 result) {\r\n        uint16 pointer = (_address - 7) * 32;\r\n        assembly {\r\n            mstore(sub(pointer, add(0x60, 0x80)), value)\r\n            result := mload(sub(pointer, sub(0x140, 0x60)))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_offset_positive.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"84\", \"21\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"21\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"42\", \"42\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"21\", \"84\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"84\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function main(uint16 _address, uint8 value) public pure returns(uint8 result) {\r\n        uint16 pointer = (_address + 7) * 32;\r\n        assembly {\r\n            mstore(add(pointer, add(0x60, 0x80)), value)\r\n            result := mload(add(pointer, sub(0x140, 0x60)))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_separate_fields_aligned.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"1\", \"2\", \"3\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"6\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"42\", \"21\", \"84\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"147\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"99\", \"66\", \"33\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"198\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    struct Data {\r\n        uint256 a;\r\n        uint256 b;\r\n        uint256 c;\r\n    }\r\n\r\n    function main(uint256 a, uint256 b, uint256 c) public pure returns(uint256 result) {\r\n        Data memory data = Data(a, b, c);\r\n        assembly {\r\n            result := add(mload(data), add(mload(add(data, 0x20)), mload(add(data, 0x40))))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_separate_fields_unaligned.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"1\", \"2\", \"3\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"6\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"42\", \"21\", \"84\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"147\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"99\", \"66\", \"33\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"198\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    struct Data {\r\n        uint32 a;\r\n        uint32 b;\r\n        uint32 c;\r\n    }\r\n\r\n    function main(uint32 a, uint32 b, uint32 c) public pure returns(uint32 result) {\r\n        Data memory data = Data(a, b, c);\r\n        assembly {\r\n            result := add(mload(data), add(mload(add(data, 0x20)), mload(add(data, 0x40))))\r\n        }\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read_wrapped.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"84\", \"21\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"21\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"42\", \"42\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"21\", \"84\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"84\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    struct Wrapper {\r\n        uint16 pointer;\r\n    }\r\n\r\n    function main(uint16 _address, uint8 value) public pure returns(uint8 result) {\r\n        Wrapper memory wrapper = Wrapper(_address * 32);\r\n        assembly {\r\n            mstore(mload(wrapper), value)\r\n            result := mload(mload(wrapper))\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/store_read.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"one\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"84\", \"21\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"21\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"two\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"42\", \"42\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"42\"\r\n//!     ]\r\n//! }, {\r\n//!     \"name\": \"three\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"21\", \"84\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"84\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    function main(uint16 _address, uint8 value) public pure returns(uint8 result) {\r\n        uint16 pointer = _address * 32;\r\n        assembly {\r\n            mstore(pointer, value)\r\n            result := mload(pointer)\r\n        }\r\n    }\r\n}"},"contracts/era-compiler-tests/solidity/simple/pointer/vector_minimal.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"simple\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"simple\",\r\n//!             \"calldata\": [\r\n//!                 \"10\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"10\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.24;\r\n\r\ncontract Test {\r\n    function simple(uint64 value) public pure returns(uint64) {\r\n        (uint24 ptr, uint16 len) = _new(); // if init without separate function it works\r\n\r\n        assembly {\r\n            mstore(ptr, value)\r\n        }\r\n\r\n        len += 1; // if comment this line it will work\r\n        return get(ptr, len, 0); // if get without function (just *vec.0) it works\r\n    }\r\n\r\n    function _new() private pure returns(uint24, uint16) {\r\n        uint24 ptr = 128;\r\n        assembly {\r\n            mstore(64, ptr)\r\n        }\r\n        return (ptr, 0);\r\n    }\r\n\r\n    function get(uint24 ptr, uint16 len, uint16 index) private pure returns(uint64 result) {\r\n        assembly {\r\n            result := mload(add(ptr, mul(index, 32)))\r\n        }\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/pointer/vector.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"simple\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"simple\",\n//!             \"calldata\": [\n//!                 \"10\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function malloc(uint24 size) private pure returns(uint24 returnPointer) {\n        assembly {\n            returnPointer := mload(64)\n            mstore(64, add(returnPointer, mul(size, 32)))\n        }\n    }\n\n    struct Vec {\n        uint24 ptr;\n        uint24 cap;\n        uint24 len;\n    }\n\n    function grow(Vec memory self) private pure returns(Vec memory) {\n        uint24 newCap = 0;\n        if (self.cap == 0) {\n            newCap = 1;\n        } else {\n            newCap = self.cap * 2;\n        }\n        uint24 newPtr = malloc(newCap);\n        for (uint24 i = 0; i < self.len; i++) {\n            assembly {\n                mstore(add(newPtr, mul(i, 32)), mload(add(mload(self), mul(i, 32))))\n            }\n        }\n        self.ptr = newPtr;\n        self.cap = newCap;\n        return self;\n    }\n\n    function _new() private pure returns(Vec memory) {\n        return Vec(0, 0, 0);\n    }\n\n    function insert(Vec memory self, uint24 index, uint64 val) private pure returns(Vec memory) {\n        if (self.cap == self.len) {\n            grow(self);\n        }\n\n        uint24 curr = self.len;\n        while (curr > index) {\n            assembly {\n                mstore(add(mload(self), mul(curr, 32)), mload(sub(add(mload(self), mul(curr, 32)), 32)))\n            }\n            curr -= 1;\n        }\n        assembly {\n            mstore(add(mload(self), mul(index, 32)), val)\n        }\n\n        self.len += 1;\n\n        return self;\n    }\n\n    function remove(Vec memory self, uint24 index) private pure returns(Vec memory) {\n        self.len--;\n        while (index < self.len) {\n            assembly {\n                mstore(add(mload(self), mul(index, 32)), mload(add(add(mload(self), mul(index, 32)), 32)))\n            }\n            index += 1;\n        }\n        assembly {\n            mstore(add(mload(self), mul(mload(add(self, 0x40)), 32)), 0)\n        }\n        \n        return self;\n    }\n\n    function push(Vec memory self, uint64 val) private pure returns(Vec memory) {\n        return insert(self, self.len, val);\n    }\n\n    function pop(Vec memory self) private pure returns(Vec memory) {\n        return remove(self, self.len - 1);\n    }\n\n    function get(Vec memory self, uint24 index) private pure returns(uint64 result) {\n        assembly {\n            result := mload(add(mload(self), mul(index, 32)))\n        }\n    }\n\n    function simple(uint64 value) public pure returns(uint64) {\n        Vec memory vec = _new();\n        push(vec, value);\n        return get(vec, 0);\n    }\n\n    function complex() public pure returns(uint64) {\n        Vec memory vec = _new();\n        bool result = true;\n\n        for(uint8 _i = 0; _i < 100; _i++) {\n            push(vec, _i);\n        }\n\n        //0 - 99\n        if (vec.len != 100) {\n            result = false;\n        }\n\n        uint24 i = 98;\n        while (true) {\n            remove(vec, i);\n            if (i == 0) {\n                break;\n            }\n            i -= 2;\n        }\n        // 1, 3, 5, 7,..., 99\n\n        if (vec.len != 50) {\n            result = false;\n        }\n        while (vec.len > 25) {\n            pop(vec);\n        }\n        // 1, 3, 5, 7,..., 49\n\n        if (vec.len != 25) {\n            result = false;\n        }\n        i = 0;\n        while (i < 50) {\n            insert(vec, i, i);\n            i += 2;\n        }\n\n        if (vec.len != 50) {\n            result = false;\n        }\n\n        for(uint8 ind = 0; ind < 50; ind++) {\n            if (get(vec, ind) != ind) {\n                result = false;\n            }\n        }\n\n        if (result) {\n            return 1;\n        } else {\n            return 0;\n        }\n    } \n}"},"contracts/era-compiler-tests/solidity/simple/recursion_keccak.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x58a83397571b0d9870872c4d00f5afa6430b9e161a4c5e3dec46b32657fca065\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.1;\n\ncontract Test {\n    function f() public returns (bytes32 res) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                abi.encode(\n                                    keccak256(\n                                        abi.encode(\n                                            keccak256(\n                                                abi.encode(\n                                                    keccak256(\n                                                        abi.encode(\n                                                            keccak256(\n                                                                abi.encode(\n                                                                    keccak256(\n                                                                        abi\n                                                                            .encode(\n                                                                                keccak256(\n                                                                                    abi\n                                                                                        .encode(\n                                                                                            keccak256(\n                                                                                                abi\n                                                                                                    .encode(\n                                                                                                        keccak256(\n                                                                                                            abi\n                                                                                                                .encode(\n                                                                                                                    keccak256(\n                                                                                                                        abi\n                                                                                                                            .encode(\n                                                                                                                                keccak256(\n                                                                                                                                    abi\n                                                                                                                                        .encode(\n                                                                                                                                            keccak256(\n                                                                                                                                                abi\n                                                                                                                                                    .encode(\n                                                                                                                                                        keccak256(\n                                                                                                                                                            abi\n                                                                                                                                                                .encode(\n                                                                                                                                                                    keccak256(\n                                                                                                                                                                        abi\n                                                                                                                                                                            .encode(\n                                                                                                                                                                                keccak256(\n                                                                                                                                                                                    abi\n                                                                                                                                                                                        .encode(\n                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                abi\n                                                                                                                                                                                                    .encode(\n                                                                                                                                                                                                        keccak256(\n                                                                                                                                                                                                            abi\n                                                                                                                                                                                                                .encode(\n                                                                                                                                                                                                                    keccak256(\n                                                                                                                                                                                                                        abi\n                                                                                                                                                                                                                            .encode(\n                                                                                                                                                                                                                                keccak256(\n                                                                                                                                                                                                                                    abi\n                                                                                                                                                                                                                                        .encode(\n                                                                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                                                                abi\n                                                                                                                                                                                                                                                    .encode(\n                                                                                                                                                                                                                                                        keccak256(\n                                                                                                                                                                                                                                                            abi\n                                                                                                                                                                                                                                                                .encode(\n                                                                                                                                                                                                                                                                    keccak256(\n                                                                                                                                                                                                                                                                        abi\n                                                                                                                                                                                                                                                                            .encode(\n                                                                                                                                                                                                                                                                                keccak256(\n                                                                                                                                                                                                                                                                                    abi\n                                                                                                                                                                                                                                                                                        .encode(\n                                                                                                                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                                                                                                                abi\n                                                                                                                                                                                                                                                                                                    .encode(\n                                                                                                                                                                                                                                                                                                        keccak256(\n                                                                                                                                                                                                                                                                                                            abi\n                                                                                                                                                                                                                                                                                                                .encode(\n                                                                                                                                                                                                                                                                                                                    keccak256(\n                                                                                                                                                                                                                                                                                                                        abi\n                                                                                                                                                                                                                                                                                                                            .encode(\n                                                                                                                                                                                                                                                                                                                                keccak256(\n                                                                                                                                                                                                                                                                                                                                    abi\n                                                                                                                                                                                                                                                                                                                                        .encode(\n                                                                                                                                                                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                                                                                                                                                                \"\"\n                                                                                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                )\n                                                                                                                                                                                                        )\n                                                                                                                                                                                                    )\n                                                                                                                                                                                            )\n                                                                                                                                                                                        )\n                                                                                                                                                                                )\n                                                                                                                                                                            )\n                                                                                                                                                                    )\n                                                                                                                                                                )\n                                                                                                                                                        )\n                                                                                                                                                    )\n                                                                                                                                            )\n                                                                                                                                        )\n                                                                                                                                )\n                                                                                                                            )\n                                                                                                                    )\n                                                                                                                )\n                                                                                                        )\n                                                                                                    )\n                                                                                            )\n                                                                                        )\n                                                                                )\n                                                                            )\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/recursion/euclidean.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"gcd_15_6\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"gcd\",\n//!             \"calldata\": [\n//!                 \"15\", \"6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"gcd_23_19\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"gcd\",\n//!             \"calldata\": [\n//!                 \"23\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"gcd_76800_15435\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"gcd\",\n//!             \"calldata\": [\n//!                 \"76800\", \"15435\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function gcd(uint64 a, uint64 b) public pure returns(uint64) {\n        if (b == 0) {\n            return a;\n        }\n\n        return gcd(b, a%b);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/recursion/factorial.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fact\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"fifth\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fact\",\n//!             \"calldata\": [\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"120\"\n//!     ]\n//! }, {\n//!     \"name\": \"twelfth\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fact\",\n//!             \"calldata\": [\n//!                 \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"479001600\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function fact(uint8 n) public pure returns(uint64) {\n        if (n == 0) {\n            return 1;\n        }\n\n        return fact(n - 1) * n;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/recursion/fibonacci.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fib\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"eighth\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fib\",\n//!             \"calldata\": [\n//!                 \"8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"21\"\n//!     ]\n//! }, {\n//!     \"name\": \"sixteenth\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"fib\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"987\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function fib(uint8 n) public pure returns(uint64) {\n        if (n <= 1) {\n            return n;\n        }\n\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/recursion/recursion_keccak.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x58a83397571b0d9870872c4d00f5afa6430b9e161a4c5e3dec46b32657fca065\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.1;\n\ncontract Test {\n    function f() public returns (bytes32 res) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                abi.encode(\n                                    keccak256(\n                                        abi.encode(\n                                            keccak256(\n                                                abi.encode(\n                                                    keccak256(\n                                                        abi.encode(\n                                                            keccak256(\n                                                                abi.encode(\n                                                                    keccak256(\n                                                                        abi\n                                                                            .encode(\n                                                                                keccak256(\n                                                                                    abi\n                                                                                        .encode(\n                                                                                            keccak256(\n                                                                                                abi\n                                                                                                    .encode(\n                                                                                                        keccak256(\n                                                                                                            abi\n                                                                                                                .encode(\n                                                                                                                    keccak256(\n                                                                                                                        abi\n                                                                                                                            .encode(\n                                                                                                                                keccak256(\n                                                                                                                                    abi\n                                                                                                                                        .encode(\n                                                                                                                                            keccak256(\n                                                                                                                                                abi\n                                                                                                                                                    .encode(\n                                                                                                                                                        keccak256(\n                                                                                                                                                            abi\n                                                                                                                                                                .encode(\n                                                                                                                                                                    keccak256(\n                                                                                                                                                                        abi\n                                                                                                                                                                            .encode(\n                                                                                                                                                                                keccak256(\n                                                                                                                                                                                    abi\n                                                                                                                                                                                        .encode(\n                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                abi\n                                                                                                                                                                                                    .encode(\n                                                                                                                                                                                                        keccak256(\n                                                                                                                                                                                                            abi\n                                                                                                                                                                                                                .encode(\n                                                                                                                                                                                                                    keccak256(\n                                                                                                                                                                                                                        abi\n                                                                                                                                                                                                                            .encode(\n                                                                                                                                                                                                                                keccak256(\n                                                                                                                                                                                                                                    abi\n                                                                                                                                                                                                                                        .encode(\n                                                                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                                                                abi\n                                                                                                                                                                                                                                                    .encode(\n                                                                                                                                                                                                                                                        keccak256(\n                                                                                                                                                                                                                                                            abi\n                                                                                                                                                                                                                                                                .encode(\n                                                                                                                                                                                                                                                                    keccak256(\n                                                                                                                                                                                                                                                                        abi\n                                                                                                                                                                                                                                                                            .encode(\n                                                                                                                                                                                                                                                                                keccak256(\n                                                                                                                                                                                                                                                                                    abi\n                                                                                                                                                                                                                                                                                        .encode(\n                                                                                                                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                                                                                                                abi\n                                                                                                                                                                                                                                                                                                    .encode(\n                                                                                                                                                                                                                                                                                                        keccak256(\n                                                                                                                                                                                                                                                                                                            abi\n                                                                                                                                                                                                                                                                                                                .encode(\n                                                                                                                                                                                                                                                                                                                    keccak256(\n                                                                                                                                                                                                                                                                                                                        abi\n                                                                                                                                                                                                                                                                                                                            .encode(\n                                                                                                                                                                                                                                                                                                                                keccak256(\n                                                                                                                                                                                                                                                                                                                                    abi\n                                                                                                                                                                                                                                                                                                                                        .encode(\n                                                                                                                                                                                                                                                                                                                                            keccak256(\n                                                                                                                                                                                                                                                                                                                                                \"\"\n                                                                                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                                        )\n                                                                                                                                                                                                                                )\n                                                                                                                                                                                                                            )\n                                                                                                                                                                                                                    )\n                                                                                                                                                                                                                )\n                                                                                                                                                                                                        )\n                                                                                                                                                                                                    )\n                                                                                                                                                                                            )\n                                                                                                                                                                                        )\n                                                                                                                                                                                )\n                                                                                                                                                                            )\n                                                                                                                                                                    )\n                                                                                                                                                                )\n                                                                                                                                                        )\n                                                                                                                                                    )\n                                                                                                                                            )\n                                                                                                                                        )\n                                                                                                                                )\n                                                                                                                            )\n                                                                                                                    )\n                                                                                                                )\n                                                                                                        )\n                                                                                                    )\n                                                                                            )\n                                                                                        )\n                                                                                )\n                                                                            )\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/recursion/recursive_functions_scoped.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"m0\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"110\" ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// solc < 0.6.0 doesn't recognize `leave`\npragma solidity >=0.6.0;\n\ncontract Test {\n  function m0() public pure returns (uint r) {\n    assembly {\n      {\n        function fib(ya) -> yr {\n          if lt(ya, 2) {\n            yr := ya\n            leave\n          }\n          yr := add(fib(sub(ya, 1)), fib(sub(ya, 2)))\n        }\n        r := fib(10)\n      }\n\n      {\n        function fib(ya) -> yr {\n          if lt(ya, 2) {\n            yr := ya\n            leave\n          }\n          yr := add(fib(sub(ya, 1)), fib(sub(ya, 2)))\n        }\n        r := add(r, fib(10))\n      }\n\n    }\n  }\n}\n"},"contracts/era-compiler-tests/solidity/simple/recursion/struct_delete_storage_nested_small.sol":{"content":"//! { \"modes\": [ \"E\" ], \"cases\": [ {\r\n//!     \"name\": \"default\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"f\",\r\n//!             \"calldata\": []\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0x3fffffffffffffffffffffffffffff00000000\",\r\n//!         \"0x3fffffffffffffffffffffffffffff00000000\",\r\n//!         \"0x3fffffffffffffffffffffffffffff00000000\"\r\n//!     ]\r\n//! } ] }\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// .slot is not recognized by solc <= 0.6\r\npragma solidity >=0.7.0;\r\n\r\ncontract Test {\r\n    struct S {\r\n        uint32 a;\r\n        S[] x;\r\n    }\r\n    S s;\r\n    function f() public returns (uint256 r1, uint256 r2, uint256 r3) {\r\n        assembly {\r\n            // 2 ** 150 - 1\r\n            sstore(s.slot, 1427247692705959881058285969449495136382746623)\r\n        }\r\n        s.a = 1;\r\n        s.x.push(); s.x.push();\r\n        S storage ptr1 = s.x[0];\r\n        S storage ptr2 = s.x[1];\r\n        assembly {\r\n            // 2 ** 150 - 1\r\n            sstore(ptr1.slot, 1427247692705959881058285969449495136382746623)\r\n            sstore(ptr2.slot, 1427247692705959881058285969449495136382746623)\r\n        }\r\n        s.x[0].a = 2; s.x[1].a = 3;\r\n        delete s;\r\n        assert(s.a == 0);\r\n        assert(s.x.length == 0);\r\n        assembly {\r\n            r1 := sload(s.slot)\r\n            r2 := sload(ptr1.slot)\r\n            r3 := sload(ptr2.slot)\r\n        }\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/applications/merkle_tree.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"getRoot\",\n//!             \"calldata\": [\n//!             ],\n//!             \"expected\": [\n//!                 \"0xcc086fcc038189b4641db2cc4f1de3bb132aefbd65d510d817591550937818c7\"\n//!             ]\n//!         }, {\n//!             \"method\": \"verify\",\n//!             \"calldata\": [\n//!                 \"0x80\",\n//!                 \"0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\",\n//!                 \"0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\",\n//!                 \"2\",\n//!                 \"2\",\n//!                 \"0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\",\n//!                 \"0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ncontract MerkleProof {\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint index\n    ) public pure returns (bool) {\n        bytes32 hash = leaf;\n\n        for (uint i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (index % 2 == 0) {\n                hash = keccak256(abi.encodePacked(hash, proofElement));\n            } else {\n                hash = keccak256(abi.encodePacked(proofElement, hash));\n            }\n\n            index = index / 2;\n        }\n\n        return hash == root;\n    }\n}\n\ncontract Test is MerkleProof {\n    bytes32[] public hashes;\n\n    constructor() {\n        string[4] memory transactions = [\n            \"alice -> bob\",\n            \"bob -> dave\",\n            \"carol -> alice\",\n            \"dave -> bob\"\n        ];\n\n        for (uint i = 0; i < transactions.length; i++) {\n            hashes.push(keccak256(abi.encodePacked(transactions[i])));\n        }\n\n        uint n = transactions.length;\n        uint offset = 0;\n\n        while (n > 0) {\n            for (uint i = 0; i < n - 1; i += 2) {\n                hashes.push(\n                    keccak256(\n                        abi.encodePacked(hashes[offset + i], hashes[offset + i + 1])\n                    )\n                );\n            }\n            offset += n;\n            n = n / 2;\n        }\n    }\n\n    function getRoot() public view returns (bytes32) {\n        return hashes[hashes.length - 1];\n    }\n\n    /* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/array_remove_by_shifting.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ncontract Test {\n    // [1, 2, 3] -- remove(1) --> [1, 3, 3] --> [1, 3]\n    // [1, 2, 3, 4, 5, 6] -- remove(2) --> [1, 2, 4, 5, 6, 6] --> [1, 2, 4, 5, 6]\n    // [1, 2, 3, 4, 5, 6] -- remove(0) --> [2, 3, 4, 5, 6, 6] --> [2, 3, 4, 5, 6]\n    // [1] -- remove(0) --> [1] --> []\n\n    uint[] public arr;\n\n    function remove(uint _index) public {\n        require(_index < arr.length, \"index out of bound\");\n\n        for (uint i = _index; i < arr.length - 1; i++) {\n            arr[i] = arr[i + 1];\n        }\n        arr.pop();\n    }\n\n    function test() external {\n        arr = [1, 2, 3, 4, 5];\n        remove(2);\n        // [1, 2, 4, 5]\n        assert(arr[0] == 1);\n        assert(arr[1] == 2);\n        assert(arr[2] == 4);\n        assert(arr[3] == 5);\n        assert(arr.length == 4);\n\n        arr = [1];\n        remove(0);\n        // []\n        assert(arr.length == 0);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/array_replace_from_end.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint[] public arr;\n\n    // Deleting an element creates a gap in the array.\n    // One trick to keep the array compact is to\n    // move the last element into the place to delete.\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n        // Remove the last element\n        arr.pop();\n    }\n\n    function test() public {\n        arr = [1, 2, 3, 4];\n\n        remove(1);\n        // [1, 4, 3]\n        assert(arr.length == 3);\n        assert(arr[0] == 1);\n        assert(arr[1] == 4);\n        assert(arr[2] == 3);\n\n        remove(2);\n        // [1, 4]\n        assert(arr.length == 2);\n        assert(arr[0] == 1);\n        assert(arr[1] == 4);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/array.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"push\",\n//!             \"calldata\": [\n//!                 \"10\"\n//!             ]\n//!         }, {\n//!             \"method\": \"getLength\",\n//!             \"calldata\": [\n//!             ],\n//!              \"expected\": [\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get(uint256)\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"push\",\n//!             \"calldata\": [\n//!                 \"37848742\"\n//!             ]\n//!         }, {\n//!             \"method\": \"push\",\n//!             \"calldata\": [\n//!                 \"523542342\"\n//!             ]\n//!         }, {\n//!             \"method\": \"pop\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"getLength\",\n//!             \"calldata\": [\n//!             ],\n//!              \"expected\": [\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"push\",\n//!             \"calldata\": [\n//!                 \"78347834\"\n//!             ]\n//!         }, {\n//!             \"method\": \"push\",\n//!             \"calldata\": [\n//!                 \"23515365423543245\"\n//!             ]\n//!         }, {\n//!             \"method\": \"remove\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"getLength\",\n//!             \"calldata\": [\n//!             ],\n//!              \"expected\": [\n//!                 \"3\"\n//!             ]\n//!         }, {\n//!             \"method\": \"getArr\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x20\",\n//!         \"3\",\n//!         \"37848742\",\n//!         \"0\",\n//!         \"23515365423543245\"\n//!     ]\n//! }, {\n//!     \"name\": \"popEmpty\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"pop\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000003100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"defaultGetter\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"arr2\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ],\n//!              \"expected\": [\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"arr2\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ],\n//!              \"expected\": [\n//!                 \"2\"\n//!             ]\n//!         }, {\n//!             \"method\": \"arr2\",\n//!             \"calldata\": [\n//!                 \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"fixedSizeArray\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"myFixedSizeArr\",\n//!             \"calldata\": [\n//!                 \"9\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"examples\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"examples\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ncontract Test {\n    // Several ways to initialize an array\n    uint[] public arr;\n    uint[] public arr2 = [1, 2, 3];\n    // Fixed sized array, all elements initialize to 0\n    uint[10] public myFixedSizeArr;\n\n    function get(uint i) public view returns (uint) {\n        return arr[i];\n    }\n\n    // Solidity can return the entire array.\n    // But this function should be avoided for\n    // arrays that can grow indefinitely in length.\n    function getArr() public view returns (uint[] memory) {\n        return arr;\n    }\n\n    function push(uint i) public {\n        // Append to array\n        // This will increase the array length by 1.\n        arr.push(i);\n    }\n\n    function pop() public {\n        // Remove last element from array\n        // This will decrease the array length by 1\n        arr.pop();\n    }\n\n    function getLength() public view returns (uint) {\n        return arr.length;\n    }\n\n    function remove(uint index) public {\n        // Delete does not change the array length.\n        // It resets the value at index to it's default value,\n        // in this case 0\n        delete arr[index];\n    }\n\n    function examples() external {\n        // create array in memory, only fixed size can be created\n        uint[] memory a = new uint[](5);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/calling_parent_contracts.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"foo\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"foo\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"12\",\n//!                     \"0x432e666f6f2063616c6c65640000000000000000000000000000000000000000\"\n//!                 ]\n//!             }, {\n//!                 \"topics\": [\n//!                     \"0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"12\",\n//!                     \"0x412e666f6f2063616c6c65640000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"bar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"bar\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"12\",\n//!                     \"0x432e6261722063616c6c65640000000000000000000000000000000000000000\"\n//!                 ]\n//!             }, {\n//!                 \"topics\": [\n//!                     \"0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"12\",\n//!                     \"0x422e6261722063616c6c65640000000000000000000000000000000000000000\"\n//!                 ]\n//!             }, {\n//!                 \"topics\": [\n//!                     \"0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"12\",\n//!                     \"0x412e6261722063616c6c65640000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/* Inheritance tree\n   A\n /  \\\nB   C\n \\ /\n  D\n*/\n\ncontract A {\n    // This is called an event. You can emit events from your function\n    // and they are logged into the transaction log.\n    // In our case, this will be useful for tracing function calls.\n    event Log(string message);\n\n    function foo() public virtual {\n        emit Log(\"A.foo called\");\n    }\n\n    function bar() public virtual {\n        emit Log(\"A.bar called\");\n    }\n}\n\ncontract B is A {\n    function foo() public virtual override {\n        emit Log(\"B.foo called\");\n        A.foo();\n    }\n\n    function bar() public virtual override {\n        emit Log(\"B.bar called\");\n        super.bar();\n    }\n}\n\ncontract C is A {\n    function foo() public virtual override {\n        emit Log(\"C.foo called\");\n        A.foo();\n    }\n\n    function bar() public virtual override {\n        emit Log(\"C.bar called\");\n        super.bar();\n    }\n}\n\ncontract Test is B, C {\n    // Try:\n    // - Call D.foo and check the transaction logs.\n    //   Although D inherits A, B and C, it only called C and then A.\n    // - Call D.bar and check the transaction logs\n    //   D called C, then B, and finally A.\n    //   Although super was called twice (by B and C) it only called A once.\n\n    function foo() public override(B, C) {\n        super.foo();\n    }\n\n    function bar() public override(B, C) {\n        super.bar();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/constants.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"address\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"MY_ADDRESS\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc\"\n//!     ]\n//! }, {\n//!     \"name\": \"uint\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"MY_UINT\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"123\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    // coding convention to uppercase constant variables\n    address public constant MY_ADDRESS = 0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc;\n    uint public constant MY_UINT = 123;\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/data_locations.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"g\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"g\",\n//!             \"calldata\": [\n//!                 \"0x20\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x20\",\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"h\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"h\",\n//!             \"calldata\": [\n//!                 \"0x20\",\n//!                 \"5\",\n//!                 \"1\", \"2\", \"3\", \"4\", \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ncontract Test {\n    uint[] public arr;\n    mapping(uint => address) map;\n    struct MyStruct {\n        uint foo;\n    }\n    mapping(uint => MyStruct) myStructs;\n\n    function f() public {\n        // call _f with state variables\n        _f(arr, map, myStructs[1]);\n\n        // get a struct from a mapping\n        MyStruct storage myStruct = myStructs[1];\n        // create a struct in memory\n        MyStruct memory myMemStruct = MyStruct(0);\n    }\n\n    function _f(\n        uint[] storage _arr,\n        mapping(uint => address) storage _map,\n        MyStruct storage _myStruct\n    ) internal {\n        // do something with storage variables\n    }\n\n    // You can return memory variables\n    function g(uint[] memory _arr) public returns (uint[] memory) {\n        // do something with memory array\n    }\n\n    function h(uint[] calldata _arr) external {\n        // do something with calldata array\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/enum.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ],\n//!              \"expected\": [\n//!                 \"0\"\n//!             ]\n//!         }, {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"status\",\n//!             \"calldata\": [\n//!             ],\n//!              \"expected\": [\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"cancel\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ],\n//!              \"expected\": [\n//!                 \"4\"\n//!             ]\n//!         }, {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"invalidEnumValue\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// These are two different situations: Conversion failure from integer to enum in user-supplied code results\n// in Panic(0x21), while ABI-decoding inputs is not a user-supplied conversion: We have to expect that input data is\n// invalid and thus the ABI decoding code only uses Error() reverts or their \"shorter\" version\n// (when --revert-strings is set to default) where the error data is completely empty. On the other hand,\n// if you forcefully convert an integer to an enum in user-code, the idea is that you already checked that the\n// conversion will work out and thus avoid a panic error.\n//\n// https://linear.app/matterlabs/issue/CPR-370/empty-error-for-invalid-enum-value\n// https://github.com/ethereum/solidity/issues/12368\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    // Enum representing shipping status\n    enum Status {\n        Pending,\n        Shipped,\n        Accepted,\n        Rejected,\n        Canceled\n    }\n\n    // Default value is the first element listed in\n    // definition of the type, in this case \"Pending\"\n    Status public status;\n\n    // Returns uint\n    // Pending  - 0\n    // Shipped  - 1\n    // Accepted - 2\n    // Rejected - 3\n    // Canceled - 4\n    function get() public view returns (Status) {\n        return status;\n    }\n\n    // Update status by passing uint into input\n    function set(Status _status) public {\n        status = _status;\n    }\n\n    // You can update to a specific enum like this\n    function cancel() public {\n        status = Status.Canceled;\n    }\n\n    // delete resets the enum to its first value, 0\n    function reset() public {\n        delete status;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/error_account.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"ok\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"deposit\",\n//!             \"calldata\": [\n//!                 \"20\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"withdraw\",\n//!             \"calldata\": [\n//!                 \"10\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"balance\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"MAX_UINT\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"MAX_UINT\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"deposit\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"deposit\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [ {\n//!         \"compiler_version\": \"<0.8\",\n//!         \"return_data\": [\n//!             \"0x08c379a000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x000000084F766572666C6F770000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }, {\n//!         \"compiler_version\": \">=0.8\",\n//!         \"return_data\": [\n//!             \"0x4E487B7100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001100000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     } ]\n//! }, {\n//!     \"name\": \"underflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"deposit\",\n//!             \"calldata\": [\n//!                 \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"withdraw\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08c379a000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x00000009556e646572666c6f7700000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22;\n\ncontract Test {\n    uint public balance;\n    uint public constant MAX_UINT = 2**256 - 1;\n\n    function deposit(uint _amount) public {\n        uint oldBalance = balance;\n        uint newBalance = balance + _amount;\n\n        // balance + _amount does not overflow if balance + _amount >= balance\n        require(newBalance >= oldBalance, \"Overflow\");\n\n        balance = newBalance;\n\n        assert(balance >= oldBalance);\n    }\n\n    function withdraw(uint _amount) public {\n        uint oldBalance = balance;\n\n        // balance - _amount does not underflow if balance >= _amount\n        require(balance >= _amount, \"Underflow\");\n\n        if (balance < _amount) {\n            revert(\"Underflow\");\n        }\n\n        balance -= _amount;\n\n        assert(balance <= oldBalance);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/error.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"testRequireOk\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testRequire\",\n//!             \"calldata\": [\n//!                 \"11\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"testRequireError\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testRequire\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08c379a000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001d496e707574206d7573742062652067726561746572207468616e2031\",\n//!             \"0x3000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"testRevertOk\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testRevert\",\n//!             \"calldata\": [\n//!                 \"1131\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"testRevertError\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testRevert\",\n//!             \"calldata\": [\n//!                 \"10\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x08c379a000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000001d496e707574206d7573742062652067726561746572207468616e2031\",\n//!             \"0x3000000000000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"testAssert\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testAssert\",\n//!             \"calldata\": [\n//!                 \"10\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"testCustomErrorOk\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testCustomError\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"testCustomErrorError\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"testCustomError\",\n//!             \"calldata\": [\n//!                 \"123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0xcf47918100000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n//!             \"0x0001e0f300000000000000000000000000000000000000000000000000000000\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ncontract Test {\n    function testRequire(uint _i) public pure {\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        require(_i > 10, \"Input must be greater than 10\");\n    }\n\n    function testRevert(uint _i) public pure {\n        // Revert is useful when the condition to check is complex.\n        // This code does the exact same thing as the example above\n        if (_i <= 10) {\n            revert(\"Input must be greater than 10\");\n        }\n    }\n\n    uint public num;\n\n    function testAssert() public view {\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n\n        // Here we assert that num is always equal to 0\n        // since it is impossible to update the value of num\n        assert(num == 0);\n    }\n\n    // custom error\n    error InsufficientBalance(uint balance, uint withdrawAmount);\n\n    function testCustomError(uint _withdrawAmount) public view {\n        uint bal = address(this).balance;\n        if (bal < _withdrawAmount) {\n            revert InsufficientBalance({balance: bal, withdrawAmount: _withdrawAmount});\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/ether_and_wei.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"oneWei\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"oneWei\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"isOneWei\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"isOneWei\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"oneEther\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"oneEther\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"isOneEther\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"isOneEther\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint public oneWei = 1 wei;\n    // 1 wei is equal to 1\n    bool public isOneWei = 1 wei == 1;\n\n    uint public oneEther = 1 ether;\n    // 1 ether is equal to 10^18 wei\n    bool public isOneEther = 1 ether == 1e18;\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/events.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"caller\": \"0xDEADBEEF00000000000000000000000000000001\",\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0x0738f4da267a110d810e6e89fc59e46be6de0c37b1d5cd559b267dc3688e74e0\",\n//!                     \"0xDEADBEEF00000000000000000000000000000001\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"12\",\n//!                     \"0x48656c6c6f20576f726c64210000000000000000000000000000000000000000\"\n//!                 ]\n//!             }, {\n//!                 \"topics\": [\n//!                     \"0x0738f4da267a110d810e6e89fc59e46be6de0c37b1d5cd559b267dc3688e74e0\",\n//!                     \"0xDEADBEEF00000000000000000000000000000001\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x20\",\n//!                     \"10\",\n//!                     \"0x48656c6c6f2045564d2100000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }, {\n//!                 \"topics\": [\n//!                     \"0xfe1a3ad11e425db4b8e6af35d11c50118826a496df73006fc724cb27f2b99946\"\n//!                 ],\n//!                 \"values\": []\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21;\n\ncontract Test {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, \"Hello World!\");\n        emit Log(msg.sender, \"Hello EVM!\");\n        emit AnotherLog();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/first_app.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"init_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"count\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"inc\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"count\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"inc\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"inc\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"dec\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"count\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint public count;\n\n    // Function to get the current count\n    function get() public view returns (uint) {\n        return count;\n    }\n\n    // Function to increment count by 1\n    function inc() public {\n        count += 1;\n    }\n\n    // Function to decrement count by 1\n    function dec() public {\n        count -= 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/for_and_while_loop.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"loop\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"loop\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    function loop() public {\n        // for loop\n        for (uint i = 0; i < 10; i++) {\n            if (i == 3) {\n                // Skip to next iteration with continue\n                continue;\n            }\n            if (i == 5) {\n                // Exit loop with break\n                break;\n            }\n        }\n\n        // while loop\n        uint j;\n        while (j < 10) {\n            j++;\n        }\n    }\n}\n\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/hello_world.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"get\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"greet\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x20\",\n//!         \"12\",\n//!         \"0x48656c6c6f20576f726c64210000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.4.16 and less than 0.9.0\npragma solidity >=0.4.16;\n\ncontract Test {\n    string public greet = \"Hello World!\";\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/if_else.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"foo_1\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"foo\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"foo_15\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"foo\",\n//!             \"calldata\": [\n//!                 \"15\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"foo_123132213123\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"foo\",\n//!             \"calldata\": [\n//!                 \"123132213123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"ternary_9\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"ternary\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ternary_57896044618658097711785492504343953926634992332820282019728792003956564819967\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"ternary\",\n//!             \"calldata\": [\n//!                 \"57896044618658097711785492504343953926634992332820282019728792003956564819967\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    function foo(uint x) public pure returns (uint) {\n        if (x < 10) {\n            return 0;\n        } else if (x < 20) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    function ternary(uint _x) public pure returns (uint) {\n        // if (_x < 10) {\n        //     return 1;\n        // }\n        // return 2;\n\n        // shorthand way to write if / else statement\n        return _x < 10 ? 1 : 2;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/immutable.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"address\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"9823\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         }, {\n//!             \"method\": \"MY_ADDRESS\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef01000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"uint\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"555555\"\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         }, {\n//!             \"method\": \"MY_UINT\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"555555\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ncontract Test {\n    // coding convention to uppercase constant variables\n    address public immutable MY_ADDRESS;\n    uint public immutable MY_UINT;\n\n    constructor(uint _myUint) {\n        MY_ADDRESS = msg.sender;\n        MY_UINT = _myUint;\n    }\n}\n\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/mapping.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"1\", \"10\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFfCcCc\",\n//!                 \"1234\"\n//!             ]\n//!         }, {\n//!             \"method\": \"remove\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFfCcCc\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFfCcCc\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa00\",\n//!                 \"12345\"\n//!             ]\n//!         }, {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa01\",\n//!                 \"123456\"\n//!             ]\n//!         }, {\n//!             \"method\": \"remove\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa00\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa01\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"123456\"\n//!     ]\n//! } ] }\n\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    // Mapping from address to uint\n    mapping(address => uint) public myMap;\n\n    function get(address _addr) public view returns (uint) {\n        // Mapping always returns a value.\n        // If the value was never set, it will return the default value.\n        return myMap[_addr];\n    }\n\n    function set(address _addr, uint _i) public {\n        // Update the value at this address\n        myMap[_addr] = _i;\n    }\n\n    function remove(address _addr) public {\n        // Reset the value to the default value.\n        delete myMap[_addr];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/nested_mapping.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"1\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFfCcCc\",\n//!                 \"784563478547835256342389483254\",\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"remove\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFfCcCc\",\n//!                 \"784563478547835256342389483254\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFfCcCc\",\n//!                 \"784563478547835256342389483254\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"third\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa00\",\n//!                 \"453453453464564564564500\",\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa00\",\n//!                 \"453453453464564564564501\",\n//!                 \"1\"\n//!             ]\n//!         }, {\n//!             \"method\": \"remove\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa00\",\n//!                 \"453453453464564564564500\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"0x127782389999AaAAbBbbCcccddDdeabcfFFffa00\",\n//!                 \"453453453464564564564501\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    // Nested mapping (mapping from address to another mapping)\n    mapping(address => mapping(uint => bool)) public nested;\n\n    function get(address _addr1, uint _i) public view returns (bool) {\n        // You can get values from a nested mapping\n        // even when it is not initialized\n        return nested[_addr1][_i];\n    }\n\n    function set(\n        address _addr1,\n        uint _i,\n        bool _boo\n    ) public {\n        nested[_addr1][_i] = _boo;\n    }\n\n    function remove(address _addr1, uint _i) public {\n        delete nested[_addr1][_i];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/primitive_data_types.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"boo\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"boo\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"u8\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"u8\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"u256\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"u256\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"456\"\n//!     ]\n//! }, {\n//!     \"name\": \"u\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"u()\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"123\"\n//!     ]\n//! }, {\n//!     \"name\": \"i8\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"i8\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"i256\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"i256\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"456\"\n//!     ]\n//! }, {\n//!     \"name\": \"i\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"i()\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-123\"\n//!     ]\n//! }, {\n//!     \"name\": \"minInt\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"minInt\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"maxInt\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"maxInt\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"addr\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"addr\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c\"\n//!     ]\n//! }, {\n//!     \"name\": \"defaultBoo\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"defaultBoo\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"defaultUint\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"defaultUint\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"defaultInt\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"defaultInt\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"defaultAddr\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"defaultAddr\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\n\ncontract Test {\n    bool public boo = true;\n\n    /*\n    uint stands for unsigned integer, meaning non negative integers\n    different sizes are available\n        uint8   ranges from 0 to 2 ** 8 - 1\n        uint16  ranges from 0 to 2 ** 16 - 1\n        ...\n        uint256 ranges from 0 to 2 ** 256 - 1\n    */\n    uint8 public u8 = 1;\n    uint public u256 = 456;\n    uint public u = 123; // uint is an alias for uint256\n\n    /*\n    Negative numbers are allowed for int types.\n    Like uint, different ranges are available from int8 to int256\n\n    int256 ranges from -2 ** 255 to 2 ** 255 - 1\n    int128 ranges from -2 ** 127 to 2 ** 127 - 1\n    */\n    int8 public i8 = -1;\n    int public i256 = 456;\n    int public i = -123; // int is same as int256\n\n    // minimum and maximum of int\n    int public minInt = type(int).min;\n    int public maxInt = type(int).max;\n\n    address public addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;\n\n    // Default values\n    // Unassigned variables have a default value\n    bool public defaultBoo; // false\n    uint public defaultUint; // 0\n    int public defaultInt; // 0\n    address public defaultAddr; // 0x0000000000000000000000000000000000000000\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/reading_and_writing_to_a_state_variable.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"7823982309234984387823489290492314\"\n//!             ]\n//!         }, {\n//!             \"method\": \"num\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7823982309234984387823489290492314\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"34342312412341234\"\n//!             ]\n//!         }, {\n//!             \"method\": \"set\",\n//!             \"calldata\": [\n//!                 \"-82349283489238\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-82349283489238\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    // State variable to store a number\n    uint public num;\n\n    // You need to send a transaction to write to a state variable.\n    function set(uint _num) public {\n        num = _num;\n    }\n\n    // You can read from a state variable without sending a transaction.\n    function get() public view returns (uint) {\n        return num;\n    }\n}\n\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/shadowing_inherited_state_variables.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!             ],\n//!             \"expected\": [\n//!                 \"Test.address\"\n//!             ]\n//!         },\n//!         {\n//!             \"method\": \"getName\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x20\",\n//!         \"10\",\n//!         \"0x436f6e7472616374204300000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ncontract A {\n    string public name = \"Contract A\";\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n}\n\n// Shadowing is disallowed in Solidity 0.6\n// This will not compile\n// contract B is A {\n//     string public name = \"Contract B\";\n// }\n\ncontract Test is A {\n    // This is the correct way to override inherited state variables.\n    constructor() {\n        name = \"Contract C\";\n    }\n\n    // C.getName returns \"Contract C\"\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/structs.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"create\",\n//!             \"calldata\": [\n//!                 \"0x20\",\n//!                 \"4\",\n//!                 \"0x7465737400000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x40\",\n//!         \"0\",\n//!         \"4\",\n//!         \"0x7465737400000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"create\",\n//!             \"calldata\": [\n//!                 \"0x20\",\n//!                 \"5\",\n//!                 \"0x7465737431000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }, {\n//!             \"method\": \"create\",\n//!             \"calldata\": [\n//!                 \"0x20\",\n//!                 \"5\",\n//!                 \"0x7465737432000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }, {\n//!             \"method\": \"toggleCompleted\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }, {\n//!             \"method\": \"update\",\n//!             \"calldata\": [\n//!                 \"3\",\n//!                 \"0x40\",\n//!                 \"5\",\n//!                 \"0x7465737433000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ],\n//!             \"expected\": [\n//!                 \"0x40\",\n//!                 \"1\",\n//!                 \"5\",\n//!                 \"0x7465737431000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }, {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x40\",\n//!         \"0\",\n//!         \"5\",\n//!         \"0x7465737433000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    struct Todo {\n        string text;\n        bool completed;\n    }\n\n    // An array of 'Todo' structs\n    Todo[] public todos;\n\n    function create(string memory _text) public {\n        // 3 ways to initialize a struct\n        // - calling it like a function\n        todos.push(Todo(_text, false));\n\n        // key value mapping\n        todos.push(Todo({text: _text, completed: false}));\n\n        // initialize an empty struct and then update it\n        Todo memory todo;\n        todo.text = _text;\n        // todo.completed initialized to false\n\n        todos.push(todo);\n    }\n\n    // Solidity automatically created a getter for 'todos' so\n    // you don't actually need this function.\n    function get(uint _index) public view returns (string memory text, bool completed) {\n        Todo storage todo = todos[_index];\n        return (todo.text, todo.completed);\n    }\n\n    // update text\n    function update(uint _index, string memory _text) public {\n        Todo storage todo = todos[_index];\n        todo.text = _text;\n    }\n\n    // update completed\n    function toggleCompleted(uint _index) public {\n        Todo storage todo = todos[_index];\n        todo.completed = !todo.completed;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/variables.sol":{"content":"//! { \"modes\": [\n//!     \"Y >=0.8.1\",\n//!     \"E\", \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"text\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"doSomething\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"text\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x20\",\n//!         \"5\",\n//!         \"0x48656c6c6f000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"num\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"doSomething\",\n//!             \"calldata\": [\n//!             ]\n//!         }, {\n//!             \"method\": \"num\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"123\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    // State variables are stored on the blockchain.\n    string public text = \"Hello\";\n    uint public num = 123;\n\n    function doSomething() public {\n        // Local variables are not saved to the blockchain.\n        uint i = 456;\n\n        // Here are some global variables\n        uint timestamp = block.timestamp; // Current block timestamp\n        address sender = msg.sender; // address of the caller\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/verifying_signature.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"test\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"verify\",\n//!             \"calldata\": [\n//!                 \"0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\",\n//!                 \"0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\",\n//!                 \"123\",\n//!                 \"0xc0\",\n//!                 \"1\",\n//!                 \"0x100\",\n//!                 \"17\",\n//!                 \"0x636f6666656520616e6420646f6e757473000000000000000000000000000000\",\n//!                 \"65\",\n//!                 \"0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f16619\",\n//!                 \"0x6f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f78\",\n//!                 \"0x1b00000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\n/* Signature Verification\n\nHow to Sign and Verify\n# Signing\n1. Create message to sign\n2. Hash the message\n3. Sign the hash (off chain, keep your private key secret)\n\n# Verify\n1. Recreate hash from the original message\n2. Recover signer from signature and hash\n3. Compare recovered signer to claimed signer\n*/\n\ncontract Test {\n    /* 1. Unlock MetaMask account\n    ethereum.enable()\n    */\n\n    /* 2. Get message hash to sign\n    getMessageHash(\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\n        123,\n        \"coffee and donuts\",\n        1\n    )\n\n    hash = \"0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd\"\n    */\n    function getMessageHash(\n        address _to,\n        uint _amount,\n        string memory _message,\n        uint _nonce\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_to, _amount, _message, _nonce));\n    }\n\n    /* 3. Sign message hash\n    # using browser\n    account = \"copy paste account of signer here\"\n    ethereum.request({ method: \"personal_sign\", params: [account, hash]}).then(console.log)\n\n    # using web3\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\n\n    Signature will be different for different accounts\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function getEthSignedMessageHash(bytes32 _messageHash)\n        public\n        pure\n        returns (bytes32)\n    {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash)\n            );\n    }\n\n    /* 4. Verify signature\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\n    amount = 123\n    message = \"coffee and donuts\"\n    nonce = 1\n    signature =\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function verify(\n        address _signer,\n        address _to,\n        uint _amount,\n        string memory _message,\n        uint _nonce,\n        bytes memory signature\n    ) public pure returns (bool) {\n        bytes32 messageHash = getMessageHash(_to, _amount, _message, _nonce);\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\n    }\n\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\n        public\n        pure\n        returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n        public\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/solidity_by_example/simple/view_and_pure_functions.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"addToXFirst\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"addToX\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"addToXSecond\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"addToX\",\n//!             \"calldata\": [\n//!                 \"67234736412121212\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"67234736412121213\"\n//!     ]\n//! }, {\n//!     \"name\": \"addFirst\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"add(uint256,uint256)\",\n//!             \"calldata\": [\n//!                 \"2\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! }, {\n//!     \"name\": \"addSecond\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"add(uint256,uint256)\",\n//!             \"calldata\": [\n//!                 \"782438347287334342\", \"512356125631255135132125661271278\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"512356125631255917570472948605620\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function addToX(uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Promise not to modify or read from the state.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/stack_overflow.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ninterface A {\n    function f() external view returns (bool);\n}\n\ncontract Test {\n    function f() external {\n        uint256 stableFlag;\n        for (uint256 i = 0; i < 1; i++) {\n            if (A(address(0)).f()) {\n                stableFlag = stableFlag | (1 << i);\n            }\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/array/assign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"5\", \"6\", \"7\", \"8\",\n//!                 \"9\", \"10\", \"11\", \"12\",\n//!                 \"13\", \"14\", \"15\", \"16\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint256[4][4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3][3] = uint256(argument);\n\n        return argument + TEST + uint8(data[3][3]);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/array/assign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"1\", \"2\", \"3\", \"4\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint256[4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3] = uint256(argument);\n\n        return argument + TEST + uint8(data[3]);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/array/product.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"20\", \"15\", \"10\", \"5\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15000\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint256[4] data;\n\n    function main(uint16 argument) public returns(uint16) {\n        uint16 product = 1;\n        for (uint8 i = 0; i < 4; i++) {\n            product *= uint16(data[i]);\n        }\n        return product;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/array/reassign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"1\", \"2\", \"3\", \"4\",\n//!                 \"5\", \"6\", \"7\", \"8\",\n//!                 \"9\", \"10\", \"11\", \"12\",\n//!                 \"13\", \"14\", \"15\", \"16\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"142\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint256[4][4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3][3] += uint256(argument);\n\n        return argument + TEST + uint8(data[3][3]);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/array/reassign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"1\", \"2\", \"3\", \"4\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"130\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint256[4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3] += uint256(argument);\n\n        return argument + TEST + uint8(data[3]);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/array/sum.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"20\", \"15\", \"10\", \"5\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint256[4] data;\n\n    function main(uint8 argument) public returns(uint8) {\n        uint8 sum = 0;\n        for (uint8 i = 0; i < 4; i++) {\n            sum += uint8(data[i]);\n        }\n        return sum;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/complex_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"3\", \"5\", \"2\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint256 field_1;\n    uint256 field_2;\n    uint256 field_3;\n\n    function main(uint8 witness) public returns(uint8) {\n        return 19 * 3 - 8 / uint8(field_1) + (witness / (uint8(field_2) - 3) + 5) * (8 / uint8(field_3) / 2);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/method_chain.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"5\", \"11\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1024\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint256 a;\n    uint256 b;\n\n    function main(uint248 value) public returns(uint248) {\n        return uint248(a) + quadruple(triple(double(value))) + uint248(b);\n    }\n\n    function double(uint248 value) public returns(uint248) {\n        return value * 2;\n    }\n\n    function triple(uint248 value) public returns(uint248) {\n        return 3 * value;\n    }\n\n    function quadruple(uint248 value) public returns(uint248) {\n        return value * 4;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/mixed_data_origin.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"5\", \"7\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"148\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    uint248 constant SOMETHING = 42;\n    uint248 constant SOMETHING_ELSE = 88;\n\n    struct Data {\n        uint248 c;\n        uint248 d;\n    }\n\n    uint256 a;\n    uint256 b;\n\n    function main(uint248 value) public returns(uint248) {\n        Data memory data = Data(10, 20);\n\n        return inner(data, value, 42);\n    }\n\n    function inner(Data memory data, uint248 value, uint8 literal) public returns(uint248) {\n        return ((uint248(a) + data.c + uint248(b) + data.d + value) * uint248(literal) * SOMETHING - SOMETHING_ELSE) / 1000;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/mutating_conditional.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\",\n//!                 \"0\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\",\n//!                 \"1\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\",\n//!                 \"0\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\",\n//!                 \"1\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"25\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint256 data;\n\n    function main(bool gate_1, bool gate_2, uint8 value) public returns(uint8) {\n        if (gate_1) {\n            if (gate_2) {\n                data = uint256(value);\n            }\n        }\n\n        return uint8(data);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/simple_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"12\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"3\", \"5\", \"2\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint256 field_1;\n    uint256 field_2;\n    uint256 field_3;\n\n    function main(uint8 witness) public returns(uint8) {\n        return witness + uint8(field_1) * uint8(field_2) * uint8(field_3);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/structure/assign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"99\", \"100\", \"101\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        Inner inner;\n    }\n\n    struct Inner {\n        uint256 value;\n        uint256 next;\n        uint256 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.inner.next = uint256(argument);\n\n        return argument + TEST + uint8(data.inner.next);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/structure/assign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"99\", \"100\", \"101\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        uint256 value;\n        uint256 next;\n        uint256 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.next = uint256(argument);\n\n        return argument + TEST + uint8(data.next);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/structure/product.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"20\", \"15\", \"10\", \"5\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15000\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    struct Data {\n        uint256 a;\n        uint256 b;\n        uint256 c;\n        uint256 d;\n    }\n\n    Data data;\n\n    function main(uint16 argument) public returns(uint16) {\n        uint16 product = 1;\n        product *= uint16(data.a);\n        product *= uint16(data.b);\n        product *= uint16(data.c);\n        product *= uint16(data.d);\n        return product;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/structure/reassign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"99\", \"100\", \"101\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"226\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        Inner inner;\n    }\n\n    struct Inner {\n        uint256 value;\n        uint256 next;\n        uint256 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.inner.next += uint256(argument);\n\n        return argument + TEST + uint8(data.inner.next);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/structure/reassign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"99\", \"100\", \"101\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"226\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        uint256 value;\n        uint256 next;\n        uint256 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.next += uint256(argument);\n\n        return argument + TEST + uint8(data.next);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/aligned/structure/sum.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"20\", \"15\", \"10\", \"5\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        uint256 a;\n        uint256 b;\n        uint256 c;\n        uint256 d;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        uint8 sum = 0;\n        sum += uint8(data.a);\n        sum += uint8(data.b);\n        sum += uint8(data.c);\n        sum += uint8(data.d);\n        return sum;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/call_getter_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"g\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!       \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-611/nested-external-calls-issue\n\ncontract Test {\n    function h() external returns (uint256) {\n        return 1;\n    }\n\n    function f() external returns (uint256) {\n        return this.h();\n    }\n\n    function g() external returns (uint256) {\n        return this.f();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/call_getter.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"get\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!       \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-610/mapping-getter-failure\n\ncontract Test {\n    mapping(uint8 => uint8) public table;\n\n    function get() public returns (uint8) {\n        return this.table(0);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/multiple.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"16\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"192\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    mapping (uint8 => mapping (uint8 => uint8)) data;\r\n\r\n    function main(uint8 value) public returns(uint8) {\r\n        data[5][10] = value * 4;\r\n        data[15][20] = value * 4;\r\n        data[25][30] = value * 4;\r\n        return data[5][10] + data[15][20] + data[25][30];\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/mutating_one_element_nested.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"0\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// Report https://linear.app/matterlabs/issue/CPR-222/fix-failures-of-the-mapping-tests-from-the-solidity-repo\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    mapping(uint => mapping(uint => uint)) twodim;\r\n    \r\n    function main() public returns (uint a) {\r\n        twodim[2][3] = 3;\r\n        a = twodim[3][2];\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/mutating_one_element.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-220/mapping-test-failure\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    mapping(uint8 => uint8) m1;\n\n    function f() public returns (uint8) {\n        m1[1] = 42;\n        return m1[1];\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/nested.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"100500\", \"999999\", \"16\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"64\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    mapping (address => mapping (address => uint256)) data;\r\n\r\n    function main(address key1, address key2, uint256 value) public returns(uint256) {\r\n        data[key1][key2] = value * 4;\r\n        return data[key1][key2];\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/storage/mapping/simple.sol":{"content":"//! { \"cases\": [ {\r\n//!     \"name\": \"main\",\r\n//!     \"inputs\": [\r\n//!         {\r\n//!             \"method\": \"main\",\r\n//!             \"calldata\": [\r\n//!                 \"100500\", \"16\"\r\n//!             ]\r\n//!         }\r\n//!     ],\r\n//!     \"expected\": [\r\n//!         \"64\"\r\n//!     ]\r\n//! } ] }\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.16;\r\n\r\ncontract Test {\r\n    mapping (uint256 => uint256) data;\r\n\r\n    function main(uint256 key, uint256 value) public returns(uint256) {\r\n        data[key] = value * 4;\r\n        return data[key];\r\n    }\r\n}\r\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/assign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x100f0e0d0c0b0a090807060504030201\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8[4][4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3][3] = argument;\n\n        return argument + TEST + data[3][3];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/assign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x04030201\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8[4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3] = argument;\n\n        return argument + TEST + data[3];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/default_init.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"f\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"f\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-583/book-cypher-minimization-issue-with-comparison-uint8-array-element\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    uint8[2] KEY = [1, 1]; // if replace the first or second value with 0, the test will work\n\n    function f(uint8 data) public view returns(bool) {\n        return KEY[1] == data;\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/mutating_one_element.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": [\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"1\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-210/error-with-solidity-constants\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8[1] KEY = [1];\n\n    function complex() public view returns(uint8) {\n        return KEY[0];\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/product.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x0005000a000f0014\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15000\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint16[4] data;\n\n    function main(uint16 argument) public returns(uint16) {\n        uint16 product = 1;\n        for (uint8 i = 0; i < 4; i++) {\n            product *= data[i];\n        }\n        return product;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/reassign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x04030201\",\n//!                 \"0x08070605\",\n//!                 \"0x0c0b0a09\",\n//!                 \"0x100f0e0d\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"142\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8[4][4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3][3] += argument;\n\n        return argument + TEST + data[3][3];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/reassign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x04030201\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"130\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8[4] data;\n\n    uint8 constant TEST = 42;\n\n    function main(uint8 argument) public returns(uint8) {\n        data[3] += argument;\n\n        return argument + TEST + data[3];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/array/sum.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x050a0f14\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8[4] data;\n\n    function main(uint8 argument) public returns(uint8) {\n        uint8 sum = 0;\n        for (uint8 i = 0; i < 4; i++) {\n            sum += data[i];\n        }\n        return sum;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/complex_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"16\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x020503\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"81\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 field_1;\n    uint8 field_2;\n    uint8 field_3;\n\n    function main(uint8 witness) public returns(uint8) {\n        return 19 * 3 - 8 / field_1 + (witness / (field_2 - 3) + 5) * (8 / field_3 / 2);\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/method_chain.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"5\", \"11\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1024\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint248 a;\n    uint248 b;\n\n    function main(uint248 value) public returns(uint248) {\n        return a + quadruple(triple(double(value))) + b;\n    }\n\n    function double(uint248 value) public returns(uint248) {\n        return value * 2;\n    }\n\n    function triple(uint248 value) public returns(uint248) {\n        return 3 * value;\n    }\n\n    function quadruple(uint248 value) public returns(uint248) {\n        return value * 4;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/mixed_data_origin.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"5\", \"7\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"148\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    uint248 constant SOMETHING = 42;\n    uint248 constant SOMETHING_ELSE = 88;\n\n    struct Data {\n        uint248 c;\n        uint248 d;\n    }\n\n    uint248 a;\n    uint248 b;\n\n    function main(uint248 value) public returns(uint248) {\n        Data memory data = Data(10, 20);\n\n        return inner(data, value, 42);\n    }\n\n    function inner(Data memory data, uint248 value, uint8 literal) public returns(uint248) {\n        return ((a + data.c + b + data.d + value) * uint248(literal) * SOMETHING - SOMETHING_ELSE) / 1000;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/mutating_conditional.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\",\n//!                 \"0\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\",\n//!                 \"1\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\",\n//!                 \"0\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\",\n//!                 \"1\",\n//!                 \"25\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"42\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"25\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 data;\n\n    function main(bool gate_1, bool gate_2, uint8 value) public returns(uint8) {\n        if (gate_1) {\n            if (gate_2) {\n                data = value;\n            }\n        }\n\n        return data;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/simple_operator.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"12\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x020503\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    uint8 field_1;\n    uint8 field_2;\n    uint8 field_3;\n\n    function main(uint8 witness) public returns(uint8) {\n        return witness + field_1 * field_2 * field_3;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/structure/assign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x656463\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        Inner inner;\n    }\n\n    struct Inner {\n        uint8 value;\n        uint8 next;\n        uint8 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.inner.next = argument;\n\n        return argument + TEST + data.inner.next;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/structure/assign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x656463\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        uint8 value;\n        uint8 next;\n        uint8 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.next = argument;\n\n        return argument + TEST + data.next;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/structure/product.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x0005000a000f0014\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15000\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    struct Data {\n        uint16 a;\n        uint16 b;\n        uint16 c;\n        uint16 d;\n    }\n\n    Data data;\n\n    function main(uint16 argument) public returns(uint16) {\n        uint16 product = 1;\n        product *= data.a;\n        product *= data.b;\n        product *= data.c;\n        product *= data.d;\n        return product;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/structure/reassign_nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x656463\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"226\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        Inner inner;\n    }\n\n    struct Inner {\n        uint8 value;\n        uint8 next;\n        uint8 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.inner.next += argument;\n\n        return argument + TEST + data.inner.next;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/structure/reassign.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x656463\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"226\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        uint8 value;\n        uint8 next;\n        uint8 last;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        data.next += argument;\n\n        return argument + TEST + data.next;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/storage/unaligned/structure/sum.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"42\"\n//!             ],\n//!             \"storage\": { \"Test.address\": [\n//!                 \"0x050a0f14\"\n//!             ] }\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"50\"\n//!     ]\n//! } ] }\n\ncontract Test {\n    uint8 constant TEST = 42;\n\n    struct Data {\n        uint8 a;\n        uint8 b;\n        uint8 c;\n        uint8 d;\n    }\n\n    Data data;\n\n    function main(uint8 argument) public returns(uint8) {\n        uint8 sum = 0;\n        sum += data.a;\n        sum += data.b;\n        sum += data.c;\n        sum += data.d;\n        return sum;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/structure/mutating_assignment.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"168\", \"4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"42\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\npragma experimental ABIEncoderV2;\n\ncontract Test {\n    struct Inner {\n        uint8 value;\n    }\n\n    struct Data {\n        Inner inner;\n    }\n\n    function main(Data memory data, uint8 divider) public pure returns(Data memory) {\n        data.inner.value /= divider;\n        return data;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/structure/mutating.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"64\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    struct Test {\n        uint8 x;\n        uint8 y;\n        uint8 z;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        Test memory test = Test(1, 2, 3);\n\n        test.x += 5 * witness;\n        test.y += 7 * witness;\n        test.z += 9 * witness;\n\n        return test.z + test.y + test.x - 5;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/structure/nested_evaluation_stack.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    struct Inner {\n        uint8 value;\n    }\n\n    struct Test {\n        Inner inner;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        return Test(Inner(witness * 5)).inner.value;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/structure/nested_storage.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    struct Inner {\n        uint8 value;\n    }\n\n    struct Test {\n        Inner inner;\n    }\n\n    function main(uint8 witness) public pure returns(uint8) {\n        Test memory data = Test(Inner(witness * 5));\n        return data.inner.value;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/balance.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        uint256 result = address(this).balance;\n        assembly {\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/block_number_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := number()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/block_timestamp_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := timestamp()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/blockhash_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := blockhash(sub(number(), 1))\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/chainid_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.14;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := chainid()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/coinbase_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := coinbase()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/extcodehash_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := extcodehash(address())\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/extcodesize_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := extcodesize(address())\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/forwarder.sol":{"content":"//! { \"cases\": [] }\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity >=0.8.0;\n\ncontract Test {\n    address immutable _target;\n\n    constructor(address target) payable {\n        _target = target;\n    }\n\n    fallback() external payable {\n        address target = _target;\n\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/gaslimit_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := gaslimit()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/gasprice_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := gasprice()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/keccak256_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        bytes32 result = keccak256(\"abc\");\n        assembly {\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/long_returndata_keccak256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        bytes32 result = keccak256(hex\"12134125362173812931023128371263512432156127839012123123671237812903128376125341231263781920312321391287362153421312563782193012341253671289301283781283612865463245623423876478839712837128478327423647236472354623546723546235674523645236452367453645236456324571283761287316236127362175462534623546325467325467238647182637182361289371289736127836127836712645732546723546234561726838127392183126381264373126412536124356124352143512435124312563412563421213412536217381293102312812134125362173812931023128371263512432156127839012123123671237812903128376125341231263781920312321391287362153421312563782193012341253671289301283781283612865463245623423876478839712837128478327423647236472354623546723546235674523645236452367453645236456324571283761287316236127362175462534623546325467325467238647182637182361289371289736127836127836712645732546723546234561726838127392183126381264373126412536124356124352143512435124312563412563421213412536217381293102312837126351243215612783901212312367123781290312837612534125267897656783126378192031232139128736215342131256378219301234125367112312312289301283781281236127382913021381276352131236128654632456234238764788397128371284783274236472364723546235467235462355432672382394712653412312673812931273651243123612783921038127365124321367812312674523645236452367453645236456324571283761287316236127362175462534623546325467325467238647182637182361289371289736127836127836712645732546723546234561726838127392183126381264373126412536124356124352143512435124312563412563423712635124321561278390121231236712378129031283761253412526789765678312637819203123213912873621534213125637821930123412536711231231228930128378128123612738291302138127635213123612865463245623423876478839712837128478327423647236472354623546723546235543267238239471265341231267381293127365124312361278392103812736512432136781231267452364523645236745364523645632457128376128731623612736217546253462354632546732546723864718263718236128937128973612783612783671264573254672354623456172683812739218312638126437312641253612435612435214351243512431256341256342\");\n        assembly {\n            if iszero(eq(returndatasize(), 50000)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 256)\n            if iszero(and(\n                and(\n                    and(\n                        eq(mload(0), 12345),\n                        eq(mload(32), 0)\n                    ),\n                    and(\n                        eq(mload(64), 54321),\n                        eq(mload(96), 0)\n                    )\n                ),\n                and(\n                    and(\n                        eq(mload(128), 13579),\n                        eq(mload(160), 0)\n                    ),\n                    and(\n                        eq(mload(192), 97531),\n                        eq(mload(224), 0)\n                    )\n                )\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure {\n        assembly {\n            mstore(0, 12345)\n            mstore(64, 54321)\n            mstore(128, 13579)\n            mstore(192, 97531)\n            return(0, 50000)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/system/origin_returndata.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main() public {\n        this.f();\n        assembly {\n            let result := origin()\n            if iszero(eq(returndatasize(), 64)) {\n                revert(0, 0)\n            }\n            returndatacopy(0, 0, 64)\n            if iszero(and(\n                eq(mload(0), 11),\n                eq(mload(32), 12)\n            )) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function f() external pure returns(uint256[2] memory) {\n        return [uint256(11), uint256(12)];\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/ternary_overflow.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.14;\n\ncontract Test {\n    function main() external view returns (uint256) {\n        uint256 a = 2; // any value >= 2 seems to cause an overflow\n        return this.inner(a, true);\n    }\n\n    function inner(uint256 a, bool b) external pure returns (uint256) {\n        uint256 c = b ? 1 : 0;\n        uint256 d = a + c; // this arithmetic incorrectly throws an overflow panic\n        return b ? c : d;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/error_as_bytes.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000000000000000000000000000000000000000000000020\",\n//!         \"0x0000000000000000000000000000000000000000000000000000000000000004\",\n//!         \"0xd845fc9200000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-353/minimize-the-try-catch-complex-tests\n\npragma solidity >=0.8.4;\n\nerror Error1();\n\ncontract Test {\n    function main() public returns(bytes memory) {\n        try this.f() {\n            return \"\";\n        } catch(bytes memory reason) {\n            return reason;\n        }\n    }\n\n    function f() external {\n        revert Error1();\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/event_instead_function.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface ITest2 {\n    function f1() external;\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public returns (bool) {\n        try ITest2(address(ins)).f1() {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    event f1();\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/external_call_as_arg.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     } \n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     } \n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main(uint gate1, uint gate2) view public returns(uint result) {\n        try this.c1(gate1, this.c2(gate2)) returns(uint result1) {\n            result += result1;\n        } catch {\n            result += 1;\n        }\n    }\n\n    function c1(uint gate, uint a) pure public returns(uint) {\n        if (gate == 0) {\n            revert();\n        }\n        return a + 42;\n    }\n\n    function c2(uint gate) pure public returns(uint) {\n        if (gate == 0) {\n            revert();\n        }\n        return 84;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/infinite_loop_1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-952/statements-inside-loops-stack-overflow-error-in-the-zksolc\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    bool private testvar = true;\n\n    function main() external returns (bool) {\n        testvar = !testvar;\n        return testvar;\n    }\n\n    function trier1bug() public {\n        while (testvar) {\n            testvar = !testvar;\n\n            try this.main() returns (bool s) {\n                if (s == testvar) break;\n            } catch {  }\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/infinite_loop_2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"10\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-952/statements-inside-loops-stack-overflow-error-in-the-zksolc\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main() public view returns (uint result) {\n        for (uint i = 0; i < 10; i++) {\n            try this.externalCall() returns (uint externalResult) {\n                result += externalResult;\n            } catch {}\n        }\n    }\n\n    function externalCall() public pure returns (uint result) {\n        result = 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/invalid_return.sol":{"content":"//! {\n//!     \"cases\": [\n//!         {\n//!             \"name\": \"main\",\n//!             \"inputs\": [\n//!                 {\n//!                     \"method\": \"main\",\n//!                     \"calldata\": []\n//!                 }\n//!             ],\n//!             \"expected\": {\n//!                 \"return_data\": [],\n//!                 \"exception\": true\n//!             }\n//!         }\n//!     ]\n//! }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface ITest2 {\n    function f1() external returns (bool);\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public returns (bool) {\n        try ITest2(address(ins)).f1() returns (bool a) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    function f1() public {\n        // return nothing\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/nested_2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-1705/internalcompilererror-in-our-fork\n\npragma solidity >=0.6.0;\n\ncontract Base {\n  uint ret;\n  function f2() public { ret = 2; }\n  function f3() public { ret = 3; }\n\n  function g() public returns (uint) {\n    ret = 1;\n    try this.f2() {\n    } catch {\n      try this.f3() {\n      } catch {}\n    }\n    return ret;\n  }\n\n  function h() public returns (uint) {\n    ret = 1;\n    try this.f2() {\n      try this.f3() {\n      } catch {}\n    } catch {}\n    return ret;\n  }\n}\n\ncontract Test is Base {\n  function main() public returns (uint) {\n    return g() * 10 + h();\n  }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/nested.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"false_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"43\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"126\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main(uint gate1, uint gate2) view public returns(uint result) {\n        try this.c1(gate1) returns(uint result1) {\n            result += result1;\n            try this.c2(gate2) returns(uint result2) {\n                result += result2;\n            } catch {\n                result += 1;\n            }\n        } catch {\n            result += 2;\n        }\n    }\n\n    function c1(uint gate) pure public returns(uint) {\n        if (gate == 0) {\n            revert();\n        }\n        return 42;\n    }\n\n    function c2(uint gate) pure public returns(uint) {\n        if (gate == 0) {\n            revert();\n        }\n        return 84;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/not_enough_balance.sol":{"content":"//! {\n//!     \"cases\": [\n//!         {\n//!             \"name\": \"main\",\n//!             \"inputs\": [\n//!                 {\n//!                     \"method\": \"main\",\n//!                     \"calldata\": [],\n//!                     \"value\": \"1 ETH\"\n//!                 }\n//!             ],\n//!             \"expected\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ]\n//! }\n\n// SPDX-License-Identifier: MIT\n\n// `value:` is not recognized by solc <= 0.6.1\npragma solidity >=0.6.2;\n\ninterface ITest2 {\n    function f1() external payable returns (bool);\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public payable returns (bool) {\n        try ITest2(address(ins)).f1{value: 2 ether}() returns (bool) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    fallback() external payable {\n        assembly {\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/not_matching_interface.sol":{"content":"//! {\n//!     \"cases\": [\n//!         {\n//!             \"name\": \"main\",\n//!             \"inputs\": [\n//!                 {\n//!                     \"method\": \"main\",\n//!                     \"calldata\": []\n//!                 }\n//!             ],\n//!             \"expected\": {\n//!                 \"return_data\": [],\n//!                 \"exception\": true\n//!             }\n//!         }\n//!     ]\n//! }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface ITest2 {\n    function f1() external returns (uint);\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public returns (bool) {\n        try ITest2(address(ins)).f1() {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    function f1() public {\n        // return nothing\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/not_payable.sol":{"content":"//! {\n//!     \"cases\": [\n//!         {\n//!             \"name\": \"main\",\n//!             \"inputs\": [\n//!                 {\n//!                     \"method\": \"main\",\n//!                     \"calldata\": [],\n//!                     \"value\": \"1 ETH\"\n//!                 }\n//!             ],\n//!             \"expected\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ]\n//! }\n\n// SPDX-License-Identifier: MIT\n\n// `value:` is not recognized by solc <= 0.6.1\npragma solidity >=0.6.2;\n\ninterface ITest2 {\n    function f1() external payable returns (bool);\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public payable returns (bool) {\n        try ITest2(address(ins)).f1{value: 1 ether}() returns (bool) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    fallback() external {\n        assembly {\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/revert_long_data.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000000000000000000000000000000000000000000000020\",\n//!         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function main() public returns (bytes memory) {\n        try this.f() {\n            return \"TRUE\";\n        } catch (bytes memory reason) {\n            return reason;\n        }\n    }\n\n    function f() external {\n        assembly {\n            revert(0, 320000000000000000000000)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/signature_collision1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface ITest2 {\n    function transfer(address to, uint256 balance) external;\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public returns (bool) {\n        try ITest2(address(ins)).transfer(msg.sender, 0) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    function transfer(\n        bytes4[9] memory,\n        bytes5[6] memory,\n        int48[11] memory\n    ) public {}\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/signature_collision2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface ITest2 {\n    function transfer(address to, uint256 balance) external;\n}\n\ncontract Test {\n    Test2 ins;\n\n    constructor() public {\n        ins = new Test2();\n    }\n\n    function main() public returns (bool) {\n        try ITest2(address(ins)).transfer(msg.sender, 0) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n}\n\ncontract Test2 {\n    function join_tg_invmru_haha_fd06787(address, bool) public {}\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/simple.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"first\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"second\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"entry\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    function f(bool a) public pure {\n        require(!a);\n    }\n\n    function entry(bool a) public view returns(uint) {\n        try this.f(a) {\n            return 1;\n        } catch {\n            return 2;\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/this_in_constructor.sol":{"content":"//! {\n//!     \"cases\": [\n//!         {\n//!             \"name\": \"main\",\n//!             \"inputs\": [\n//!                 {\n//!                     \"method\": \"#deployer\",\n//!                     \"calldata\": []\n//!                 }\n//!             ],\n//!             \"expected\": {\n//!                 \"return_data\": [],\n//!                 \"exception\": true\n//!             }\n//!         }\n//!     ]\n//! }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ncontract Test {\n    constructor() public {\n        try this.f1() {} catch {}\n    }\n\n    function f1() public {}\n}\n"},"contracts/era-compiler-tests/solidity/simple/try_catch/unbalanced_gas_limit.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\", \"1\", \"0\", \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0;\n\ncontract Test {\n    uint256 public t1;\n    uint256 public c1;\n    uint256 public t2;\n    uint256 public c2;\n\n    function main() public returns (uint256, uint256, uint256, uint256) {\n        try this.f1{gas: 50000}() {\n            t1++;\n        } catch {\n            c1++;\n        }\n        return (t1, c1, t2, c2);\n    }\n\n    function f1() public {\n        try this.f2{gas: 500000}() {\n            t2++;\n        } catch {\n            c2++;\n        }\n    }\n\n    function f2() public {\n        assembly {\n            return(0, 320000000000)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/unused/argument.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\n// Report https://linear.app/matterlabs/issue/CPR-208/calldata-array-runtime-error\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(bool[1] memory a) public pure returns(uint8) {\n        return 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/unused/arguments_many.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b, uint256 c, uint256 d, uint256 e, uint256 f) public pure returns(uint256) {\n        return d;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/unused/cases.sol":{"content":"//! { \"cases\": [] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function entry() public pure returns(uint64) {\n        return 1;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/add.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034344\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839121\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3907956900864202467\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0x050000000000000000000000000000000000000000000000000000000b000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0x54ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x1f223fffffffffeaf12ffe44fffffffe5fffffb6fff5fffafffe42e76dfffffe\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423343443375834785783473\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23784273472384723848213821342323233222\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := add(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/addmod.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0x050000000000000000000000000000000000000000000000000000000b000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0x54ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"two_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0x050000000000000000000000000000000000000000000000000000000b000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0x54ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"385347583459430234923842734623542325264782394023482374625423\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3806109516113667800853767386706858816392394866986028175\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"43873543534623235553423423423949234923947324723387478233\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3464170909841972837815004710006741383053238982131669865\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8939384548956875984554349903434903490994494993020959\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8939384548956875984554349903434903490994494993020960\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"54367829174652819374654281934765281937468197465281947562815652819\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1122390563298694939482039005289855975809195069546337164\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8934583485834958423984923948923489238948923232849429834\",\n//!                 \"5743892143323342342342342342343234234234234233423432423\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1208684754231213194457793386619225626218462219187592801\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"67345763475734785873485834858348958348582848238423848\",\n//!                 \"47076922298769071715669669331407893506027850516560019248\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_sum_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2627823478238423324723748234889489238948234823848237723\",\n//!                 \"4107071959225120461210988217434259684534112799694397006\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_sum\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"78534387453485348583489583489583495834858934985982398\",\n//!                 \"6656361050010058437351246868834165427647488688556652330\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_sum_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2745764578678457867485678478567845576875845678454554545\",\n//!                 \"3989130858785085918449057973755903346606501945088080182\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6734895437463543785934736452323748923482347623542634727\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_ordinar_bigger_sum\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4567890987654678923042342342342342234534234\",\n//!                 \"34234234322332342356457567897665235\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4567891021888913245374684698799910132199469\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\",\n//!                 \"0x050000000000000000000000000000000000000000000000000000000b000000\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961175\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\",\n//!                 \"0x54ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961176\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\",\n//!                 \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"143268280533798984280626563216701884452898533151473998\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961175\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961175\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961176\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961176\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423342323233245234534443443375834785783474\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4785420515141501473933080503501442490599789180695732857\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"23784273472384723848213821342323233223\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658078121630935932410471473464497505194398\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3676739177993772322739978474771624323036938686821287622\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"385347583459430234923842734623542325264782394023482374625423\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"385347583459430234923842734623542325264782394023482374625423\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"43873543534623235553423423423949234923947324723387478233\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"43873543534623235553423423423949234923947324723387478233\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8939384548956875984554349903434903490994494993020959\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8939384548956875984554349903434903490994494993020960\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"54367829174652819374654281934765281937468197465281947562815652819\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"54367829174652819374654281934765281937468197465281947562815652820\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8934583485834958423984923948923489238948923232849429834\",\n//!                 \"5743892143323342342342342342343234234234234233423432423\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"14678475629158300766327266291266723473183157466272862257\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"67345763475737323342423423423423432232333434485834858348958348582848238423848\",\n//!                 \"48446325761578872081147561585264475620936550179805705690499235425064891216086\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2627823478238423324723748234889489238948234823848237723\",\n//!                 \"115792089237316195423568357185209669429945260917405674550218635773089281402212\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\",\n//!                 \"0x54ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\",\n//!                 \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"14082212818049917570678938371545509262648545780014710136968537875118318157823\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423342323233245234534443443375834785783474\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423342323233245234534443443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"23784273472384723848213821342323233223\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23784273472384723848213821342323233223\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b, uint256 c) external pure returns(uint256 result) {\n        assembly {\n            result := addmod(a, b, c)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/address.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"Test.address\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := address()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/and.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xE0281C82903B3293902E82845FF823834309A8F239982392328448AB42789DA8\", \"0xA80185C2323AA131233FED325FF823834336742387428823823238FCAD223AB4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xa0000482103a2011002e80005ff823834300202201000002020008a8002018a0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\", \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0x050000000000000000000000000000000000000000000000000000000b000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423343443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23784273472384723848213821342323233223\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := and(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/blockhash.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x3737373737373737373737373737373737373737373737373737373737373737\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"current_minus_257\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"43\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"current_minus_256\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"44\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"current_minus_255\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"45\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"122\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"current_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"299\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"current\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"300\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"current_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"301\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"23492394923\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) external view returns(uint256 result) {\n        assembly {\n            result := blockhash(a)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/byte.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x0023892AB2783278893489CDE384983994390349FC2988248AA83483898934FC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x53\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFF872893489348939CA433905903CDF3488893483003400FC4983CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x2300892AB2783278893489CDE384983994390349FC2988248AA83483898934FC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x48\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x87FF2893489348939CA433905903CDF3488893483003400FC4983CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0x23892AB2783278893489CDE38498399439000349FC2988248AA83483898934FC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xCD\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0x872893489348939CA433905903CDF34888FF93483003400FC4983CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"31\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"31\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"31\", \"0x23892AB2783278893489CDE384983994390349FC2988248AA83483898934FC00\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"31\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x43\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"31\", \"0x872893489348939CA433905903CDF3488893483003400FC4983CCC34343443FF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"31\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"255\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_plus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_plus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_plus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"last_byte_plus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := byte(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/caller.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"caller\": \"0x0000000000000000000000000000000000000000\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"caller\": \"0x0000000000000000000000000000000000000001\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"caller\": \"0xA8740AF4B880AEE34245AC232323BB4A3424432F\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xA8740AF4B880AEE34245AC232323BB4A3424432F\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"caller\": \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external payable returns(uint256 result) {\n        assembly {\n            result := caller()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/callvalue.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"0 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"1 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"433478394034343 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"340282366920938463463374607431768211455 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external payable returns(uint256 result) {\n        assembly {\n            result := callvalue()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/chainid.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"$CHAIN_ID\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.14;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := chainid()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/codecopy.sol":{"content":"//! { \"targets\": [ \"eravm\" ], \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"address\": \"Test.address\",\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    constructor() public {\n        assembly {\n            codecopy(0, 0, codesize())\n            log0(0, codesize())\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/codesize.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_deploy\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"address\": \"Test.address\",\n//!                 \"topics\": [],\n//!                 \"values\": [\"*\"]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_deploy\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": \"0x00\"\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"address\": \"Test.address\",\n//!                 \"topics\": [],\n//!                 \"values\": [\"*\"]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_deploy\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": \"0x00000000000000000000000000000000000000\"\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"address\": \"Test.address\",\n//!                 \"topics\": [],\n//!                 \"values\": [\"*\"]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_deploy\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [ \"0\" ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"address\": \"Test.address\",\n//!                 \"topics\": [],\n//!                 \"values\": [\"*\"]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_deploy\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\"*\"]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_deploy\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\"*\"],\n//!         \"events\": [\n//!             {\n//!                 \"address\": \"Test.address\",\n//!                 \"topics\": [],\n//!                 \"values\": [\"*\"]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"runtime\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"#deployer\",\n//!             \"calldata\": [\n//!             ],\n//!             \"expected\": {\n//!                 \"return_data\": [\"*\"],\n//!                 \"events\": [\n//!                     {\n//!                         \"address\": \"Test.address\",\n//!                         \"topics\": [],\n//!                         \"values\": [\"*\"]\n//!                     }\n//!                 ]\n//!             }\n//!         },\n//!         {\n//!             \"method\": \"runtime\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract Test {\n    constructor() public {\n        assembly {\n            mstore(0, codesize())\n            log0(0, 32)\n        }\n    }\n\n    function runtime() external {\n        assembly {\n            mstore(0, eq(codesize(), extcodesize(address())))\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/div.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3456789009876545678\", \"45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"76\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0xab000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"456789098765467892304234234234234234234\", \"7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4868430787753902008116956541571039081557\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := div(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/eq.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0xab000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := eq(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/exp.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"21\", \"52\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"569381465857367090636427305760163241950353347303833610101782245331441\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_big\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffe00000000000000000000000000000001\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0000000000000000000000000000000000000000000000000000000000010000\", \"16\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"46756260758475007021788099943083655901358133181480408838873172916982662561791\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := exp(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/gas.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := gt(gas(), 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/gasprice.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := gasprice()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/gt.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0xab000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := gt(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/invalid.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external pure returns(uint256) {\n        assembly {\n            invalid()\n        }\n        return 5;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/iszero.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xE0281C82903B3293902E82845FF823834309A8F239982392328448AB42789DA8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) external pure returns(uint256 result) {\n        assembly {\n            result := iszero(a)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/keccak256.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5429fdc28e48579bde709c0ca18c55d58f14c9438d5cd1829556be99fd68b97b\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2bf2abf2c4bdf72726403db1fbf139902a3226d549c0799e858f888ada5197ad\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x97e787e44ffc5c4e49ed8a96c73c0109a7f4b0ce2a483815cdec45a7559dae35\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5429fdc28e48579bde709c0ca18c55d58f14c9438d5cd1829556be99fd68b97b\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2bf2abf2c4bdf72726403db1fbf139902a3226d549c0799e858f888ada5197ad\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x97e787e44ffc5c4e49ed8a96c73c0109a7f4b0ce2a483815cdec45a7559dae35\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5429fdc28e48579bde709c0ca18c55d58f14c9438d5cd1829556be99fd68b97b\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2bf2abf2c4bdf72726403db1fbf139902a3226d549c0799e858f888ada5197ad\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x97e787e44ffc5c4e49ed8a96c73c0109a7f4b0ce2a483815cdec45a7559dae35\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5429fdc28e48579bde709c0ca18c55d58f14c9438d5cd1829556be99fd68b97b\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2bf2abf2c4bdf72726403db1fbf139902a3226d549c0799e858f888ada5197ad\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x97e787e44ffc5c4e49ed8a96c73c0109a7f4b0ce2a483815cdec45a7559dae35\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5429fdc28e48579bde709c0ca18c55d58f14c9438d5cd1829556be99fd68b97b\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2bf2abf2c4bdf72726403db1fbf139902a3226d549c0799e858f888ada5197ad\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x97e787e44ffc5c4e49ed8a96c73c0109a7f4b0ce2a483815cdec45a7559dae35\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5429fdc28e48579bde709c0ca18c55d58f14c9438d5cd1829556be99fd68b97b\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2bf2abf2c4bdf72726403db1fbf139902a3226d549c0799e858f888ada5197ad\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x97e787e44ffc5c4e49ed8a96c73c0109a7f4b0ce2a483815cdec45a7559dae35\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x3440fccadf57f3e851b64746c6699fd48cd89b0f6315eb296f40a802dd94bd9f\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xcebc8882fecbec7fb80d2cf4b312bec018884c2d66667c67a90508214bd8bafc\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"2383\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x2d336300c2d440badd7f3ca35724de42b9dd3f27886f24c82707fc165443bf72\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0f0a838eda887c623e495a21f05680ce7b4aab5289ece5279ca2d0845ef39976\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x55811889317195718ae63d8cf8bb3fbaaee3fe82c3fd4a59b81c0838c65aaffc\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xbf5889d879b503719ba152fbc614736f694853de501c054b5d42b1b42b05db3c\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x9ae9a199fa732b9802610c8489c8061a98cf89162cee5f065c68d4599493a8db\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"2383\", \"0xD5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x1d50aa894dae67e1ef784cd70304bba12e65302d4ee899da2182a40fe3469227\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\", \"0x82\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xb6afdc52eefaade537b79528e57bc71c4effe94bc0c4691230526e89fe6a1efe\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x79c391d2922f0eb7113d1dce8b9c92c3bb8bdc97a99da02785987da10d0966fa\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xa9c584056064687e149968cbab758a3376d22aedc6a55823d1b3ecbee81b8fb9\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"2383\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x464ee0fd3c58ff23b466742990170576f949f92b5f249999e7d12dafd2d4d4da\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xcecdf9a84d468f045f350c314d8a4f336e802911e24bce87c51b778e93d10b4c\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 offset, uint256 len) external pure returns(uint256 result) {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            result := keccak256(offset, len)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val) external pure returns(uint256) {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            // manually return as memory pointer can be overwritten\n            mstore(0, keccak256(offset, len))\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/log0.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"8340\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010100000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xA100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x4444444444444444444444444444444444444400000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xE6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xD5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0x82\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\",\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 offset, uint256 len) external {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            log0(offset, len)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val) external {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            log0(offset, len)\n            // TODO: can be removed after the VM fix\n            return(0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/log1.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010100000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xA100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x4444444444444444444444444444444444444400000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xE6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xD5\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0x82\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\",\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 offset, uint256 len, uint256 t1) external {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            log1(offset, len, t1)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val, uint256 t1) external {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            log1(offset, len, t1)\n            // TODO: can be removed after the VM fix\n            return(0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/log2.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\",\n//!                 \"0\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\",\n//!                 \"1\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\",\n//!                 \"0\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"8340\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\",\n//!                 \"0\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010100000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xA100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x4444444444444444444444444444444444444400000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xE6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xD5\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0x82\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\",\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 offset, uint256 len, uint256 t1, uint256 t2) external {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            log2(offset, len, t1, t2)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val, uint256 t1, uint256 t2) external {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            log2(offset, len, t1, t2)\n            // TODO: can be removed after the VM fix\n            return(0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/log3.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\",\n//!                 \"0\",\n//!                 \"0\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"0\",\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\",\n//!                 \"1\",\n//!                 \"0\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"0\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\",\n//!                 \"1\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"1\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\",\n//!                 \"0\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"8340\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\",\n//!                 \"0\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"1\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010100000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xA100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x4444444444444444444444444444444444444400000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xE6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xD5\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0x82\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\",\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 offset, uint256 len, uint256 t1, uint256 t2, uint256 t3) external {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            log3(offset, len, t1, t2, t3)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val, uint256 t1, uint256 t2, uint256 t3) external {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            log3(offset, len, t1, t2, t3)\n            // TODO: can be removed after the VM fix\n            return(0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/log4.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\",\n//!                 \"0\",\n//!                 \"0\",\n//!                 \"0\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"0\",\n//!                     \"0\",\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\",\n//!                 \"1\",\n//!                 \"0\",\n//!                 \"1\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"0\",\n//!                     \"1\",\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\",\n//!                 \"1\",\n//!                 \"1\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"1\",\n//!                     \"1\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\",\n//!                 \"0\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"8340\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"1\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\",\n//!                 \"0\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\",\n//!                 \"1\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"1\",\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"1\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"1\",\n//!                     \"1\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"7873277347887348384828938912903901239012089389127312737120012\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"8340\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010100000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\",\n//!                     \"0x0101010101010101010101010101010101010101010101010101010101010101\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xA100000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x4444444444444444444444444444444444444400000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xE6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xD5\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5\",\n//!                     \"0xD5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0x82\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\",\n//!                     \"0x8282828282828282828282828282828282828282828282828282828282828282\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"273\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"64\", \"0xFF\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                 \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\",\n//!                     \"0xA348384F3434BC232D4433AAF3232CCBFFFEE3454FF33545CCD4343F121D434A\"\n//!                 ],\n//!                 \"values\": [\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                     \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!                 ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 offset, uint256 len, uint256 t1, uint256 t2, uint256 t3, uint256 t4) external {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            log4(offset, len, t1, t2, t3, t4)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val, uint256 t1, uint256 t2, uint256 t3, uint256 t4) external {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            log4(offset, len, t1, t2, t3, t4)\n            // TODO: can be removed after the VM fix\n            return(0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/lt.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0xab000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x2fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0xef231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := lt(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/mload.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_value_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_value_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_value_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"19\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_value_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_value_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_value_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"19\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"2383\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"2513561237612763712737127371273871283871273172\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2513561237612763712737127371273871283871273172\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"2513561237612763712737127371273871283871273172\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2513561237612763712737127371273871283871273172\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"19\", \"2513561237612763712737127371273871283871273172\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2513561237612763712737127371273871283871273172\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"32\", \"2513561237612763712737127371273871283871273172\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2513561237612763712737127371273871283871273172\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"2383\", \"2513561237612763712737127371273871283871273172\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2513561237612763712737127371273871283871273172\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"2513561237612763712737127371273871283871273172\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2513561237612763712737127371273871283871273172\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"19\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"2383\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"with_value\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.19;\n\ncontract Test {\n    function main(uint256 key) external pure returns(uint256) {\n        assembly {\n            mstore(0, mload(key))\n            return(0, 32)\n        }\n    }\n\n    function with_value(uint256 key, uint256 value, uint8 outside) external pure returns(uint256) {\n        assembly {\n            if gt(key, 0) {\n                mstore8(sub(key, 1), outside)\n            }\n            mstore8(add(key, 32), outside)\n            mstore(key, value)\n            mstore(0, mload(key))\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/mod.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3456789009876545678\", \"45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"27913038370354150\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15903955902367335447395448984\", \"67897657890876\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_plus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a2\", \"0xab000000000000000000000000000000000000000000000000000000000000a1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xab000000000000000000000000000000000000000000000000000000000000a1\", \"0xab000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xab000000000000000000000000000000000000000000000000000000000000a1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"456789098765467892304234234234234234234\", \"7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"456789098765467892304234234234234234234\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423343443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6417771337354779485678372628500671724\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := mod(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/mstore.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"394934348834929392931283812381292121\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"394934348834929392931283812381292121\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"23232\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23232\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"19\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"23823848238483284838488483848348838348433\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23823848238483284838488483848348838348433\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"-12121312312312\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-12121312312312\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"9389324993493993\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"9821984989898348938948943983489893489389438349834\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"999999999999\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"111\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"453245432\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"33\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"2323\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFF00000000000000000000000000000000000000000000000000000000000000\", \"0x00FF000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"4\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFF00000000000000000000000000000000000000000000000000000000000000\", \"0x01FF000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"0\", \"13482894893289489238489829389489238489284892388292332\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000024095EFD136928AD0DD5540CA95A20796621785CF6EC\", \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"1024\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 key, uint256 value) external pure returns(uint256) {\n        assembly {\n            mstore(key, value)\n            return(key, 32)\n        }\n    }\n\n    function overwrite(uint256 key, uint256 value, uint8 beforeValue) external pure returns(uint256) {\n        assembly {\n            let offset := sub(key, gt(key, 0))\n            let len := add(33, gt(key, 0))\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), beforeValue)\n            }\n            mstore(key, value)\n            return(offset, len)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/mstore8.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"124\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7C00000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"232322334234234234234\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7A00000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"19\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFF00000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2383\", \"23823848238483284838488483848348838348433\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x9100000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"-12121312312312\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0800000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"9389324993493993\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"12\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"9821984989898348938948943983489893489389438349834\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"999999999999\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"111\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"453245432\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"33\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": []\n//!     }\n//! }, {\n//!     \"name\": \"zero_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"2323\", \"0\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFF00FF0000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"4\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFF01FF0000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_small_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"0\", \"197\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC5FF000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_byte_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"1233\", \"255\", \"0x00\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00FF000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! },  {\n//!     \"name\": \"256_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"1233\", \"256\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFF00FF0000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_big_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"12122\", \"13482894893289489238489829389489238489284892388292332\", \"0xAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xAAECAA0000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"overwrite\",\n//!             \"calldata\": [\n//!                 \"1024\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00FF000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 key, uint256 value) external pure returns(uint256) {\n        assembly {\n            mstore8(key, value)\n            return(key, 8)\n        }\n    }\n\n    function overwrite(uint256 key, uint256 value, uint8 beforeValue) external pure returns(uint256) {\n        assembly {\n            let offset := sub(key, gt(key, 0))\n            let len := add(2, gt(key, 0))\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), beforeValue)\n            }\n            mstore8(key, value)\n            return(offset, len)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/mul.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1559592207175311407777037810745307942\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x0000000000000000000000000000000100000000000000000000000000000001\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0000002000000000000000000000000000000000000000000000000000000000\", \"0x0000000000000000000000000000000000000000000000000000000008000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2345678909876543212345678909876543212345678909876543\", \"23456789098765432123456789876543212345678987654321\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"109870817467274783132168917047078478060902558898874809919449649221827584233615\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008680470018517627231306220616114140632078343856462\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853246200392168179315609370186570806406713\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := mul(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/mulmod.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x0000000000000000000000000000000100000000000000000000000000000001\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0000002000000000000000000000000000000000000000000000000000000000\", \"0x0000000000000000000000000000000000000000000000000000000008000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2345678909876543212345678909876543212345678909876543\", \"23456789098765432123456789876543212345678987654321\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"two_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x0000000000000000000000000000000100000000000000000000000000000001\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0000002000000000000000000000000000000000000000000000000000000000\", \"0x0000000000000000000000000000000000000000000000000000000008000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                \"2345678909876543212345678909876543212345678909876543\", \"23456789098765432123456789876543212345678987654321\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"385347583459430234923842734623542325264782394023482374625423\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"43873543534623235553423423423949234923947324723387478233\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8939384548956875984554349903434903490994494993020959\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8939384548956875984554349903434903490994494993020959\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"54367829174652819374654281934765281937468197465281947562815652819\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1122390563298694939482039005289855975809195069546337163\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909737783487438348343487656789\", \"3456789043333409876545678\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5676430915488228986215146216393544180428262509017295078\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"5893033507780600812692894395783280308047054170599805387\", \"18738036435609058585768\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_product_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"143295647605607314594356094730292530286858460075375207\", \"47\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_product\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\", \"1683723859365885946483684113080937230870586905885658682\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_product_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2244965145821181261978245484107916307827449207847544909\", \"3\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"6734895437463543785934736452323748923482347623542634727\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_ordinar_bigger_product\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4567892342342234534234\", \"3423423436457597665235\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15637829699989597708005861762222266079154990\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0x0000000000000000000000000000000100000000000000000000000000000001\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961175\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!                 \"0x0000000000000000000000000000000000000000000000000000000008000000\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961176\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2345678909876543212345678909876543212345678909876543\",\n//!                 \"23456789098765432123456789876543212345678987654321\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4264809475174460139372937695722005330348657185160810887\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961175\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5205817307728658054337357463547686623259643155181961175\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423342323233245234534443443375834785783474\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"5617213867212480757578809585112783067547734929923987190\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"23784273472384723848213821342323233223\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"3578153470724301227568936858877098024097400680412702913\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"6734895437463543785934736452323748923482347623542634728\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1846270932306819610647429224033438799896242185499682409\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"385347583459430234923842734623542325264782394023482374625423\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"43873543534623235553423423423949234923947324723387478233\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"8939384548956875984554349903434903490994494993020959\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"8939384548956875984554349903434903490994494993020959\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"54367829174652819374654281934765281937468197465281947562815652819\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"54367829174652819374654281934765281937468197465281947562815652819\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909737783487438348343487656789\", \"3456789043333409876545678\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15595922222219994270792624200954893890665171031928705745307942\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"14\",\n//!                 \"8270863516951156815969356072049136275233570333260040288532684571993794974281\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n//!                 \"0x0000000000000000000000000000000100000000000000000000000000000001\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0000002000000000000000000000000000000000000000000000000000000000\",\n//!                 \"0x0000000000000000000000000000000000000000000000000000000008000000\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2345678909876543212345678909876543212345678909876543\",\n//!                 \"23456789098765432123456789876543212345678987654321\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"109870817467274783132168917047078478060902558898874810394629740062300719137698\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423342323233245234534443443375834785783474\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"23784273472384723848213821342323233223\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b, uint256 c) external pure returns(uint256 result) {\n        assembly {\n            result := mulmod(a, b, c)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/not.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xE0281C82903B3293902E82845FF823834309A8F239982392328448AB42789DA8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x1FD7E37D6FC4CD6C6FD17D7BA007DC7CBCF6570DC667DC6DCD7BB754BD876257\"\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) external pure returns(uint256 result) {\n        assembly {\n            result := not(a)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/number.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"$BLOCK_NUMBER\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := number()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/or.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839121\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xE0281C82903B3293902E82845FF823834309A8F239982392328448AB42789DA8\", \"0xA80185C2323AA131233FED325FF823834336742387428823823238FCAD223AB4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xe8299dc2b23bb3b3b33fefb65ff82383433ffcf3bfdaabb3b2b678ffef7abfbc\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\", \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0x050000000000000000000000000000000000000000000000000000000b000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := or(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/origin.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000000009292929292929292929292929292929292929292\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := origin()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/pop.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xE0281C82903B3293902E82845FF823834309A8F239982392328448AB42789DA8\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! }, {\n//!     \"name\": \"max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a) external view {\n        assembly {\n            pop(a)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/revert.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"small_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"8\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"word_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"32\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"421587\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_words_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xF100\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFAA\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_31_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFE1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFEF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0x100000000\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_32_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"3334353453452342342354355544445321191012012\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_small_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"19\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_word\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"32\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"2383\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_words\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xF100\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_big_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFAA\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_31\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFE1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFEF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_2_in_32_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x100000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar_bigger_2_in_32\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"3334353453452342342354355544445321191012012\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"2383\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xA1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0x44\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xE6\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"2383\", \"0xD5\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\", \"0x82\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_one_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_small_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"123122\", \"19\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_word_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"12\", \"32\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_ordinar_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"1024\", \"2383\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_value_ordinar_words_len\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test_with_value\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xF100\", \"0xFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    function test(uint256 offset, uint256 len) external {\n        assembly {\n            mstore(0, 0xcc572cf9) // main selector\n            mstore(32, offset)\n            mstore(64, len)\n            let success := call(gas(), address(), 0, 28, 68, 0, 0)\n\n            mstore(0, success)\n            returndatacopy(32, 0, returndatasize())\n            if gt(success, 0) {\n                return(0, add(returndatasize(), 32))\n            }\n\n            if iszero(eq(len, returndatasize())) {\n                return(0, add(returndatasize(), 32))\n            }\n\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                if iszero(eq(shr(248, mload(add(i, 32))), 0)) {\n                    return(0, add(returndatasize(), 32))\n                }\n            }\n\n            // return some magic value in a success case\n            mstore(0, 0xdeadbeef)\n            return(0, 32)\n        }\n    }\n\n    function test_with_value(uint256 offset, uint256 len, uint8 val) external {\n        assembly {\n            mstore(0, 0xc9b9b445) // with_value selector\n            mstore(32, offset)\n            mstore(64, len)\n            mstore(96, val)\n            let success := call(gas(), address(), 0, 28, 100, 32, len)\n\n            mstore(0, success)\n            if gt(success, 0) {\n                return(0, add(returndatasize(), 32))\n            }\n\n            if iszero(eq(len, returndatasize())) {\n                return(0, add(returndatasize(), 32))\n            }\n\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                if iszero(eq(shr(248, mload(add(i, 32))), val)) {\n                    return(0, add(returndatasize(), 32))\n                }\n            }\n\n            // return some magic value in a success case\n            mstore(0, 0xdeadbeef)\n            return(0, 32)\n        }\n    }\n\n    function main(uint256 offset, uint256 len) external pure {\n        assembly {\n            // nullify memory ptr slot\n            mstore(0x40, 0)\n            revert(offset, len)\n        }\n    }\n\n    function with_value(uint256 offset, uint256 len, uint8 val) external view {\n        assembly {\n            for { let i := 0 } lt(i, len) { i := add(i, 1) }\n            {\n                mstore8(add(offset, i), val)\n            }\n            revert(offset, len)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/sar.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x29A44AC49A2C49A4AC81A482C81A482C81E6F9A1A21D59A1A21A1E661A1A1A21\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-316287267428118237672817312187119211596090618561856315618061562\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xC000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00000000005348958934589349590349059034905903CDF343443AB34344343C\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-575323187928221591706128151030714819346195542606177\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFF800000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xA6912B1268B12692B2069\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-211340361659\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-19342813113834066795298816\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"254_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"254\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-2\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"-632574534856236475345634624374238423192181237123712631236123123\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := sar(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/sdiv.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3456789009876545678\", \"45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"76\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0b000000000000000000000000000000000000000000000000000000000000a1\", \"0x0b000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"456789098765467892304234234234234234234\", \"7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2434215393876951004058478270785519540778\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-3456789009876545678\", \"-45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"76\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_to_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-456789098765467892304234234234234234234\", \"-7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2434215393876951004058478270785519540778\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3456789009876545678\", \"-45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-76\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-3456789009876545678\", \"45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-76\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_to_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_to_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"456789098765467892304234234234234234234\", \"-7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-456789098765467892304234234234234234234\", \"7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000001\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-2434215393876951004058478270785519540778\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-2434215393876951004058478270785519540778\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 a, int256 b) external pure returns(uint256 result) {\n        assembly {\n            result := sdiv(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/selfbalance.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"0 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"1 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"433478394034343 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_128_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"340282366920938463463374607431768211455 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"2_in_128\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [],\n//!             \"value\": \"340282366920938463463374607431768211455 wei\",\n//!             \"expected\": [\n//!                 \"0xffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }, {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"1 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x100000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_2_in_128\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [],\n//!             \"value\": \"340282366920938463463374607431768211455 wei\",\n//!             \"expected\": [\n//!                 \"0xffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }, {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ],\n//!             \"value\": \"48384899813922913922990329232 wei\"\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x1000000009C570D12AFFBBF971E8DCD8F\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.14;\n\ncontract Test {\n    function main() external payable returns(uint256 result) {\n        assembly {\n            result := selfbalance()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/sgt.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0b000000000000000000000000000000000000000000000000000000000000a1\", \"0x0b000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0x7f231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4511678909876567343489\", \"-3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-8362543825632458632465973420523238477347382874\", \"-8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7235459586150581064913783473102643589076950968712335714126511324781405536255\", \"-57505792273225172003577460839743825359377213102520121190104719553798906839039\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"-3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"-8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7235459586150581064913783473102643589076950968712335714126511324781405536255\", \"-57505792273225172003577460839743825359377213102520121190104719553798906839039\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7235459586150581064913783473102643589076950968712335714126511324781405536255\", \"57505792273225172003577460839743825359377213102520121190104719553798906839039\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 a, int256 b) external pure returns(uint256 result) {\n        assembly {\n            result := sgt(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/shl.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xA6912B1268B12692B206920B206920B2079BE686887566868868799868686886\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x10000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x589349590349059034905903CDF343443AB34344343CCC343434430000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xD59A1A21A1E661A1A1A218000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := shl(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/shr.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x29A44AC49A2C49A4AC81A482C81A482C81E6F9A1A21D59A1A21A1E661A1A1A21\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x00000000005348958934589349590349059034905903CDF343443AB34344343C\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bytes_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"40\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xA6912B1268B12692B2069\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"171\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0000000000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := shr(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/signextend.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x43\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34348443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8443\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\", \"0x5F21235A343BB4343C1A8543545FF3443340904201D8AC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5F21235A343BB4343C1A8543545FF3443340904201D8AC\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_big_positive\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0x121B4343C1A8543545FF3443340904201D8AC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x21B4343C1A8543545FF3443340904201D8AC\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"22\", \"0xAF21235A343BB4343C1A8543545FF3443340904201D8AC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFAF21235A343BB4343C1A8543545FF3443340904201D8AC\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_big_negative\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"17\", \"0xE34F4334AB343443DDC1B4343C1A8543545FF3443340904201D8AC\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1B4343C1A8543545FF3443340904201D8AC\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"25\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0x9348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x9348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"255_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"255\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"256_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"256\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"big_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"35242523534534534233424343343443\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x5348958934589349590349059034905903CDF343443AB34344343CCC34343443\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := signextend(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/sload_sstore.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"34892894892389893892438928348989389893234\", \"23489894892384898293893284839842384382388438438\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23489894892384898293893284839842384382388438438\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"23784273472384723848213821342323233223\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external returns(uint256 result) {\n        assembly {\n            sstore(a, b)\n            result := sload(a)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/slt.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0b000000000000000000000000000000000000000000000000000000000000a1\", \"0x0b000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0fff1ffffffffff5ffffff0fffffffff2ffffffafffafffcffff1ff234ffffff\", \"0x7f231ffffffffff4f12fff34ffffffff2fffffbbfffafffdffff22f538ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4511678909876567343489\", \"-3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-8362543825632458632465973420523238477347382874\", \"-8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7235459586150581064913783473102643589076950968712335714126511324781405536255\", \"-57505792273225172003577460839743825359377213102520121190104719553798906839039\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4511678909876567343489\", \"-3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_less\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4511678909876567343489\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"8362543825632458632465973420523238477347382874\", \"-8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-8362543825632458632465973420523238477347382874\", \"8362543825632458632465973420523238477347382873\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7235459586150581064913783473102643589076950968712335714126511324781405536255\", \"-57505792273225172003577460839743825359377213102520121190104719553798906839039\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_greater\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7235459586150581064913783473102643589076950968712335714126511324781405536255\", \"57505792273225172003577460839743825359377213102520121190104719553798906839039\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 a, int256 b) external pure returns(uint256 result) {\n        assembly {\n            result := slt(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/smod.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3456789009876545678\", \"45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"27913038370354150\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15903955902367335447395448984\", \"67897657890876\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_plus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0b000000000000000000000000000000000000000000000000000000000000a2\", \"0x0b000000000000000000000000000000000000000000000000000000000000a1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x0b000000000000000000000000000000000000000000000000000000000000a1\", \"0x0b000000000000000000000000000000000000000000000000000000000000a2\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0b000000000000000000000000000000000000000000000000000000000000a1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"456789098765467892304234234234234234234\", \"7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"456789098765467892304234234234234234234\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423343443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15101022404869751666946096985411952473\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-3456789009876545678\", \"-45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-27913038370354150\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-15903955902367335447395448984\", \"-67897657890876\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_plus_one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_bigger_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-456789098765467892304234234234234234234\", \"-7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-456789098765467892304234234234234234234\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-7437834752357434334343423343443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-15101022404869751666946096985411952474\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"-433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"3456789009876545678\", \"-45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"27913038370354150\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-3456789009876545678\", \"45116789098765678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-27913038370354150\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"15903955902367335447395448984\", \"-67897657890876\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-15903955902367335447395448984\", \"67897657890876\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_plus_one_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4975441334415930272106565762092058540570194653601742986070443062840017289378\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_plus_one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\", \"4975441334415930272106565762092058540570194653601742986070443062840017289377\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"6873546235472354672354762358492378590345034805934590348534\", \"-6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-6873546235472354672354762358492378590345034805934590348534\", \"6873546235472354672354762358492378590345034805934590348534\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_minus_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"-4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4975441334415930272106565762092058540570194653601742986070443062840017289377\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_ordinar_plus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\", \"4975441334415930272106565762092058540570194653601742986070443062840017289378\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-4975441334415930272106565762092058540570194653601742986070443062840017289377\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_bigger_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"456789098765467892304234234234234234234\", \"-7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"456789098765467892304234234234234234234\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_bigger_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-456789098765467892304234234234234234234\", \"7863249563247857289401203492047823764573465734573434537783\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-456789098765467892304234234234234234234\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-1\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423343443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"minus_ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"-7437834752357434334343423343443375834785783474\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-7437834752357434334343423343443375834785783474\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_minus_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"-23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"15101022404869751666946096985411952473\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-15101022404869751666946096985411952474\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_min\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0x8000000000000000000000000000000000000000000000000000000000000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"min_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x8000000000000000000000000000000000000000000000000000000000000000\", \"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"-1\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(int256 a, int256 b) external pure returns(uint256 result) {\n        assembly {\n            result := smod(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/stop.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external pure returns(uint256) {\n        assembly {\n            stop()\n        }\n        return 5;\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/sub.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457583574434735605593\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039457583574434735605594\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839119\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"2378423904230945903258934\", \"23788239928398\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2378423904207157663330536\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_min_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"4567897654356789765\", \"4567897654356789766\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_overflow\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"451167890987656789\", \"3456789009876545678\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853269984665640564039454578386794240751047\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"2\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"7437834752357434334343423343443375834785783475\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"115792089237316195423570985008687907853246200392168179315609370186570806406712\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := sub(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/timestamp.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"default\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"$BLOCK_TIMESTAMP\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main() external view returns(uint256 result) {\n        assembly {\n            result := timestamp()\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_instructions/xor.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"zero_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034343\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839120\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"433478394034343\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"433478394034342\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"121563127839120\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"121563127839121\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xE0281C82903B3293902E82845FF823834309A8F239982392328448AB42789DA8\", \"0xA80185C2323AA131233FED325FF823834336742387428823823238FCAD223AB4\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x48299940a20193a2b3116fb600000000003fdcd1bedaabb1b0b67057ef5aa71c\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_equals\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\", \"0x67AC08676F781278AA823890BC392384382FE19082382834A8237678CC128912\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_ordinar_to_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xfafffffffffffffffffffffffffffffffffffffffffffffffffffffff4ffffff\", \"0x050000000000000000000000000000000000000000000000000000000b000000\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_zero\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"1\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_one\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"1\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n//!     ]\n//! }, {\n//!     \"name\": \"ordinar_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"7437834752357434334343423343443375834785783474\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xfffffffffffffffffffffffffeb279d82a671462e39200afae5f1572f93de14d\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_ordinar\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"23784273472384723848213821342323233223\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xffffffffffffffffffffffffffffffffee1b50c7fa1013dbaed1bd15844d2e38\"\n//!     ]\n//! }, {\n//!     \"name\": \"max_max\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"main\",\n//!             \"calldata\": [\n//!                 \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.16;\n\ncontract Test {\n    function main(uint256 a, uint256 b) external pure returns(uint256 result) {\n        assembly {\n            result := xor(a, b)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/expressions_complex.sol":{"content":"//! { \"modes\": [ \"Y\", \"E\" ], \"cases\": [ {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"120\"\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xbbb\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xaaa\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"100\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"1500000\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"8888\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"9999999\" ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.1;\n\ncontract Test {\n    function complex() external {\n        assembly {\n            function emit(a, b) -> ret {\n                mstore(0, a)\n                log0(0, 32)\n                ret := b\n            }\n            function fact(n) -> ret {\n                if eq(n, 0) {\n                    ret := 1\n                    leave\n                }\n                ret := mul(\n                    fact(sub(n, 1)),\n                    n\n                )\n            }\n            let a := 100\n            mstore(0, fact(\n                sub(\n                    add(emit(9999999, 3), emit(8888, 8)), // 3 + 8 = 11\n                    emit(\n                        mul(\n                            a,\n                            mul(\n                                emit(a, 5), // 5\n                                add(emit(0xaaa, 1000), emit(0xbbb, 2000)) //  1000 + 2000 = 3000\n                            ) // 5 * 3000 = 15000\n                        ), // 100 * 15000 = 1500000\n                        fact(3) // 6\n                    ) // 6\n                ) // 11 - 6 = 5\n            )) // 5! = 120\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/expressions.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"literal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"literal\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"variable\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"variable\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef01\"\n//!     ]\n//! }, {\n//!     \"name\": \"function_call\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"function_call\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef02\"\n//!     ]\n//! }, {\n//!     \"name\": \"nested_calls\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nested_calls\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0\"\n//!     ]\n//! }, {\n//!     \"name\": \"evaluation_order\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"evaluation_order\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x300\"\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"nested_calls_evaluation_order\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nested_calls_evaluation_order\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0x600\"\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function literal() external {\n        assembly {\n            mstore(0, 0xdeadbeef)\n            return(0, 32)\n        }\n    }\n\n    function variable() external {\n        assembly {\n            let a := 0xdeadbeef01\n            mstore(0, a)\n            return(0, 32)\n        }\n    }\n\n    function function_call() external {\n        assembly {\n            function f() -> ret {\n                ret := 0xdeadbeef02\n            }\n            mstore(0, f())\n            return(0, 32)\n        }\n    }\n\n    function nested_calls() external {\n        assembly {\n            function f1(a) -> ret {\n                ret := mul(2, a)\n            }\n            function f2(a) -> ret {\n                ret := mul(8, a)\n            }\n            mstore(0, f2(f1(0xdeadbeef))) // 0xdeadbeef * 2 * 8 = 16 * 0xdeadbeef = 0xdeadbeef0\n            return(0, 32)\n        }\n    }\n\n    function evaluation_order() external {\n        assembly {\n            function side_effect_1() -> ret {\n                mstore(0, 0xdeadbeef01)\n                log0(0, 32)\n                ret := 0x100\n            }\n            function side_effect_2() -> ret {\n                mstore(0, 0xdeadbeef02)\n                log0(0, 32)\n                ret := 0x200\n            }\n            mstore(0, add(side_effect_2(), side_effect_1())) // 0x100 + 0x200 = 0x300\n            return(0, 32)\n        }\n    }\n\n    function nested_calls_evaluation_order() external {\n        assembly {\n            function side_effect_1() -> ret {\n                mstore(0, 0xdeadbeef01)\n                log0(0, 32)\n                ret := 0x100\n            }\n            function side_effect_2() -> ret {\n                mstore(0, 0xdeadbeef02)\n                log0(0, 32)\n                ret := 0x200\n            }\n            function side_effect_3() -> ret {\n                mstore(0, 0xdeadbeef03)\n                log0(0, 32)\n                ret := 0x300\n            }\n            function sum(a, b) -> ret {\n                ret := add(a, b)\n            }\n            mstore(0, add(side_effect_3(), sum(side_effect_2(), side_effect_1()))) // 0x100 + 0x200 + 0x300 = 0x600\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/for.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"empty_init_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_init_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_init_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_init_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef01\"\n//!     ]\n//! }, {\n//!     \"name\": \"revert_in_init_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_init_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef02\" ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"true_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"true_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"false_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"false_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef04\"\n//!     ]\n//! }, {\n//!     \"name\": \"string_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"string_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef05\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef05\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef05\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef05\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"empty_string_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_string_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef06\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"zero_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef07\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef08\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"number_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"number_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef09\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0a\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0b\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0c\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0d\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"runtime_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"runtime_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0a\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0a\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0b\"\n//!     ]\n//! }, {\n//!     \"name\": \"revert_in_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0xdeadbeef0c\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"empty_post_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_post_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0d\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_post_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_post_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef0e\" ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef0e\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"revert_in_post_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_post_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef0f\" ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"unreachable_post_block\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"unreachable_post_block\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef10\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"empty_body\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_body\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef11\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef11\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_body\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_body\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef12\" ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef12\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"revert_in_body\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_body\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef13\" ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"continue_in_body\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"continue_in_body\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef14\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef14\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"break_in_body\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"break_in_body\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef15\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"nested_loops\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nested_loops\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef16\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef17\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef18\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef19\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"continue_in_nested_loop\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"continue_in_nested_loop\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef17\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef17\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef18\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef17\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef17\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef18\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"break_in_nested_loop\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"break_in_nested_loop\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef18\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef19\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef18\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef19\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"empty_loop_init_block_side_effect\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_loop_init_block_side_effect\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef19\"\n//!     ]\n//! }, {\n//!     \"name\": \"empty_loop_post_block_side_effect\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_loop_post_block_side_effect\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef1a\"\n//!     ]\n//! }, {\n//!     \"name\": \"empty_loop_condition_side_effect\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_loop_condition_side_effect\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef1b\"\n//!     ]\n//! }, {\n//!     \"name\": \"empty_loop_body_side_effect\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_loop_body_side_effect\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef1c\"\n//!     ]\n//! }, {\n//!     \"name\": \"empty_loop\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_loop\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef1d\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef03\" ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ncontract Test {\n    function empty_init_block() external {\n        assembly {\n            let i := 0\n            for {} lt(i, 1) { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef)\n                log0(0, 32)\n            }\n            return(0, 0)\n        }\n    }\n\n    function return_in_init_block() external {\n        assembly {\n            let i := 0\n            mstore(0, 0xdeadbeef01)\n            for { return(0, 32) } lt(i, 1) { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_init_block() external {\n        assembly {\n            let i := 0\n            mstore(0, 0xdeadbeef02)\n            for { revert(0, 32) } lt(i, 1) { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function true_condition() external {\n        assembly {\n            for { let i := 0 } true { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef03)\n                log0(0, 32)\n                if eq(i, 2) {\n                    break\n                }\n            }\n            return(0, 0)\n        }\n    }\n\n    function false_condition() external {\n        assembly {\n            mstore(0, 0xdeadbeef04)\n            for { let i := 0 } false { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function string_condition() external {\n        assembly {\n            for { let i := 0 } \"abc\" { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef05)\n                log0(0, 32)\n                if eq(i, 3) {\n                    break\n                }\n            }\n            return(0, 0)\n        }\n    }\n\n    function empty_string_condition() external {\n        assembly {\n            mstore(0, 0xdeadbeef06)\n            for { let i := 0 } \"\" { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function zero_condition() external {\n        assembly {\n            mstore(0, 0xdeadbeef07)\n            for { let i := 0 } 0 { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function one_condition() external {\n        assembly {\n            for { let i := 0 } 1 { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef08)\n                log0(0, 32)\n                if eq(i, 0) {\n                    break\n                }\n            }\n            return(0, 0)\n        }\n    }\n\n    function number_condition() external {\n        assembly {\n            for { let i := 0 } 344342323832832883 { i := add(i, 1) } {\n                mstore(0, add(0xdeadbeef09, i))\n                log0(0, 32)\n                if eq(i, 4) {\n                    break\n                }\n            }\n            return(0, 0)\n        }\n    }\n\n    function runtime_condition() external payable {\n        assembly {\n            for { let i := 0 } lt(add(callvalue(), i), 2) { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef0a)\n                log0(0, 32)\n            }\n            return(0, 0)\n        }\n    }\n\n    function return_in_condition() external {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef0b)\n                ret := 1\n                return(0, 32)\n            }\n            for { let i := 0 } f() { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_condition() external {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef0c)\n                revert(0, 32)\n            }\n            for { let i := 0 } f() { i := add(i, 1) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function empty_post_block() external {\n        assembly {\n            for { let i := 0 } lt(i, 1) {} {\n                mstore(0, 0xdeadbeef0d)\n                log0(0, 32)\n                i := add(i, 1)\n            }\n            return(0, 0)\n        }\n    }\n\n    function return_in_post_block() external {\n        assembly {\n            for { let i := 0 } true { mstore(0, 0xdeadbeef0e) return(0, 32) } {\n                mstore(0, 0xdeadbeef0e)\n                log0(0, 32)\n            }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_post_block() external {\n        assembly {\n            for { let i := 0 } lt(i, 23232) { mstore(0, 0xdeadbeef0f) revert(0, 32) } {\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function unreachable_post_block() external {\n        assembly {\n            for { let i := 0 } lt(i, 23232) { revert(0, 32) } {\n                mstore(0, 0xdeadbeef10)\n                log0(0, 32)\n                break\n            }\n            return(0, 0)\n        }\n    }\n\n    function empty_body() external {\n        assembly {\n            for { let i := 0 } lt(i, 2) { mstore(0, 0xdeadbeef11) log0(0, 32) i := add(i, 1) } {}\n            return(0, 0)\n        }\n    }\n\n    function return_in_body() external {\n        assembly {\n            for { let i := 0 } iszero(eq(i, 5)) { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef12)\n                log0(0, 32)\n                return(0, 32)\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_body() external {\n        assembly {\n            for { let i := 0 } iszero(eq(i, 5)) { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef13)\n                revert(0, 32)\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function continue_in_body() external {\n        assembly {\n            for { let i := 0 } iszero(eq(i, 2)) { i := add(i, 1) } {\n                mstore(0, 0xdeadbeef14)\n                log0(0, 32)\n                continue\n                revert(0, 32)\n            }\n            return(0, 0)\n        }\n    }\n\n    function break_in_body() external {\n        assembly {\n            for { let i := 5 } gt(i, 3) { i := sub(i, 1) } {\n                mstore(0, 0xdeadbeef15)\n                log0(0, 32)\n                break\n                mstore(0, 0xe2202)\n                log0(0, 32)\n            }\n            return(0, 0)\n        }\n    }\n\n    function nested_loops() external {\n        assembly {\n            for { let i := 0 } lt(i, 2) { i := add(i, 1) } {\n                for { let j := 0 } lt(j, 2) { j := add(j, 1) } {\n                    mstore(0, add(0xdeadbeef16, add(mul(i, 2), j)))\n                    log0(0, 32)\n                }\n            }\n            return(0, 0)\n        }\n    }\n\n    function continue_in_nested_loop() external {\n        assembly {\n            for { let i := 0 } lt(i, 2) { i := add(i, 1) } {\n                for { let j := 0 } lt(j, 2) { j := add(j, 1) } {\n                    mstore(0, 0xdeadbeef17)\n                    log0(0, 32)\n                    continue\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                mstore(0, 0xdeadbeef18)\n                log0(0, 32)\n            }\n            return(0, 0)\n        }\n    }\n\n    function break_in_nested_loop() external {\n        assembly {\n            for { let i := 0 } lt(i, 2) { i := add(i, 1) } {\n                for { let j := 0 } lt(j, 2) { j := add(j, 1) } {\n                    mstore(0, 0xdeadbeef18)\n                    log0(0, 32)\n                    break\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                mstore(0, 0xdeadbeef19)\n                log0(0, 32)\n            }\n            return(0, 0)\n        }\n    }\n\n    function empty_loop_init_block_side_effect() external pure {\n        assembly {\n            for { mstore(0, 0xdeadbeef19) } false {} {}\n            return(0, 32)\n        }\n    }\n\n    function empty_loop_post_block_side_effect() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef1a)\n            for {} true { return(0, 32) } {}\n            revert(0, 0)\n        }\n    }\n\n    function empty_loop_condition_side_effect() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef1b)\n            }\n            for {} f() {} {}\n            return(0, 32)\n        }\n    }\n\n    function empty_loop_body_side_effect() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef1c)\n            for {} true {} {\n                return(0, 32)\n            }\n            revert(0, 0)\n        }\n    }\n\n    function empty_loop() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef1d)\n            for {} false {} {}\n            return(0, 32)\n        }\n    }\n\n    function complex() external payable {\n        assembly {\n            for {} true {} {\n                for { let i := 0 } lt(i, 2) { i := add(i, 1) } {\n                    for { let p := callvalue() } lt(p, 2) { p := add(p, 1) } {\n                        if eq(p, 1) {\n                            continue\n                        }\n                        mstore(0, 0xdeadbeef01)\n                        log0(0, 32) // 1 * 2 * 1 = 2 times\n                    }\n                    for { let j := 2 } gt(j, 0) { j := sub(j, 1) } {\n                        for {} true {} {\n                            mstore(0, 0xdeadbeef02)\n                            log0(0, 32) // 1 * 2 * 2 * 1 = 4 times\n                            break\n                            revert(0, 32)\n                        }\n                        if eq(j, 1) {\n                            break\n                        }\n                    }\n                }\n                for { let h := 1 } lt(h, 5) { h := add(h, 1) } {\n                    mstore(0, 0xdeadbeef03)\n                    log0(0, 32) // 1 * 3 = 3 times\n                    if eq(h, 3) {\n                        return(0, 32)\n                    }\n                }\n                break\n            }\n            revert(0, 0)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/free_memory_pointer.sol":{"content":"//! { \"targets\": [ \"eravm\" ], \"modes\": [\n//!     \"Y\",\n//!     \"E- >=0.5.5\",\n//!     \"E+ >=0.8.15\",\n//!     \"I\"\n//! ], \"cases\": [ {\n//!     \"name\": \"main\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"test\",\n//!             \"calldata\": [\n//!             ]\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"exception\": true\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function test() external returns (uint) {\n        assembly {\n            mstore(64, 1000000000000)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/if.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"true_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"true_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"false_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef01\"\n//!     ]\n//! }, {\n//!     \"name\": \"string_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"string_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef02\"\n//!     ]\n//! }, {\n//!     \"name\": \"empty_string_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_string_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef03\"\n//!     ]\n//! }, {\n//!     \"name\": \"zero_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"zero_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef04\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef05\"\n//!     ]\n//! }, {\n//!     \"name\": \"number_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"number_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef06\"\n//!     ]\n//! }, {\n//!     \"name\": \"true_runtime_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"true_runtime_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef07\"\n//!     ]\n//! }, {\n//!     \"name\": \"false_runtime_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"false_runtime_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef08\"\n//!     ]\n//! }, {\n//!     \"name\": \"return_in_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef09\"\n//!     ]\n//! }, {\n//!     \"name\": \"revert_in_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": [ \"0xdeadbeef0a\" ]\n//!     }\n//! }, {\n//!     \"name\": \"empty_statement_condition_side_effect\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_statement_condition_side_effect\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0b\"\n//!     ]\n//! }, {\n//!     \"name\": \"return_in_statement\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_statement\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0c\"\n//!     ]\n//! }, {\n//!     \"name\": \"revert_in_statement\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_statement\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": [ \"0xdeadbeef0d\" ]\n//!     }\n//! }, {\n//!     \"name\": \"nested_ifs\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nested_ifs\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0e\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef02\" ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ncontract Test {\n    function true_condition() external pure {\n        assembly {\n            if true {\n                mstore(0, 0xdeadbeef)\n            }\n            return(0, 32)\n        }\n    }\n\n    function false_condition() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef01)\n            if false {\n                mstore(0, 0xdeadbeef)\n            }\n            return(0, 32)\n        }\n    }\n\n    function string_condition() external pure {\n        assembly {\n            if \"abc\" {\n                mstore(0, 0xdeadbeef02)\n            }\n            return(0, 32)\n        }\n    }\n\n    function empty_string_condition() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef03)\n            if \"\" {\n                mstore(0, 0xdeadbeef)\n            }\n            return(0, 32)\n        }\n    }\n\n    function zero_condition() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef04)\n            if 0 {\n                mstore(0, 0xdeadbeef)\n            }\n            return(0, 32)\n        }\n    }\n\n    function one_condition() external pure {\n        assembly {\n            if 1 {\n                mstore(0, 0xdeadbeef05)\n            }\n            return(0, 32)\n        }\n    }\n\n\n    function number_condition() external pure {\n        assembly {\n            if 344342323832832883 {\n                mstore(0, 0xdeadbeef06)\n            }\n            return(0, 32)\n        }\n    }\n\n    function true_runtime_condition() external payable {\n        assembly {\n            if eq(callvalue(), 0) {\n                mstore(0, 0xdeadbeef07)\n            }\n            return(0, 32)\n        }\n    }\n\n    function false_runtime_condition() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef08)\n            if eq(calldataload(0), 0) {\n                mstore(0, 0xdeadbeef)\n            }\n            return(0, 32)\n        }\n    }\n\n    function return_in_condition() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef09)\n                ret := 1\n                return(0, 32)\n            }\n            if f() {\n                mstore(0, 0xdeadbeef)\n            }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_condition() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef0a)\n                revert(0, 32)\n            }\n            if f() {\n                mstore(0, 0xdeadbeef)\n            }\n            return(0, 32)\n        }\n    }\n\n    function empty_statement_condition_side_effect() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef0b)\n            }\n            if f() {}\n            return(0, 32)\n        }\n    }\n\n    function return_in_statement() external pure {\n        assembly {\n            if true {\n                mstore(0, 0xdeadbeef0c)\n                return(0, 32)\n            }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_statement() external pure {\n        assembly {\n            if true {\n                mstore(0, 0xdeadbeef0d)\n                revert(0, 32)\n            }\n            return(0, 32)\n        }\n    }\n\n    function nested_ifs() external pure {\n        assembly {\n            if true {\n                if true {\n                    mstore(0, 0xdeadbeef0e)\n                }\n            }\n            return(0, 32)\n        }\n    }\n\n    function complex() external payable {\n        assembly {\n            if true {\n                if false {\n                    if eq(callvalue(), 0) {\n                        mstore(0, 0xdeadbeef01)\n                        log0(0, 32)\n                    }\n                    revert(0, 32)\n                }\n                mstore(0, 0xdeadbeef02)\n                log0(0, 32)\n                if eq(1, 1) {\n                    if eq(callvalue(), 200) {\n                        if false {\n                            mstore(0, 0xdeadbeef03)\n                            log0(0, 32)\n                        }\n                    }\n                }\n                if eq(add(1, 2), 3) {\n                    if eq(1, 2) {\n                        revert(0, 32)\n                    }\n                    if true {\n                        return(0, 32)\n                    }\n                }\n            }\n            revert(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/literals.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"decimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"decimal\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"4024342343240230\"\n//!     ]\n//! }, {\n//!     \"name\": \"hexadecimal\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"hexadecimal\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"true\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"_true\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\"\n//!     ]\n//! }, {\n//!     \"name\": \"false\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"_false\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"string\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"_string\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x6a73646a736a646a6431323331325c2f2212e2888e0000000000000000000000\"\n//!     ]\n//! }, {\n//!     \"name\": \"hex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"_hex\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0x0012340000000000000000000000000000000000000000000000000000000000\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ncontract Test {\n    function decimal() external pure {\n        assembly {\n            mstore(0, 4024342343240230)\n            return(0, 32)\n        }\n    }\n\n    function hexadecimal() external pure {\n        assembly {\n            mstore(0, 0x00000000000deadbeef)\n            return(0, 32)\n        }\n    }\n\n    function _true() external pure {\n        assembly {\n            mstore(0, true)\n            return(0, 32)\n        }\n    }\n\n    function _false() external pure {\n        assembly {\n            mstore(0, false)\n            return(0, 32)\n        }\n    }\n\n    function _string() external pure {\n        assembly {\n            mstore(0, \"jsdjsjdjd\\\n12312\\\\/\\\"\\x12\\u220E\")\n            return(0, 32)\n        }\n    }\n\n    function _hex() external pure {\n        assembly {\n            mstore(0, hex\"001234\")\n            return(0, 32)\n        }\n    }\n}"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/statements.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"simple_statement\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"simple_statement\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"nested_statements\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nested_statements\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_middle\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_middle\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0xdeadbeef\"\n//!         ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"revert_in_middle\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_middle\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [\n//!             \"0xdeadbeef\"\n//!         ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"return_in_nested_statement\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_nested_statement\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef02\" ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"revert_in_nested_statement\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_nested_statement\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef02\" ],\n//!         \"exception\": true\n//!     }\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef04\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef05\" ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.12;\n\ncontract Test {\n    function simple_statement() external {\n        assembly {\n            {\n                mstore(0, 0xdeadbeef)\n                log0(0, 32)\n            }\n        }\n    }\n\n\n    function nested_statements() external {\n        assembly {\n            {\n                {\n                    mstore(0, 0xdeadbeef01)\n                    log0(0, 32)\n                }\n                mstore(0, 0xdeadbeef02)\n                log0(0, 32)\n            }\n        }\n    }\n\n    function return_in_middle() external {\n        assembly {\n            {\n                mstore(0, 0xdeadbeef)\n                log0(0, 32)\n                return(0, 32)\n                mstore(0, 0xdeadbeef02)\n                log0(0, 32)\n            }\n        }\n    }\n\n    function revert_in_middle() external {\n        assembly {\n            {\n                mstore(0, 0xdeadbeef)\n                log0(0, 32)\n                revert(0, 32)\n                mstore(0, 0xdeadbeef02)\n                log0(0, 32)\n            }\n        }\n    }\n\n    function return_in_nested_statement() external {\n        assembly {\n            {\n                mstore(0, 0xdeadbeef01)\n                log0(0, 32)\n                {\n                    mstore(0, 0xdeadbeef02)\n                    return(0, 32)\n                }\n            }\n        }\n    }\n\n    function revert_in_nested_statement() external {\n        assembly {\n            {\n                mstore(0, 0xdeadbeef01)\n                log0(0, 32)\n                {\n                    mstore(0, 0xdeadbeef02)\n                    revert(0, 32)\n                }\n            }\n        }\n    }\n\n    function complex() external {\n        assembly {\n            {{\n                mstore(0, 0xdeadbeef01)\n                log0(0, 32)\n                {{{{{{{{{{{{{{{\n                    {{{{{{{{{{{\n                        mstore(0, 0xdeadbeef02)\n                        log0(0, 32)\n                    }}}}}}}}}}}\n                    mstore(0, 0xdeadbeef03)\n                    log0(0, 32)\n                }}}}}}}}}}}}}}}\n                mstore(0, 0xdeadbeef04)\n                log0(0, 32)\n            }}\n            mstore(0, 0xdeadbeef05)\n            log0(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/switch.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"true_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"true_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"false_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"false_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef01\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"string_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"string_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"empty_string_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_string_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"zero_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"zero_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef04\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"one_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef05\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"number_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"number_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef06\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"runtime_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"runtime_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef07\" ]\n//!             }\n//!         ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef08\"\n//!     ]\n//! }, {\n//!     \"name\": \"revert_in_condition\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_condition\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": [ \"0xdeadbeef09\" ]\n//!     }\n//! }, {\n//!     \"name\": \"return_in_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"return_in_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0a\"\n//!     ]\n//! }, {\n//!     \"name\": \"revert_in_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"revert_in_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"exception\": true,\n//!         \"return_data\": [ \"0xdeadbeef0b\" ]\n//!     }\n//! }, {\n//!     \"name\": \"nested_switchs\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"nested_switchs\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0c\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_reachable_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one_reachable_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0d\"\n//!     ]\n//! }, {\n//!     \"name\": \"one_unreachable_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"one_unreachable_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0e\"\n//!     ]\n//! }, {\n//!     \"name\": \"only_default_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"only_default_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef0f\"\n//!     ]\n//! }, {\n//!     \"name\": \"reachable_default_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"reachable_default_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef10\"\n//!     ]\n//! }, {\n//!     \"name\": \"unreachable_default_case\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"unreachable_default_case\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef11\"\n//!     ]\n//! }, {\n//!     \"name\": \"empty_default_case_condition_side_effect\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"empty_default_case_condition_side_effect\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef12\"\n//!     ]\n//! }, {\n//!     \"name\": \"many_cases\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"many_cases\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef13\"\n//!     ]\n//! }, {\n//!     \"name\": \"complex\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"complex\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": {\n//!         \"return_data\": [ \"0xdeadbeef04\" ],\n//!         \"events\": [\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef02\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef03\" ]\n//!             },\n//!             {\n//!                 \"topics\": [],\n//!                 \"values\": [ \"0xdeadbeef04\" ]\n//!             }\n//!         ]\n//!     }\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ncontract Test {\n    function true_condition() external {\n        assembly {\n            switch true\n                case 12312 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 1 {\n                    mstore(0, 0xdeadbeef)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function false_condition() external {\n        assembly {\n            switch false\n                case 1 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 0 {\n                    mstore(0, 0xdeadbeef01)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function string_condition() external {\n        assembly {\n            switch \"abc\"\n                case \"acd\" {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 44048180597813453602326562734351324025098966208897425494240603688123167145984 {\n                    mstore(0, 0xdeadbeef02)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function empty_string_condition() external {\n        assembly {\n            switch \"\"\n                case \"0\" {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 0 {\n                    mstore(0, 0xdeadbeef03)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function zero_condition() external {\n        assembly {\n            switch 0\n                case true {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case false {\n                    mstore(0, 0xdeadbeef04)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function one_condition() external {\n        assembly {\n            switch 1\n                case 0x10 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 1 {\n                    mstore(0, 0xdeadbeef05)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function number_condition() external {\n        assembly {\n            switch 344342323832832883\n                case 344342323832832884 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 344342323832832883 {\n                    mstore(0, 0xdeadbeef06)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function runtime_condition() external payable {\n        assembly {\n            switch add(callvalue(), 100)\n                case 212 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 100 {\n                    mstore(0, 0xdeadbeef07)\n                    log0(0, 32)\n                }\n            return(0, 0)\n        }\n    }\n\n    function return_in_condition() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef08)\n                ret := 1\n                return(0, 32)\n            }\n            switch f()\n                case 0 {\n                    mstore(0, 0xdeadbeef)\n                }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_condition() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef09)\n                revert(0, 32)\n            }\n            switch f()\n                default {\n                    mstore(0, 0xdeadbeef)\n                }\n            return(0, 32)\n        }\n    }\n\n    function return_in_case() external {\n        assembly {\n            switch 4\n                case 4  {\n                    mstore(0, 0xdeadbeef0a)\n                    return(0, 32)\n                }\n                case 5 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n            revert(0, 32)\n        }\n    }\n\n    function revert_in_case() external {\n        assembly {\n            switch 100\n                case 0 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 100 {\n                    mstore(0, 0xdeadbeef0b)\n                    revert(0, 32)\n                }\n                default {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n            return(0, 32)\n        }\n    }\n\n    function nested_switchs() external {\n        assembly {\n            switch true\n                case 1 {\n                    switch 10\n                        case 10 {\n                            mstore(0, 0xdeadbeef0c)\n                        }\n                        case 11 {\n                            mstore(0, 0xe2202)\n                            log0(0, 32)\n                        }\n                }\n                default {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n            return(0, 32)\n        }\n    }\n\n    function one_reachable_case() external pure {\n        assembly {\n            switch 100\n                case 100 {\n                    mstore(0, 0xdeadbeef0d)\n                }\n            return(0, 32)\n        }\n    }\n\n    function one_unreachable_case() external pure {\n        assembly {\n            mstore(0, 0xdeadbeef0e)\n            switch 10\n                case 11 {\n                    mstore(0, 0xe2202)\n                }\n            return(0, 32)\n        }\n    }\n\n    function only_default_case() external pure {\n        assembly {\n            switch \"a\"\n                default {\n                    mstore(0, 0xdeadbeef0f)\n                }\n            return(0, 32)\n        }\n    }\n\n    function reachable_default_case() external {\n        assembly {\n            switch 1231233123\n                case 0 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case \"a\" {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                default {\n                    mstore(0, 0xdeadbeef10)\n                }\n            return(0, 32)\n        }\n    }\n\n    function unreachable_default_case() external {\n        assembly {\n            switch 49\n                case 0 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 49 {\n                    mstore(0, 0xdeadbeef11)\n                }\n                case 222 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                default {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n            return(0, 32)\n        }\n    }\n\n    function empty_default_case_condition_side_effect() external pure {\n        assembly {\n            function f() -> ret {\n                mstore(0, 0xdeadbeef12)\n            }\n            switch f()\n            default {}\n            return(0, 32)\n        }\n    }\n\n    function many_cases() external {\n        assembly {\n            switch 100\n                case 0 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 20 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 40 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 60 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 80 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 100 {\n                    mstore(0, 0xdeadbeef13)\n                }\n                case 120 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 140 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 160 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n                case 180 {\n                    mstore(0, 0xe2202)\n                    log0(0, 32)\n                }\n            return(0, 32)\n        }\n    }\n\n    function complex() external payable {\n        assembly {\n            switch eq(callvalue(), 0)\n                case 1 {\n                    switch \"a\"\n                        case 0x6200000000000000000000000000000000000000000000000000000000000000 {\n                            mstore(0, 0xdeadbeef01)\n                            log0(0, 32)\n                        }\n                        default {\n                            mstore(0, 0xdeadbeef02)\n                            log0(0, 32)\n                            switch 5\n                                case 5 {\n                                    mstore(0, 0xdeadbeef03)\n                                    log0(0, 32)\n                                }\n                                default {\n                                    revert(0, 32)\n                                }\n                        }\n                    mstore(0, 0xdeadbeef04)\n                    log0(0, 32)\n                    switch add(1, 2)\n                        case 1 {\n                            revert(0, 32)\n                        }\n                        case 2 {\n                            revert(0, 32)\n                        }\n                }\n                default {\n                    switch 5\n                        case 5 {\n                            mstore(0, 0xdeadbeef05)\n                            log0(0, 32)\n                        }\n                        case 4 {\n                            mstore(0, 0xdeadbeef06)\n                            log0(0, 32)\n                            revert(0, 32)\n                        }\n                }\n            return(0, 32)\n        }\n    }\n}\n"},"contracts/era-compiler-tests/solidity/simple/yul_semantic/variables.sol":{"content":"//! { \"cases\": [ {\n//!     \"name\": \"declare_without_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"declare_without_value\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"declare_tuple_without_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"declare_tuple_without_value\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0\", \"0\", \"0\"\n//!     ]\n//! }, {\n//!     \"name\": \"declare_with_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"declare_with_value\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"declare_tuple_with_value\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"declare_tuple_with_value\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\", \"3\"\n//!     ]\n//! }, {\n//!     \"name\": \"assign\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"assign\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"0xdeadbeef\"\n//!     ]\n//! }, {\n//!     \"name\": \"assign_tuple\",\n//!     \"inputs\": [\n//!         {\n//!             \"method\": \"assign_tuple\",\n//!             \"calldata\": []\n//!         }\n//!     ],\n//!     \"expected\": [\n//!         \"1\", \"2\", \"3\"\n//!     ]\n//! } ] }\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.17;\n\ncontract Test {\n    function declare_without_value() external {\n        assembly {\n            let x\n            mstore(0, x)\n            return(0, 32)\n        }\n    }\n\n    function declare_tuple_without_value() external {\n        assembly {\n            let x, y, z\n            mstore(0, x)\n            mstore(32, y)\n            mstore(64, z)\n            return(0, 96)\n        }\n    }\n\n    function declare_with_value() external {\n        assembly {\n            let x := 0xdeadbeef\n            mstore(0, x)\n            return(0, 32)\n        }\n    }\n\n    function declare_tuple_with_value() external {\n        assembly {\n            function f() -> _1, _2, _3 {\n                _1 := 1\n                _2 := 2\n                _3 := 3\n            }\n            let x, y, z := f()\n            mstore(0, x)\n            mstore(32, y)\n            mstore(64, z)\n            return(0, 96)\n        }\n    }\n\n    function assign() external {\n        assembly {\n            let x\n            x := 0xdeadbeef\n            mstore(0, x)\n            return(0, 32)\n        }\n    }\n\n    function assign_tuple() external {\n        assembly {\n            function f() -> _1, _2, _3 {\n                _1 := 1\n                _2 := 2\n                _3 := 3\n            }\n            let x, y, z\n            x, y, z := f()\n            mstore(0, x)\n            mstore(32, y)\n            mstore(64, z)\n            return(0, 96)\n        }\n    }\n}\n"}},"settings":{"evmVersion":"london","optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}}